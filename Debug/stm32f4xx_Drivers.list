
stm32f4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000404c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004254  08004254  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08004254  08004254  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004254  08004254  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800425c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000030  0800428c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  0800428c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042f2  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c79  00000000  00000000  00024352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  00024fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000238  00000000  00000000  00025278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000038ca  00000000  00000000  000254b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000360a  00000000  00000000  00028d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b6ca  00000000  00000000  0002c384  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008fc  00000000  00000000  00037acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000030 	.word	0x20000030
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080041dc 	.word	0x080041dc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000034 	.word	0x20000034
 80001e4:	080041dc 	.word	0x080041dc

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <ds3231_set_time>:
static void ds3231_write(I2C_handle_t *pI2CHandle,uint8_t value,uint8_t rtc_reg_addr);
static uint8_t ds3231_read(I2C_handle_t *pI2CHandle,uint8_t rtc_reg_addr);
static uint8_t bcd_to_decimal(uint8_t value);

void ds3231_set_time(I2C_handle_t *pI2CHandle,RTC_Time_t  *pTime)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
    uint8_t hrs;
	// Seconds byte setting
    ds3231_write(pI2CHandle,decimal_to_bcd(pTime->seconds),DS3231_ADDR_SEC);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f95c 	bl	80004c4 <decimal_to_bcd>
 800020c:	4603      	mov	r3, r0
 800020e:	2200      	movs	r2, #0
 8000210:	4619      	mov	r1, r3
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 f904 	bl	8000420 <ds3231_write>

    //Minute byte setting
    ds3231_write(pI2CHandle,decimal_to_bcd(pTime->minutes),DS3231_ADDR_MIN);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	785b      	ldrb	r3, [r3, #1]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f951 	bl	80004c4 <decimal_to_bcd>
 8000222:	4603      	mov	r3, r0
 8000224:	2201      	movs	r2, #1
 8000226:	4619      	mov	r1, r3
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f000 f8f9 	bl	8000420 <ds3231_write>
    //Hour byte setting
    hrs=decimal_to_bcd(pTime->hours);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	789b      	ldrb	r3, [r3, #2]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f946 	bl	80004c4 <decimal_to_bcd>
 8000238:	4603      	mov	r3, r0
 800023a:	73fb      	strb	r3, [r7, #15]
    if( pTime->time_format == TIME_FORMATS_24HRS)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d104      	bne.n	800024e <ds3231_set_time+0x56>
    {
    	hrs &=~(1<<6);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e017      	b.n	800027e <ds3231_set_time+0x86>

    }
    else
    {
    	hrs |=1<<6;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000254:	73fb      	strb	r3, [r7, #15]


    hrs |=	(pTime->time_format == TIME_FORMAT_12HRS_PM)? hrs|(1<<5) : hrs & ~(1<<5);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	78db      	ldrb	r3, [r3, #3]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d105      	bne.n	800026a <ds3231_set_time+0x72>
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	b2db      	uxtb	r3, r3
 8000266:	b25b      	sxtb	r3, r3
 8000268:	e004      	b.n	8000274 <ds3231_set_time+0x7c>
 800026a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800026e:	f023 0320 	bic.w	r3, r3, #32
 8000272:	b25b      	sxtb	r3, r3
 8000274:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000278:	4313      	orrs	r3, r2
 800027a:	b25b      	sxtb	r3, r3
 800027c:	73fb      	strb	r3, [r7, #15]
    }

    ds3231_write(pI2CHandle,hrs,DS3231_ADDR_HRS);
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	2202      	movs	r2, #2
 8000282:	4619      	mov	r1, r3
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f000 f8cb 	bl	8000420 <ds3231_write>



}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <ds3231_get_time>:
void ds3231_get_time(I2C_handle_t *pI2CHandle,RTC_Time_t  *pTime)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
	pTime->seconds = ds3231_read(pI2CHandle,DS3231_ADDR_SEC);
 800029c:	2100      	movs	r1, #0
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 f8d8 	bl	8000454 <ds3231_read>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	701a      	strb	r2, [r3, #0]
	pTime->seconds = bcd_to_decimal(pTime->seconds);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f8ec 	bl	800048e <bcd_to_decimal>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	701a      	strb	r2, [r3, #0]

	pTime->minutes = ds3231_read(pI2CHandle,DS3231_ADDR_MIN);
 80002be:	2101      	movs	r1, #1
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f000 f8c7 	bl	8000454 <ds3231_read>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	705a      	strb	r2, [r3, #1]
	pTime->minutes = bcd_to_decimal(pTime->minutes);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	785b      	ldrb	r3, [r3, #1]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8db 	bl	800048e <bcd_to_decimal>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	705a      	strb	r2, [r3, #1]

	pTime->hours  = ds3231_read(pI2CHandle,DS3231_ADDR_HRS);
 80002e0:	2102      	movs	r1, #2
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 f8b6 	bl	8000454 <ds3231_read>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	709a      	strb	r2, [r3, #2]



	if(pTime->hours & ( 1 << 6)){
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d013      	beq.n	8000324 <ds3231_get_time+0x92>

		pTime->time_format =  !((pTime->hours & ( 1 << 5)) == 0) ;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	789b      	ldrb	r3, [r3, #2]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	2b00      	cmp	r3, #0
 8000306:	bf14      	ite	ne
 8000308:	2301      	movne	r3, #1
 800030a:	2300      	moveq	r3, #0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	70da      	strb	r2, [r3, #3]
		pTime->hours &= ~(0x3 << 5);//Clear 6 and 5
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800031c:	b2da      	uxtb	r2, r3
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	709a      	strb	r2, [r3, #2]
 8000322:	e002      	b.n	800032a <ds3231_get_time+0x98>
		}else{
			//24 hr format
			pTime->time_format = TIME_FORMATS_24HRS;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2202      	movs	r2, #2
 8000328:	70da      	strb	r2, [r3, #3]
		}

	pTime->hours = bcd_to_decimal(pTime->hours);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f8ad 	bl	800048e <bcd_to_decimal>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	709a      	strb	r2, [r3, #2]

}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <ds3231_set_date>:

void ds3231_set_date(I2C_handle_t *pI2CHandle,RTC_Date_t *pdate)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	//Setting Day
	ds3231_write(pI2CHandle,decimal_to_bcd(pdate->day),DS3231_ADDR_DAY);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	78db      	ldrb	r3, [r3, #3]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f8b6 	bl	80004c4 <decimal_to_bcd>
 8000358:	4603      	mov	r3, r0
 800035a:	2203      	movs	r2, #3
 800035c:	4619      	mov	r1, r3
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 f85e 	bl	8000420 <ds3231_write>

	ds3231_write(pI2CHandle,decimal_to_bcd(pdate->date),DS3231_ADDR_DATE);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8ab 	bl	80004c4 <decimal_to_bcd>
 800036e:	4603      	mov	r3, r0
 8000370:	2204      	movs	r2, #4
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f853 	bl	8000420 <ds3231_write>

	ds3231_write(pI2CHandle,decimal_to_bcd(pdate->month),DS3231_ADDR_MONTH);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f8a0 	bl	80004c4 <decimal_to_bcd>
 8000384:	4603      	mov	r3, r0
 8000386:	2205      	movs	r2, #5
 8000388:	4619      	mov	r1, r3
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f000 f848 	bl	8000420 <ds3231_write>

	ds3231_write(pI2CHandle,decimal_to_bcd(pdate->year),DS3231_ADDR_YEAR);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f895 	bl	80004c4 <decimal_to_bcd>
 800039a:	4603      	mov	r3, r0
 800039c:	2206      	movs	r2, #6
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f000 f83d 	bl	8000420 <ds3231_write>


}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <ds3231_get_date>:
void ds3231_get_date(I2C_handle_t *pI2CHandle,RTC_Date_t *pdate)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]

	pdate->day = bcd_to_decimal(ds3231_read(pI2CHandle,DS3231_ADDR_DAY));
 80003b8:	2103      	movs	r1, #3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f84a 	bl	8000454 <ds3231_read>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f863 	bl	800048e <bcd_to_decimal>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	70da      	strb	r2, [r3, #3]

	pdate->date = bcd_to_decimal(ds3231_read(pI2CHandle,DS3231_ADDR_DATE));
 80003d0:	2104      	movs	r1, #4
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f83e 	bl	8000454 <ds3231_read>
 80003d8:	4603      	mov	r3, r0
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f857 	bl	800048e <bcd_to_decimal>
 80003e0:	4603      	mov	r3, r0
 80003e2:	461a      	mov	r2, r3
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	701a      	strb	r2, [r3, #0]

	pdate->month = bcd_to_decimal(ds3231_read(pI2CHandle,DS3231_ADDR_MONTH));
 80003e8:	2105      	movs	r1, #5
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f832 	bl	8000454 <ds3231_read>
 80003f0:	4603      	mov	r3, r0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f84b 	bl	800048e <bcd_to_decimal>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	705a      	strb	r2, [r3, #1]

	pdate->year  = bcd_to_decimal(ds3231_read(pI2CHandle,DS3231_ADDR_YEAR));
 8000400:	2106      	movs	r1, #6
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 f826 	bl	8000454 <ds3231_read>
 8000408:	4603      	mov	r3, r0
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f83f 	bl	800048e <bcd_to_decimal>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	709a      	strb	r2, [r3, #2]

}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <ds3231_write>:


static void ds3231_write(I2C_handle_t *pI2CHandle,uint8_t value,uint8_t rtc_reg_addr)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
 800042c:	4613      	mov	r3, r2
 800042e:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[2];
	temp[0]=rtc_reg_addr;
 8000430:	78bb      	ldrb	r3, [r7, #2]
 8000432:	733b      	strb	r3, [r7, #12]
	temp[1]=value;
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(pI2CHandle->pI2Cx,temp,2,DS3231_I2C_ADDRESS,0);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	f107 010c 	add.w	r1, r7, #12
 8000440:	2300      	movs	r3, #0
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2368      	movs	r3, #104	; 0x68
 8000446:	2202      	movs	r2, #2
 8000448:	f000 fe06 	bl	8001058 <I2C_MasterSendData>
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <ds3231_read>:

static uint8_t ds3231_read(I2C_handle_t *pI2CHandle,uint8_t rtc_reg_addr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	uint8_t pRxBuffer;
	I2C_MasterSendData(pI2CHandle->pI2Cx,&rtc_reg_addr,1,DS3231_I2C_ADDRESS,1);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6818      	ldr	r0, [r3, #0]
 8000464:	1cf9      	adds	r1, r7, #3
 8000466:	2301      	movs	r3, #1
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2368      	movs	r3, #104	; 0x68
 800046c:	2201      	movs	r2, #1
 800046e:	f000 fdf3 	bl	8001058 <I2C_MasterSendData>
	I2C_RecieveData(pI2CHandle,&pRxBuffer, 1,DS3231_I2C_ADDRESS, 0);
 8000472:	f107 010f 	add.w	r1, r7, #15
 8000476:	2300      	movs	r3, #0
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2368      	movs	r3, #104	; 0x68
 800047c:	2201      	movs	r2, #1
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 fe52 	bl	8001128 <I2C_RecieveData>
	return pRxBuffer;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <bcd_to_decimal>:

static uint8_t bcd_to_decimal(uint8_t value)
{
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
	uint8_t h_nibble ,l_nibble;
	h_nibble = (value>>4)*10;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	091b      	lsrs	r3, r3, #4
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	73fb      	strb	r3, [r7, #15]
	l_nibble = value & (uint8_t)0xf;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	73bb      	strb	r3, [r7, #14]

	return h_nibble+l_nibble;
 80004b0:	7bfa      	ldrb	r2, [r7, #15]
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	4413      	add	r3, r2
 80004b6:	b2db      	uxtb	r3, r3
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <decimal_to_bcd>:
	I2C_RecieveData(pI2CHandle,&pRxBuffer, 1,DS3231_I2C_ADDRESS, 0);
	return pRxBuffer;

}
static uint8_t decimal_to_bcd(uint8_t value)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	uint8_t h_nibble ,l_nibble;
	uint8_t bcd=value;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	73fb      	strb	r3, [r7, #15]
	if(value>=10)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b09      	cmp	r3, #9
 80004d6:	d917      	bls.n	8000508 <decimal_to_bcd+0x44>
	{
		h_nibble = value/10;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <decimal_to_bcd+0x54>)
 80004dc:	fba2 2303 	umull	r2, r3, r2, r3
 80004e0:	08db      	lsrs	r3, r3, #3
 80004e2:	73bb      	strb	r3, [r7, #14]
		l_nibble = value%10;
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <decimal_to_bcd+0x54>)
 80004e8:	fba3 1302 	umull	r1, r3, r3, r2
 80004ec:	08d9      	lsrs	r1, r3, #3
 80004ee:	460b      	mov	r3, r1
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	440b      	add	r3, r1
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	737b      	strb	r3, [r7, #13]
		bcd =h_nibble <<4;
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	73fb      	strb	r3, [r7, #15]
		bcd |=l_nibble;
 8000500:	7bfa      	ldrb	r2, [r7, #15]
 8000502:	7b7b      	ldrb	r3, [r7, #13]
 8000504:	4313      	orrs	r3, r2
 8000506:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000508:	7bfb      	ldrb	r3, [r7, #15]

}
 800050a:	4618      	mov	r0, r3
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	cccccccd 	.word	0xcccccccd

0800051c <delay>:
#include"stm32f47xx.h"
#include "LCD.h"


static void delay(uint32_t k)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	uint32_t j;
	for(int i=0;i<=k;i++)
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	e005      	b.n	8000536 <delay+0x1a>
	{
		j++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<=k;i++)
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3301      	adds	r3, #1
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	d2f5      	bcs.n	800052a <delay+0xe>
	}
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <Lcd_Send_Command>:
void Lcd_Send_Command(uint8_t data,I2C_Reg_Def_t *pI2c)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af02      	add	r7, sp, #8
 8000550:	4603      	mov	r3, r0
 8000552:	6039      	str	r1, [r7, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
	lcd_t lcd;
	uint8_t temp =  data;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	73fb      	strb	r3, [r7, #15]
	lcd.Lcd_Data=(temp &0xF0);
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	f023 030f 	bic.w	r3, r3, #15
 8000560:	b2db      	uxtb	r3, r3
 8000562:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Register_Select =0;
 8000564:	7b3b      	ldrb	r3, [r7, #12]
 8000566:	f36f 0300 	bfc	r3, #0, #1
 800056a:	733b      	strb	r3, [r7, #12]
	lcd.port_t.X=1;
 800056c:	7b3b      	ldrb	r3, [r7, #12]
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Read_write=0;
 8000574:	7b3b      	ldrb	r3, [r7, #12]
 8000576:	f36f 0341 	bfc	r3, #1, #1
 800057a:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Enable=1;
 800057c:	7b3b      	ldrb	r3, [r7, #12]
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,1);
 8000584:	f107 010c 	add.w	r1, r7, #12
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2327      	movs	r3, #39	; 0x27
 800058e:	2201      	movs	r2, #1
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f000 fd61 	bl	8001058 <I2C_MasterSendData>
	delay(5000);
 8000596:	f241 3088 	movw	r0, #5000	; 0x1388
 800059a:	f7ff ffbf 	bl	800051c <delay>
	lcd.port_t.Enable=0;
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f36f 0382 	bfc	r3, #2, #1
 80005a4:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,1);
 80005a6:	f107 010c 	add.w	r1, r7, #12
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2327      	movs	r3, #39	; 0x27
 80005b0:	2201      	movs	r2, #1
 80005b2:	6838      	ldr	r0, [r7, #0]
 80005b4:	f000 fd50 	bl	8001058 <I2C_MasterSendData>
	delay(5000);
 80005b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005bc:	f7ff ffae 	bl	800051c <delay>
	lcd.Lcd_Data=(temp &0x0F)<<4;
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	733b      	strb	r3, [r7, #12]
    lcd.port_t.Register_Select =0;
 80005c8:	7b3b      	ldrb	r3, [r7, #12]
 80005ca:	f36f 0300 	bfc	r3, #0, #1
 80005ce:	733b      	strb	r3, [r7, #12]
    lcd.port_t.X=1;
 80005d0:	7b3b      	ldrb	r3, [r7, #12]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Enable=1;
 80005d8:	7b3b      	ldrb	r3, [r7, #12]
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,1);
 80005e0:	f107 010c 	add.w	r1, r7, #12
 80005e4:	2301      	movs	r3, #1
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2327      	movs	r3, #39	; 0x27
 80005ea:	2201      	movs	r2, #1
 80005ec:	6838      	ldr	r0, [r7, #0]
 80005ee:	f000 fd33 	bl	8001058 <I2C_MasterSendData>
	delay(5000);
 80005f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f6:	f7ff ff91 	bl	800051c <delay>
	lcd.port_t.Enable=0;
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	f36f 0382 	bfc	r3, #2, #1
 8000600:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,1);
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	2301      	movs	r3, #1
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2327      	movs	r3, #39	; 0x27
 800060c:	2201      	movs	r2, #1
 800060e:	6838      	ldr	r0, [r7, #0]
 8000610:	f000 fd22 	bl	8001058 <I2C_MasterSendData>
	delay(5000);
 8000614:	f241 3088 	movw	r0, #5000	; 0x1388
 8000618:	f7ff ff80 	bl	800051c <delay>



}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <Lcd_Send_Data>:
void Lcd_Send_Data(uint8_t data,I2C_Reg_Def_t *pI2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
	lcd_t lcd;

	uint8_t temp =  data;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	73fb      	strb	r3, [r7, #15]
	lcd.Lcd_Data=(temp &0xF0);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f023 030f 	bic.w	r3, r3, #15
 800063a:	b2db      	uxtb	r3, r3
 800063c:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Register_Select =1;
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	733b      	strb	r3, [r7, #12]
	lcd.port_t.X=1;
 8000646:	7b3b      	ldrb	r3, [r7, #12]
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Read_write=0;
 800064e:	7b3b      	ldrb	r3, [r7, #12]
 8000650:	f36f 0341 	bfc	r3, #1, #1
 8000654:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Enable=1;
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,0);
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2327      	movs	r3, #39	; 0x27
 8000668:	2201      	movs	r2, #1
 800066a:	6838      	ldr	r0, [r7, #0]
 800066c:	f000 fcf4 	bl	8001058 <I2C_MasterSendData>
	delay(10000);
 8000670:	f242 7010 	movw	r0, #10000	; 0x2710
 8000674:	f7ff ff52 	bl	800051c <delay>
	lcd.port_t.Enable=0;
 8000678:	7b3b      	ldrb	r3, [r7, #12]
 800067a:	f36f 0382 	bfc	r3, #2, #1
 800067e:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,0);
 8000680:	f107 010c 	add.w	r1, r7, #12
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2327      	movs	r3, #39	; 0x27
 800068a:	2201      	movs	r2, #1
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f000 fce3 	bl	8001058 <I2C_MasterSendData>
	delay(10000);
 8000692:	f242 7010 	movw	r0, #10000	; 0x2710
 8000696:	f7ff ff41 	bl	800051c <delay>
	lcd.Lcd_Data=(temp &0x0F)<<4;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Register_Select =1;
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	733b      	strb	r3, [r7, #12]
	lcd.port_t.X=1;
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	733b      	strb	r3, [r7, #12]
	lcd.port_t.Enable=1;
 80006b2:	7b3b      	ldrb	r3, [r7, #12]
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,0);
 80006ba:	f107 010c 	add.w	r1, r7, #12
 80006be:	2300      	movs	r3, #0
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2327      	movs	r3, #39	; 0x27
 80006c4:	2201      	movs	r2, #1
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	f000 fcc6 	bl	8001058 <I2C_MasterSendData>
	delay(10000);
 80006cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80006d0:	f7ff ff24 	bl	800051c <delay>
	lcd.port_t.Enable=0;
 80006d4:	7b3b      	ldrb	r3, [r7, #12]
 80006d6:	f36f 0382 	bfc	r3, #2, #1
 80006da:	733b      	strb	r3, [r7, #12]
	I2C_MasterSendData(pI2c,&lcd.Lcd_Data,1,I2C_LCD_ADDR,0);
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	2300      	movs	r3, #0
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	2201      	movs	r2, #1
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f000 fcb5 	bl	8001058 <I2C_MasterSendData>
	delay(10000);
 80006ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80006f2:	f7ff ff13 	bl	800051c <delay>
	data++;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3301      	adds	r3, #1
 80006fa:	71fb      	strb	r3, [r7, #7]



}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t column,I2C_Reg_Def_t *pI2c)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	603a      	str	r2, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	460b      	mov	r3, r1
 8000712:	71bb      	strb	r3, [r7, #6]
  column--;
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	3b01      	subs	r3, #1
 8000718:	71bb      	strb	r3, [r7, #6]
  switch (row)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d002      	beq.n	8000726 <lcd_set_cursor+0x22>
 8000720:	2b02      	cmp	r3, #2
 8000722:	d00a      	beq.n	800073a <lcd_set_cursor+0x36>
    case 2:

    	Lcd_Send_Command((column |= 0xC0),pI2c);
      break;
    default:
      break;
 8000724:	e013      	b.n	800074e <lcd_set_cursor+0x4a>
    	Lcd_Send_Command((column |= 0x80),pI2c);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff09 	bl	800054a <Lcd_Send_Command>
      break;
 8000738:	e009      	b.n	800074e <lcd_set_cursor+0x4a>
    	Lcd_Send_Command((column |= 0xC0),pI2c);
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff feff 	bl	800054a <Lcd_Send_Command>
      break;
 800074c:	bf00      	nop
  }
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd_clear_display>:
void lcd_clear_display(I2C_Reg_Def_t *pI2c)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
	Lcd_Send_Command(0x1,pI2c);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fef2 	bl	800054a <Lcd_Send_Command>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <I2C_lcd_int>:
void I2C_lcd_int(I2C_Reg_Def_t *pI2c)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	delay(1000);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f7ff fece 	bl	800051c <delay>
	char init_cmd[]={0x28,0x02,0x0C,0X01,0X06,0x80};//INT command
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <I2C_lcd_int+0x4c>)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078a:	6018      	str	r0, [r3, #0]
 800078c:	3304      	adds	r3, #4
 800078e:	8019      	strh	r1, [r3, #0]
    for(int i=0;i<6;i++)
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e00b      	b.n	80007ae <I2C_lcd_int+0x3e>
	 {
		Lcd_Send_Command(init_cmd[i],I2C1);
 8000796:	f107 020c 	add.w	r2, r7, #12
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <I2C_lcd_int+0x50>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fed1 	bl	800054a <Lcd_Send_Command>
    for(int i=0;i<6;i++)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	ddf0      	ble.n	8000796 <I2C_lcd_int+0x26>

	 }
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	080041f4 	.word	0x080041f4
 80007c0:	40005400 	.word	0x40005400

080007c4 <GPIO_PCLKControl>:
 * @param[in] -  Base address of gpio peripheral,Enable or Disable macro
 * @return    -   none
 * @Note      -   none
 */
void  GPIO_PCLKControl(Gpio_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d136      	bne.n	8000844 <GPIO_PCLKControl+0x80>
	{
		if(pGPIOx == GPIOA)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a38      	ldr	r2, [pc, #224]	; (80008bc <GPIO_PCLKControl+0xf8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <GPIO_PCLKControl+0x28>
		{
			GPIOAP_CLK_EN() ;
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a37      	ldr	r2, [pc, #220]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
				else if(pGPIOx == GPIOE)
				{
					GPIOEP_CLK_DI() ;
				}
	}
}
 80007ea:	e061      	b.n	80008b0 <GPIO_PCLKControl+0xec>
		else if(pGPIOx == GPIOB)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <GPIO_PCLKControl+0x100>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d106      	bne.n	8000802 <GPIO_PCLKControl+0x3e>
			GPIOBP_CLK_EN() ;
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a31      	ldr	r2, [pc, #196]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000800:	e056      	b.n	80008b0 <GPIO_PCLKControl+0xec>
		else if(pGPIOx == GPIOC)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a30      	ldr	r2, [pc, #192]	; (80008c8 <GPIO_PCLKControl+0x104>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <GPIO_PCLKControl+0x54>
			GPIOCP_CLK_EN() ;
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2c      	ldr	r2, [pc, #176]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000816:	e04b      	b.n	80008b0 <GPIO_PCLKControl+0xec>
		else if(pGPIOx == GPIOD)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <GPIO_PCLKControl+0x108>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <GPIO_PCLKControl+0x6a>
			GPIODP_CLK_EN() ;
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082c:	e040      	b.n	80008b0 <GPIO_PCLKControl+0xec>
		else if(pGPIOx == GPIOE)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <GPIO_PCLKControl+0x10c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d13c      	bne.n	80008b0 <GPIO_PCLKControl+0xec>
			GPIOEP_CLK_EN() ;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000842:	e035      	b.n	80008b0 <GPIO_PCLKControl+0xec>
		if(pGPIOx == GPIOA)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <GPIO_PCLKControl+0xf8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <GPIO_PCLKControl+0x96>
					GPIOAP_CLK_DI() ;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000858:	e02a      	b.n	80008b0 <GPIO_PCLKControl+0xec>
				else if(pGPIOx == GPIOB)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <GPIO_PCLKControl+0x100>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <GPIO_PCLKControl+0xac>
					GPIOBP_CLK_DI() ;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000868:	f023 0302 	bic.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800086e:	e01f      	b.n	80008b0 <GPIO_PCLKControl+0xec>
				else if(pGPIOx == GPIOC)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <GPIO_PCLKControl+0x104>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <GPIO_PCLKControl+0xc2>
					GPIOCP_CLK_DI() ;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 800087e:	f023 0304 	bic.w	r3, r3, #4
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000884:	e014      	b.n	80008b0 <GPIO_PCLKControl+0xec>
				else if(pGPIOx == GPIOD)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <GPIO_PCLKControl+0x108>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <GPIO_PCLKControl+0xd8>
					GPIODP_CLK_DI() ;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 8000894:	f023 0308 	bic.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089a:	e009      	b.n	80008b0 <GPIO_PCLKControl+0xec>
				else if(pGPIOx == GPIOE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <GPIO_PCLKControl+0x10c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d105      	bne.n	80008b0 <GPIO_PCLKControl+0xec>
					GPIOEP_CLK_DI() ;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <GPIO_PCLKControl+0xfc>)
 80008aa:	f023 0310 	bic.w	r3, r3, #16
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40021000 	.word	0x40021000

080008d4 <GPIO_Init>:
 * @param[in] -  Base address of GPIO peripheral,Enable or Disable macro
 * @return    -   none
 * @Note      -   none
 */
void  GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	 GPIO_PCLKControl(pGPIOHandle->pGPIOx,ENABLE);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff6e 	bl	80007c4 <GPIO_PCLKControl>
     if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81b      	bhi.n	8000928 <GPIO_Init+0x54>
     {
         //1.Configure Mode
    	 int temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber*2));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	461a      	mov	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	791b      	ldrb	r3, [r3, #4]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	613b      	str	r3, [r7, #16]
    	 pGPIOHandle->pGPIOx->GPIOx_MODER &=~temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
     	 pGPIOHandle->pGPIOx->GPIOx_MODER |=temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e09a      	b.n	8000a5e <GPIO_Init+0x18a>
     }

     else
     {

           if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d117      	bne.n	8000960 <GPIO_Init+0x8c>
              {
            	   EXTI->EXTI_FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000930:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <GPIO_Init+0x284>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7912      	ldrb	r2, [r2, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	2201      	movs	r2, #1
 800093c:	408a      	lsls	r2, r1
 800093e:	4611      	mov	r1, r2
 8000940:	4a85      	ldr	r2, [pc, #532]	; (8000b58 <GPIO_Init+0x284>)
 8000942:	430b      	orrs	r3, r1
 8000944:	60d3      	str	r3, [r2, #12]
            	   EXTI->EXTI_RTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000946:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <GPIO_Init+0x284>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7912      	ldrb	r2, [r2, #4]
 800094e:	4611      	mov	r1, r2
 8000950:	2201      	movs	r2, #1
 8000952:	408a      	lsls	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	4611      	mov	r1, r2
 8000958:	4a7f      	ldr	r2, [pc, #508]	; (8000b58 <GPIO_Init+0x284>)
 800095a:	400b      	ands	r3, r1
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	e035      	b.n	80009cc <GPIO_Init+0xf8>
              }
           else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b05      	cmp	r3, #5
 8000966:	d117      	bne.n	8000998 <GPIO_Init+0xc4>
               {
            	   EXTI->EXTI_RTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000968:	4b7b      	ldr	r3, [pc, #492]	; (8000b58 <GPIO_Init+0x284>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7912      	ldrb	r2, [r2, #4]
 8000970:	4611      	mov	r1, r2
 8000972:	2201      	movs	r2, #1
 8000974:	408a      	lsls	r2, r1
 8000976:	4611      	mov	r1, r2
 8000978:	4a77      	ldr	r2, [pc, #476]	; (8000b58 <GPIO_Init+0x284>)
 800097a:	430b      	orrs	r3, r1
 800097c:	6093      	str	r3, [r2, #8]
            	   EXTI->EXTI_FTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <GPIO_Init+0x284>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7912      	ldrb	r2, [r2, #4]
 8000986:	4611      	mov	r1, r2
 8000988:	2201      	movs	r2, #1
 800098a:	408a      	lsls	r2, r1
 800098c:	43d2      	mvns	r2, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a71      	ldr	r2, [pc, #452]	; (8000b58 <GPIO_Init+0x284>)
 8000992:	400b      	ands	r3, r1
 8000994:	60d3      	str	r3, [r2, #12]
 8000996:	e019      	b.n	80009cc <GPIO_Init+0xf8>
               }
           else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	2b06      	cmp	r3, #6
 800099e:	d115      	bne.n	80009cc <GPIO_Init+0xf8>
               {
            	   EXTI->EXTI_FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009a0:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <GPIO_Init+0x284>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7912      	ldrb	r2, [r2, #4]
 80009a8:	4611      	mov	r1, r2
 80009aa:	2201      	movs	r2, #1
 80009ac:	408a      	lsls	r2, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <GPIO_Init+0x284>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	60d3      	str	r3, [r2, #12]
            	   EXTI->EXTI_RTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009b6:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <GPIO_Init+0x284>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	7912      	ldrb	r2, [r2, #4]
 80009be:	4611      	mov	r1, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	408a      	lsls	r2, r1
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a64      	ldr	r2, [pc, #400]	; (8000b58 <GPIO_Init+0x284>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6093      	str	r3, [r2, #8]
               }

    	         EXTI->EXTI_IMR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009cc:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <GPIO_Init+0x284>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	7912      	ldrb	r2, [r2, #4]
 80009d4:	4611      	mov	r1, r2
 80009d6:	2201      	movs	r2, #1
 80009d8:	408a      	lsls	r2, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	4a5e      	ldr	r2, [pc, #376]	; (8000b58 <GPIO_Init+0x284>)
 80009de:	430b      	orrs	r3, r1
 80009e0:	6013      	str	r3, [r2, #0]
    	         SYSCF_CLK_EN();
 80009e2:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <GPIO_Init+0x288>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a5d      	ldr	r2, [pc, #372]	; (8000b5c <GPIO_Init+0x288>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
    	        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	791b      	ldrb	r3, [r3, #4]
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	75fb      	strb	r3, [r7, #23]

    	        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	75bb      	strb	r3, [r7, #22]

    	        uint8_t portcode = GPIO_BASEADDR__TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <GPIO_Init+0x28c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d01d      	beq.n	8000a46 <GPIO_Init+0x172>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <GPIO_Init+0x290>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d016      	beq.n	8000a42 <GPIO_Init+0x16e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a53      	ldr	r2, [pc, #332]	; (8000b68 <GPIO_Init+0x294>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00f      	beq.n	8000a3e <GPIO_Init+0x16a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <GPIO_Init+0x298>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d008      	beq.n	8000a3a <GPIO_Init+0x166>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <GPIO_Init+0x29c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <GPIO_Init+0x162>
 8000a32:	2304      	movs	r3, #4
 8000a34:	e008      	b.n	8000a48 <GPIO_Init+0x174>
 8000a36:	23ff      	movs	r3, #255	; 0xff
 8000a38:	e006      	b.n	8000a48 <GPIO_Init+0x174>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e004      	b.n	8000a48 <GPIO_Init+0x174>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <GPIO_Init+0x174>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <GPIO_Init+0x174>
 8000a46:	2300      	movs	r3, #0
 8000a48:	757b      	strb	r3, [r7, #21]

    	        SYSCF->SYSCFG_EXTICR[temp1] =portcode<<(temp2*4) ;
 8000a4a:	7d7a      	ldrb	r2, [r7, #21]
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	fa02 f103 	lsl.w	r1, r2, r3
 8000a54:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <GPIO_Init+0x2a0>)
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


     }

      //2. Configure GPIO port output speed register
     pGPIOHandle->pGPIOx->GPIOx_OSPEEDR &=~(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)*2);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	799b      	ldrb	r3, [r3, #6]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	400a      	ands	r2, r1
 8000a7e:	609a      	str	r2, [r3, #8]
     pGPIOHandle->pGPIOx->GPIOx_OSPEEDR |=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)*2);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	799b      	ldrb	r3, [r3, #6]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]


     //3. Configure GPIO port pull-up/pull-down register
     uint32_t temp =(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)*2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	79db      	ldrb	r3, [r3, #7]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	60fb      	str	r3, [r7, #12]
     pGPIOHandle->pGPIOx->GPIOx_PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2103      	movs	r1, #3
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	400a      	ands	r2, r1
 8000ace:	60da      	str	r2, [r3, #12]
     pGPIOHandle->pGPIOx->GPIOx_PUPDR |=temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68d9      	ldr	r1, [r3, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	60da      	str	r2, [r3, #12]


     //4. Configure GPIO port output type register

     pGPIOHandle->pGPIOx->GPIOx_OTYPER |=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	4619      	mov	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	605a      	str	r2, [r3, #4]

   if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber<8)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d812      	bhi.n	8000b2c <GPIO_Init+0x258>
   {
   pGPIOHandle->pGPIOx->GPIOx_AFRL |=pGPIOHandle->GPIO_PinConfig.GPIO_pinAltFunMode<<( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8)*4;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6a1a      	ldr	r2, [r3, #32]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	4619      	mov	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	4619      	mov	r1, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	621a      	str	r2, [r3, #32]
   else
   {
	   pGPIOHandle->pGPIOx->GPIOx_AFRH |=pGPIOHandle->GPIO_PinConfig.GPIO_pinAltFunMode<<( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8)*4;
   }

}
 8000b2a:	e011      	b.n	8000b50 <GPIO_Init+0x27c>
	   pGPIOHandle->pGPIOx->GPIOx_AFRH |=pGPIOHandle->GPIO_PinConfig.GPIO_pinAltFunMode<<( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8)*4;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a5b      	ldrb	r3, [r3, #9]
 8000b36:	4619      	mov	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b50:	bf00      	nop
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013c00 	.word	0x40013c00
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40013800 	.word	0x40013800

08000b78 <GPIO_Read_InputPin>:
 * @param[in] -  Base address of GPIO peripheral, pin number
 * @return    -   none
 * @Note      -   Pin value
 */
uint8_t  GPIO_Read_InputPin(Gpio_RegDef_t *pGPIOx,uint8_t PinNumber)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	int temp = pGPIOx->GPIOx_IDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	60fb      	str	r3, [r7, #12]
	uint8_t value=(temp>>PinNumber)&01;
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	fa42 f303 	asr.w	r3, r2, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	72fb      	strb	r3, [r7, #11]
	return value;
 8000b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <GPIO_Write_Outputpin>:
 * @param[in] -  Base address of GPIO peripheral , Pin number , output value
 * @return    -   none
 * @Note      -   none
 */
void  GPIO_Write_Outputpin(Gpio_RegDef_t *pGPIOx,uint8_t PinNumber,uint8_t value)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	70bb      	strb	r3, [r7, #2]
	if(value==SET)
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d109      	bne.n	8000bd2 <GPIO_Write_Outputpin+0x2a>
	{
	pGPIOx->GPIOx_ODR  |=(value<<PinNumber);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	78b9      	ldrb	r1, [r7, #2]
 8000bc4:	78fa      	ldrb	r2, [r7, #3]
 8000bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx->GPIOx_ODR  &=~(1<<PinNumber);
	}
}
 8000bd0:	e009      	b.n	8000be6 <GPIO_Write_Outputpin+0x3e>
		pGPIOx->GPIOx_ODR  &=~(1<<PinNumber);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	78fa      	ldrb	r2, [r7, #3]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	fa01 f202 	lsl.w	r2, r1, r2
 8000bde:	43d2      	mvns	r2, r2
 8000be0:	401a      	ands	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	615a      	str	r2, [r3, #20]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <GPIO_IRQConfig>:
 * @param[in] -  Peripheral IRQ number , priority ,Enable or Disable macro
 * @return    -   none
 * @Note      -   none
 */
void  GPIO_IRQConfig(uint8_t IRQNumber , uint8_t IRQPriority ,uint8_t EnorDi)
    {
 8000bf4:	b490      	push	{r4, r7}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	71bb      	strb	r3, [r7, #6]
 8000c02:	4613      	mov	r3, r2
 8000c04:	717b      	strb	r3, [r7, #5]
   	 if(EnorDi == ENABLE)
 8000c06:	797b      	ldrb	r3, [r7, #5]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d128      	bne.n	8000c5e <GPIO_IRQConfig+0x6a>
   	 {
   		 NVIC_CFG->NVIC_ISER[IRQNumber/32] |=1<<(IRQNumber%32);
 8000c0c:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	b2d8      	uxtb	r0, r3
 8000c14:	4603      	mov	r3, r0
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	f002 021f 	and.w	r2, r2, #31
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	4614      	mov	r4, r2
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   		 NVIC_CFG->NVIC_ISPR[IRQNumber/4]  |=IRQPriority <<((IRQNumber%4)+4);
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	b2d8      	uxtb	r0, r3
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	79b9      	ldrb	r1, [r7, #6]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	f002 0203 	and.w	r2, r2, #3
 8000c4a:	3204      	adds	r2, #4
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	4911      	ldr	r1, [pc, #68]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c52:	431a      	orrs	r2, r3
 8000c54:	f100 0310 	add.w	r3, r0, #16
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   	 else if(EnorDi == DISABLE)
   	 {
   		 NVIC_CFG->NVIC_ISER[IRQNumber/32] &=~(1<<(IRQNumber%32));

   	 }
    }
 8000c5c:	e016      	b.n	8000c8c <GPIO_IRQConfig+0x98>
   	 else if(EnorDi == DISABLE)
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d113      	bne.n	8000c8c <GPIO_IRQConfig+0x98>
   		 NVIC_CFG->NVIC_ISER[IRQNumber/32] &=~(1<<(IRQNumber%32));
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	095b      	lsrs	r3, r3, #5
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	f002 021f 	and.w	r2, r2, #31
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	43d2      	mvns	r2, r2
 8000c80:	4614      	mov	r4, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <GPIO_IRQConfig+0xa4>)
 8000c84:	4601      	mov	r1, r0
 8000c86:	4023      	ands	r3, r4
 8000c88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc90      	pop	{r4, r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <GPIO_IRQHandling>:
 * @param[in] -   Pin number of external interrupt
 * @return    -   none
 * @Note      -   none
 */
void  GPIO_IRQHandling(uint8_t PinNumber)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	EXTI->EXTI_PR |=1<<PinNumber;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <GPIO_IRQHandling+0x2c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <GPIO_IRQHandling+0x2c>)
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6153      	str	r3, [r2, #20]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40013c00 	.word	0x40013c00

08000ccc <I2C_PeripheralControl>:
 * @param[in] -    Base address of I2C peripheral,Enable or disbale macro
 * @return    -   none
 * @Note      -   none
 */
void I2C_PeripheralControl(I2C_Reg_Def_t *ptr,uint8_t EnoDi)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	if(EnoDi == ENABLE)
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d106      	bne.n	8000cec <I2C_PeripheralControl+0x20>
	{
		ptr->I2C_CR1 |=1<<0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
	}else
	{
		ptr->I2C_CR1 &=~(1<<0);
	}

}
 8000cea:	e005      	b.n	8000cf8 <I2C_PeripheralControl+0x2c>
		ptr->I2C_CR1 &=~(1<<0);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 0201 	bic.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <I2C_Peripheral_ACK_Control>:
 * @param[in] -  Base address of gpio peripheral,Enable or Disable macro
 * @return    -   none
 * @Note      -   none
 */
void I2C_Peripheral_ACK_Control(I2C_Reg_Def_t *pI2Cx,uint8_t EnoDi)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
	//NOTE : Acknowledge Control should only be enabled after Peripheral Enable (PE=1 in CR1)
	if(EnoDi == ENABLE)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d106      	bne.n	8000d24 <I2C_Peripheral_ACK_Control+0x20>
		pI2Cx->I2C_CR1 |=1<<ACK ;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
	else
	{
		 pI2Cx->I2C_CR1 &=~(1<<ACK);
	}

}
 8000d22:	e005      	b.n	8000d30 <I2C_Peripheral_ACK_Control+0x2c>
		 pI2Cx->I2C_CR1 &=~(1<<ACK);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <I2C_ClearADDRFlag>:
 * @param[in] -  Base address of I2C peripheral
 * @return    -   none
 * @Note      -   none
 */
static void I2C_ClearADDRFlag(I2C_Reg_Def_t *pI2Cx)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint32_t dummyread = pI2Cx->I2C_SR1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	60fb      	str	r3, [r7, #12]
	dummyread = pI2Cx->I2C_SR2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	60fb      	str	r3, [r7, #12]
	(void)dummyread;
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <I2C_ExecuteAddrPhase>:
 * @param[in] - Base address of I2C peripheral,Slave address
 * @return    - none
 * @Note      - none
 */
static void I2C_ExecuteAddrPhase(I2C_Reg_Def_t *pI2Cx,uint8_t SlaveAddr)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
	SlaveAddr <<=1;
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &=~(1);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR =SlaveAddr;
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	611a      	str	r2, [r3, #16]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <I2C_ExecuteAddrPhaseWrite>:
 * @param[in] -  Base address of I2C peripheral,Slave address
 * @return    -   none
 * @Note      -   none
 */
static void I2C_ExecuteAddrPhaseWrite(I2C_Reg_Def_t *pI2Cx,uint8_t SlaveAddr)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
	SlaveAddr <<=1;
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |=0x1;
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR =SlaveAddr;
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <I2C_GenerateStartCondition>:
 * @param[in] -  Base address of I2C peripheral
 * @return    -   none
 * @Note      -   none
 */
static  void I2C_GenerateStartCondition(I2C_Reg_Def_t *pI2Cx)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |=1<<START;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <I2C_GenerateStopCondition>:
 * @param[in] -  Base address of I2C peripheral
 * @return    -   none
 * @Note      -   none
 */
static  void I2C_GenerateStopCondition(I2C_Reg_Def_t *pI2Cx)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

	pI2Cx->I2C_CR1 |=1<<STOP;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <RCC_GetPCLKValue>:
 * @param[in] -   none
 * @return    -   none
 * @Note      -   Frequency of peripheral
 */
uint32_t RCC_GetPCLKValue(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
	uint32_t AHBclk,pclk,SystemClk,APB1_PreScalar,AHB_PreScaler;
	uint32_t System_clock_switch_status =( RCC->RCC_CFGR>>2) &0X3;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <RCC_GetPCLKValue+0x84>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	60bb      	str	r3, [r7, #8]
	if(System_clock_switch_status == 0)
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <RCC_GetPCLKValue+0x1e>
	{
		//NOTE : Internal RC oscillator in STM32F407G is 16MHZ
		SystemClk = 16000000ul;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <RCC_GetPCLKValue+0x88>)
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e004      	b.n	8000e1c <RCC_GetPCLKValue+0x28>
	}else if(System_clock_switch_status == 0)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <RCC_GetPCLKValue+0x28>
	{ //NOTE : External Crystal on  STM32F407G  Board is 8MHZ
		SystemClk = 8000000ul;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <RCC_GetPCLKValue+0x8c>)
 8000e1a:	60fb      	str	r3, [r7, #12]
	}else if(System_clock_switch_status == 0)
	{
		 //PLL WILL BE IMPLEMENTED LATER
	}
	AHB_PreScaler =(( RCC->RCC_CFGR>>4)&0XF);
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <RCC_GetPCLKValue+0x84>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
	if(AHB_PreScaler <8)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d802      	bhi.n	8000e34 <RCC_GetPCLKValue+0x40>
	{
		 AHBclk = SystemClk/1;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e004      	b.n	8000e3e <RCC_GetPCLKValue+0x4a>
	}else
	{
		AHBclk =SystemClk/AHB_PreScaler;
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
	}
	APB1_PreScalar = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
	APB1_PreScalar |=((RCC->RCC_CFGR>>10)&0X7);
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <RCC_GetPCLKValue+0x84>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	0a9b      	lsrs	r3, r3, #10
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	603b      	str	r3, [r7, #0]
	if(APB1_PreScalar < 4)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d802      	bhi.n	8000e5e <RCC_GetPCLKValue+0x6a>
	{
		pclk= AHBclk /1;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	e004      	b.n	8000e68 <RCC_GetPCLKValue+0x74>
	}else
	{
		pclk= AHBclk /APB1_PreScalar;
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	613b      	str	r3, [r7, #16]
	}



	return pclk;
 8000e68:	693b      	ldr	r3, [r7, #16]

}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	00f42400 	.word	0x00f42400
 8000e80:	007a1200 	.word	0x007a1200

08000e84 <I2C_PCLKControl>:
 * @param[in] -  Base address of gpio peripheral
 * @return    -   none
 * @Note      -   none
 */
void  I2C_PCLKControl(I2C_Reg_Def_t *pI2Cx,uint8_t EnorDi)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d120      	bne.n	8000ed8 <I2C_PCLKControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <I2C_PCLKControl+0xa0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d106      	bne.n	8000eac <I2C_PCLKControl+0x28>
		{
			I2C1_CLK_EN();
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
		{
		  I2C3_CLK_DI();

		}
	}
}
 8000eaa:	e035      	b.n	8000f18 <I2C_PCLKControl+0x94>
		else if(pI2Cx == I2C2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <I2C_PCLKControl+0xa8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d106      	bne.n	8000ec2 <I2C_PCLKControl+0x3e>
			I2C2_CLK_EN();
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec0:	e02a      	b.n	8000f18 <I2C_PCLKControl+0x94>
		else if(pI2Cx == I2C3)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <I2C_PCLKControl+0xac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d126      	bne.n	8000f18 <I2C_PCLKControl+0x94>
			I2C3_CLK_EN();
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed6:	e01f      	b.n	8000f18 <I2C_PCLKControl+0x94>
		if(pI2Cx == I2C1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <I2C_PCLKControl+0xa0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <I2C_PCLKControl+0x6a>
		  I2C1_CLK_DI();
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eec:	e014      	b.n	8000f18 <I2C_PCLKControl+0x94>
		else if(pI2Cx == I2C2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <I2C_PCLKControl+0xa8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d106      	bne.n	8000f04 <I2C_PCLKControl+0x80>
		  I2C2_CLK_DI();
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000efc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f02:	e009      	b.n	8000f18 <I2C_PCLKControl+0x94>
		else if(pI2Cx == I2C3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <I2C_PCLKControl+0xac>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d105      	bne.n	8000f18 <I2C_PCLKControl+0x94>
		  I2C3_CLK_DI();
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <I2C_PCLKControl+0xa4>)
 8000f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40005400 	.word	0x40005400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40005800 	.word	0x40005800
 8000f30:	40005c00 	.word	0x40005c00

08000f34 <I2C_Init>:
 * @param[in] -  I2C Handle structure
 * @return    -   none
 * @Note      -   none
 */
void  I2C_Init(I2C_handle_t *pI2CHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint32_t tempreg;
	//1.Peripheral Clock Enable
	I2C_PCLKControl(pI2CHandle->pI2Cx,ENABLE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff9e 	bl	8000e84 <I2C_PCLKControl>

	//2.Configure FREQ Bits in I2C_CR2 Register
	tempreg = ((RCC_GetPCLKValue())/1000000);
 8000f48:	f7ff ff54 	bl	8000df4 <RCC_GetPCLKValue>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <I2C_Init+0x118>)
 8000f50:	fba3 2302 	umull	r2, r3, r3, r2
 8000f54:	0c9b      	lsrs	r3, r3, #18
 8000f56:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->I2C_CR2 |=(tempreg<<0);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	605a      	str	r2, [r3, #4]

	//3.Configure own address for device in slave mode

	tempreg=((pI2CHandle->I2C_Config.I2C_DEVICEAddress)<<1);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7a1b      	ldrb	r3, [r3, #8]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 |=tempreg;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6899      	ldr	r1, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	609a      	str	r2, [r3, #8]
	//NOTE: Should always be kept at 1 by software.
	pI2CHandle->pI2Cx->I2C_OAR1 |=1<<14;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f8e:	609a      	str	r2, [r3, #8]

	//4.Configure CCR Bits in I2C_CCR register
	uint16_t ccr_value=0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	817b      	strh	r3, [r7, #10]
	tempreg=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=I2C_SCL_SPEED_SM )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <I2C_Init+0x11c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d80d      	bhi.n	8000fbe <I2C_Init+0x8a>
	{
         //Mode Standard Mode
		ccr_value = ((RCC_GetPCLKValue())/(2*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000fa2:	f7ff ff27 	bl	8000df4 <RCC_GetPCLKValue>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	817b      	strh	r3, [r7, #10]

		tempreg =(ccr_value & 0xfff);
 8000fb4:	897b      	ldrh	r3, [r7, #10]
 8000fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e01b      	b.n	8000ff6 <I2C_Init+0xc2>
	}else
	{
		//Mode Fast Mode
		tempreg |=(1<<15);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc4:	60fb      	str	r3, [r7, #12]

		tempreg |=((pI2CHandle->I2C_Config.I2C_FMDutyCycle )<<14);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7a9b      	ldrb	r3, [r3, #10]
 8000fca:	039b      	lsls	r3, r3, #14
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
		{
			ccr_value = ((RCC_GetPCLKValue())/(3*pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		else
		{
			ccr_value = ((RCC_GetPCLKValue())/(25*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000fd4:	f7ff ff0e 	bl	8000df4 <RCC_GetPCLKValue>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009a      	lsls	r2, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fec:	817b      	strh	r3, [r7, #10]
			tempreg |=ccr_value;
 8000fee:	897b      	ldrh	r3, [r7, #10]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
		}

	}

	pI2CHandle->pI2Cx->I2C_CCR=tempreg;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	61da      	str	r2, [r3, #28]

	//5. Configure Trise bit in I2C_TRISE Register

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <=I2C_SCL_SPEED_SM )
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <I2C_Init+0x11c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d809      	bhi.n	800101c <I2C_Init+0xe8>
	{

		tempreg =(RCC_GetPCLKValue()/1000000u)+1;
 8001008:	f7ff fef4 	bl	8000df4 <RCC_GetPCLKValue>
 800100c:	4602      	mov	r2, r0
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <I2C_Init+0x118>)
 8001010:	fba3 2302 	umull	r2, r3, r3, r2
 8001014:	0c9b      	lsrs	r3, r3, #18
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00d      	b.n	8001038 <I2C_Init+0x104>

	}
	else
	{

		tempreg = ((RCC_GetPCLKValue()*300)/1000000000u)+1;
 800101c:	f7ff feea 	bl	8000df4 <RCC_GetPCLKValue>
 8001020:	4602      	mov	r2, r0
 8001022:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001026:	fb03 f302 	mul.w	r3, r3, r2
 800102a:	0a5b      	lsrs	r3, r3, #9
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <I2C_Init+0x120>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	09db      	lsrs	r3, r3, #7
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->I2C_TRISE =(tempreg & 0x3F);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001042:	621a      	str	r2, [r3, #32]


}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	431bde83 	.word	0x431bde83
 8001050:	000186a0 	.word	0x000186a0
 8001054:	00044b83 	.word	0x00044b83

08001058 <I2C_MasterSendData>:
 * @param[in] -  Base address of I2C peripheral,address of transmit buffer ,length of data ,address of slave,repeat start condition
 * @return    -   none
 * @Note      -   none
 */
 void  I2C_MasterSendData(I2C_Reg_Def_t *pI2Cx,uint8_t *pTxBuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	70fb      	strb	r3, [r7, #3]
	//1.Generate start condition

	I2C_GenerateStartCondition(pI2Cx);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff fea4 	bl	8000db4 <I2C_GenerateStartCondition>

	//2.confirm that start generation is complete by checking the SB flag in the 2C_SR1 Register
   // Note : unitil  SR bit is cleared the SCL will be streched (Pull to Low)

	while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_SB)));
 800106c:	bf00      	nop
 800106e:	2101      	movs	r1, #1
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f844 	bl	80010fe <I2C_GetFlagStatus>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f8      	beq.n	800106e <I2C_MasterSendData+0x16>


	//3. Send slave address followed by R/W bit =0

	I2C_ExecuteAddrPhase(pI2Cx,SlaveAddr);
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fe6b 	bl	8000d5c <I2C_ExecuteAddrPhase>

	//4.Check address phase is completed by checking ADDR =1

	while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_ADDR)));
 8001086:	bf00      	nop
 8001088:	2102      	movs	r1, #2
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f837 	bl	80010fe <I2C_GetFlagStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f8      	beq.n	8001088 <I2C_MasterSendData+0x30>

	//5. Clear Flag by reading sr1,sr2 registers

	I2C_ClearADDRFlag(pI2Cx);
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fe50 	bl	8000d3c <I2C_ClearADDRFlag>

    //6.Send data until length becomes zero

	while(Len>0)
 800109c:	e012      	b.n	80010c4 <I2C_MasterSendData+0x6c>
	{
	while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_TXE)));
 800109e:	bf00      	nop
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f82b 	bl	80010fe <I2C_GetFlagStatus>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f8      	beq.n	80010a0 <I2C_MasterSendData+0x48>
	pI2Cx->I2C_DR = *pTxBuffer;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	611a      	str	r2, [r3, #16]
	pTxBuffer++;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
	Len --;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
	while(Len>0)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e9      	bne.n	800109e <I2C_MasterSendData+0x46>

	}

	//7.When length becomes zero ,wait for TXE=1,BTF=1 before generating stop condition

	while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_TXE)));//Checking TXE is empty
 80010ca:	bf00      	nop
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f815 	bl	80010fe <I2C_GetFlagStatus>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f8      	beq.n	80010cc <I2C_MasterSendData+0x74>
	while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_BTF)));//Checking BTF is Set
 80010da:	bf00      	nop
 80010dc:	2104      	movs	r1, #4
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f80d 	bl	80010fe <I2C_GetFlagStatus>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f8      	beq.n	80010dc <I2C_MasterSendData+0x84>

	//8.Stop condition is generated ,after that automaticaally BTF will be cleared
    // NOTE: STOP Condition is created only when Sr == 0
	if(Sr == 0)
 80010ea:	7e3b      	ldrb	r3, [r7, #24]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <I2C_MasterSendData+0x9e>
	{
	I2C_GenerateStopCondition(pI2Cx);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fe6f 	bl	8000dd4 <I2C_GenerateStopCondition>





}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <I2C_GetFlagStatus>:
  * @param[in] -  Base address of I2C peripheral
  * @return    -   Flag status
  * @Note      -   none
  */
 uint8_t I2C_GetFlagStatus(I2C_Reg_Def_t *pI2Cx,uint8_t FlagName)
 {
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	70fb      	strb	r3, [r7, #3]
 	if(pI2Cx->I2C_SR1 &FlagName)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <I2C_GetFlagStatus+0x1c>
 	{
 		return FLAG_SET;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <I2C_GetFlagStatus+0x1e>
 	}

 	return FLAG_RESET;
 800111a:	2300      	movs	r3, #0

 }
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <I2C_RecieveData>:
  * @param[in] -  Base address of gpio peripheral
  * @return    -   none
  * @Note      -   none
  */
void  I2C_RecieveData(I2C_handle_t *pI2CHandle,uint8_t *pTxBuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fe3a 	bl	8000db4 <I2C_GenerateStartCondition>
	//2.confirm that start generation is complete by checking the SB flag in the 2C_SR1 Register
	// Note : unitil  SR bit is cleared the SCL will be streched (Pull to Low)
    while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)));//Here checking for status clears the SR register
 8001140:	bf00      	nop
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffd8 	bl	80010fe <I2C_GetFlagStatus>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f6      	beq.n	8001142 <I2C_RecieveData+0x1a>
		//3. Send slave address followed by R/W bit =0

    I2C_ExecuteAddrPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe13 	bl	8000d88 <I2C_ExecuteAddrPhaseWrite>
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)));
 8001162:	bf00      	nop
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffc7 	bl	80010fe <I2C_GetFlagStatus>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f6      	beq.n	8001164 <I2C_RecieveData+0x3c>
		if (Len == 1)//ONLY FOR 1BYTE DATA RECEPTION
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d124      	bne.n	80011c6 <I2C_RecieveData+0x9e>
				{
		         	I2C_Peripheral_ACK_Control(pI2CHandle->pI2Cx,DISABLE);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fdbe 	bl	8000d04 <I2C_Peripheral_ACK_Control>

		         	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdd5 	bl	8000d3c <I2C_ClearADDRFlag>


		         	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8001192:	bf00      	nop
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffaf 	bl	80010fe <I2C_GetFlagStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f6      	beq.n	8001194 <I2C_RecieveData+0x6c>
		         	if(Sr == 0)
 80011a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <I2C_RecieveData+0x90>
		         		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe0e 	bl	8000dd4 <I2C_GenerateStopCondition>

		         	*pTxBuffer=(pI2CHandle->pI2Cx->I2C_DR) ;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	701a      	strb	r2, [r3, #0]

			        return;
 80011c4:	e03f      	b.n	8001246 <I2C_RecieveData+0x11e>

				}

		if(Len >1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d932      	bls.n	8001232 <I2C_RecieveData+0x10a>
		{
			I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fdb3 	bl	8000d3c <I2C_ClearADDRFlag>

			for(uint32_t i=Len ;i >0;i++)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e01e      	b.n	800121a <I2C_RecieveData+0xf2>
			{

				while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 80011dc:	bf00      	nop
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff8a 	bl	80010fe <I2C_GetFlagStatus>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f6      	beq.n	80011de <I2C_RecieveData+0xb6>


				if(i == 2)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d10e      	bne.n	8001214 <I2C_RecieveData+0xec>
				{
					I2C_Peripheral_ACK_Control(pI2CHandle->pI2Cx,DISABLE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd81 	bl	8000d04 <I2C_Peripheral_ACK_Control>
                     if(Sr == 1)
 8001202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d104      	bne.n	8001214 <I2C_RecieveData+0xec>
                    	 I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fde0 	bl	8000dd4 <I2C_GenerateStopCondition>
			for(uint32_t i=Len ;i >0;i++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1dd      	bne.n	80011dc <I2C_RecieveData+0xb4>

				}

			}

			*pTxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	701a      	strb	r2, [r3, #0]

			pTxBuffer++;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]


		}


		if(pI2CHandle->I2C_Config.I2C_ACKControl == ENABLE)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	7a5b      	ldrb	r3, [r3, #9]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <I2C_RecieveData+0x11e>
		{
			I2C_Peripheral_ACK_Control(pI2CHandle->pI2Cx,ENABLE);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fd5f 	bl	8000d04 <I2C_Peripheral_ACK_Control>
		}
}
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <GetCLKValue>:

#include "stm32f407xx_rcc.h"


uint32_t GetCLKValue(uint8_t clock)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	uint32_t AHBclk,pclk,SystemClk,APB_PreScalar,AHB_PreScaler;
	uint32_t System_clock_switch_status =( RCC->RCC_CFGR>>2) &0X3;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <GetCLKValue+0xa8>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
	if(System_clock_switch_status == 0)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <GetCLKValue+0x22>
	{
		//NOTE : Internal RC oscillator in STM32F407G is 16MHZ
		SystemClk = 16000000ul;
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <GetCLKValue+0xac>)
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e004      	b.n	8001278 <GetCLKValue+0x2c>
	}else if(System_clock_switch_status == 0)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <GetCLKValue+0x2c>
	{ //NOTE : External Crystal on  STM32F407G  Board is 8MHZ
		SystemClk = 8000000ul;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <GetCLKValue+0xb0>)
 8001276:	617b      	str	r3, [r7, #20]
	}else if(System_clock_switch_status == 0)
	{
		 //PLL WILL BE IMPLEMENTED LATER
	}
	AHB_PreScaler =(( RCC->RCC_CFGR>>4)&0XF);
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <GetCLKValue+0xa8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	60bb      	str	r3, [r7, #8]
	if(AHB_PreScaler <8)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b07      	cmp	r3, #7
 8001288:	d802      	bhi.n	8001290 <GetCLKValue+0x44>
	{
		 AHBclk = SystemClk/1;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e004      	b.n	800129a <GetCLKValue+0x4e>
	}else
	{
		AHBclk =SystemClk/AHB_PreScaler;
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]
	}
	if(clock == processor_clock)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d101      	bne.n	80012a4 <GetCLKValue+0x58>
	{
		return AHBclk;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	e021      	b.n	80012e8 <GetCLKValue+0x9c>
	}
	APB_PreScalar = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
	if(clock == APB1_CLK)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d108      	bne.n	80012c0 <GetCLKValue+0x74>
	{
		APB_PreScalar |=((RCC->RCC_CFGR>>10)&0X7);
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <GetCLKValue+0xa8>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	0a9b      	lsrs	r3, r3, #10
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e007      	b.n	80012d0 <GetCLKValue+0x84>
	}
	else
	{
		APB_PreScalar |=((RCC->RCC_CFGR>>13)&0X7);
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <GetCLKValue+0xa8>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	0b5b      	lsrs	r3, r3, #13
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
	}

	if(APB_PreScalar < 4)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d802      	bhi.n	80012dc <GetCLKValue+0x90>
	{
		pclk= AHBclk /1;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e004      	b.n	80012e6 <GetCLKValue+0x9a>
	}else
	{
		pclk= AHBclk /APB_PreScalar;
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	61bb      	str	r3, [r7, #24]
	}



	return pclk;
 80012e6:	69bb      	ldr	r3, [r7, #24]

}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40023800 	.word	0x40023800
 80012f8:	00f42400 	.word	0x00f42400
 80012fc:	007a1200 	.word	0x007a1200

08001300 <delay>:


I2C_handle_t I2C_1;

void delay(uint32_t time)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	int y=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<=time;i++)
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e005      	b.n	800131e <delay+0x1e>
	{
		y++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<=time;i++)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3301      	adds	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d2f5      	bcs.n	8001312 <delay+0x12>
	}
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <I2C1_Gpio_int>:

/*
 * I2C Pin initialization
 */
void I2C1_Gpio_int(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0


    GPIO_Handle_t I2C_GPIO ;

    I2C_GPIO.pGPIOx=GPIOB;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <I2C1_Gpio_int+0x40>)
 800133c:	607b      	str	r3, [r7, #4]

    I2C_GPIO.GPIO_PinConfig.GPIO_PinMode          =     GPIO_MODE_ALTFN;
 800133e:	2302      	movs	r3, #2
 8001340:	727b      	strb	r3, [r7, #9]

    I2C_GPIO.GPIO_PinConfig.GPIO_PinOPType        =     GPIO_OP_TYPE_OD;
 8001342:	2301      	movs	r3, #1
 8001344:	733b      	strb	r3, [r7, #12]

    I2C_GPIO.GPIO_PinConfig.GPIO_PinSpeed         =     GPIO_SPEED_FAST;
 8001346:	2302      	movs	r3, #2
 8001348:	72bb      	strb	r3, [r7, #10]

    I2C_GPIO.GPIO_PinConfig.GPIO_pinAltFunMode    =     ALTFN_04;
 800134a:	2304      	movs	r3, #4
 800134c:	737b      	strb	r3, [r7, #13]

    I2C_GPIO.GPIO_PinConfig.GPIO_PinPuPdControl   =     GPIO_NO_PUPD;
 800134e:	2300      	movs	r3, #0
 8001350:	72fb      	strb	r3, [r7, #11]

    I2C_GPIO.GPIO_PinConfig.GPIO_PinNumber        =     GPIO_PIN_NO6;
 8001352:	2306      	movs	r3, #6
 8001354:	723b      	strb	r3, [r7, #8]

    GPIO_Init(&I2C_GPIO); //Initializing SCL;
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fabb 	bl	80008d4 <GPIO_Init>

    I2C_GPIO.GPIO_PinConfig.GPIO_PinNumber        =     GPIO_PIN_NO9;
 800135e:	2309      	movs	r3, #9
 8001360:	723b      	strb	r3, [r7, #8]

    GPIO_Init(&I2C_GPIO); //Initializing SDA;
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fab5 	bl	80008d4 <GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020400 	.word	0x40020400

08001378 <I2C1_init>:
/*
 * I2C Peripheral Initialization
 */
void I2C1_init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0



	 I2C_1.pI2Cx=I2C1;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <I2C1_init+0x2c>)
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <I2C1_init+0x30>)
 8001380:	601a      	str	r2, [r3, #0]

	 I2C_1.I2C_Config.I2C_ACKControl=I2C_ACK_ENABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <I2C1_init+0x2c>)
 8001384:	2201      	movs	r2, #1
 8001386:	725a      	strb	r2, [r3, #9]

	 I2C_1.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <I2C1_init+0x2c>)
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <I2C1_init+0x34>)
 800138c:	605a      	str	r2, [r3, #4]

	 I2C_1.I2C_Config.I2C_DEVICEAddress=MY_ADDR;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <I2C1_init+0x2c>)
 8001390:	2261      	movs	r2, #97	; 0x61
 8001392:	721a      	strb	r2, [r3, #8]

	 I2C_1.I2C_Config.I2C_FMDutyCycle  =I2C_FM_DUTY2;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <I2C1_init+0x2c>)
 8001396:	2200      	movs	r2, #0
 8001398:	729a      	strb	r2, [r3, #10]

	 I2C_Init(&I2C_1);
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <I2C1_init+0x2c>)
 800139c:	f7ff fdca 	bl	8000f34 <I2C_Init>



}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000050 	.word	0x20000050
 80013a8:	40005400 	.word	0x40005400
 80013ac:	000186a0 	.word	0x000186a0

080013b0 <switch_config>:
/*
 * Switch initialization
 */
void switch_config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0


	GPIO_Handle_t switch1;

	switch1.pGPIOx = GPIOA;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <switch_config+0x30>)
 80013b8:	607b      	str	r3, [r7, #4]

	switch1.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 80013ba:	2300      	movs	r3, #0
 80013bc:	727b      	strb	r3, [r7, #9]



	switch1.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PD;
 80013be:	2302      	movs	r3, #2
 80013c0:	72fb      	strb	r3, [r7, #11]
	switch1.GPIO_PinConfig.GPIO_PinOPType =GPIO_OP_TYPE_PP;
 80013c2:	2300      	movs	r3, #0
 80013c4:	733b      	strb	r3, [r7, #12]


	switch1.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST ;
 80013c6:	2302      	movs	r3, #2
 80013c8:	72bb      	strb	r3, [r7, #10]
    switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&switch1);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fa7f 	bl	80008d4 <GPIO_Init>


}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020000 	.word	0x40020000

080013e4 <mode_interrupt>:
/*
 * Interrupt pin configuration
 * @Note : Pin  is used to enter  menu mode
 */
void mode_interrupt(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0

	GPIO_Handle_t switch1;

	switch1.pGPIOx = GPIOA;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <mode_interrupt+0x30>)
 80013ec:	607b      	str	r3, [r7, #4]

	switch1.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IT_FT;
 80013ee:	2304      	movs	r3, #4
 80013f0:	727b      	strb	r3, [r7, #9]

	switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	723b      	strb	r3, [r7, #8]

	switch1.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 80013f6:	2301      	movs	r3, #1
 80013f8:	72fb      	strb	r3, [r7, #11]
	switch1.GPIO_PinConfig.GPIO_PinOPType =GPIO_OP_TYPE_PP;
 80013fa:	2300      	movs	r3, #0
 80013fc:	733b      	strb	r3, [r7, #12]

	switch1.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST ;
 80013fe:	2302      	movs	r3, #2
 8001400:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&switch1);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fa65 	bl	80008d4 <GPIO_Init>


}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020000 	.word	0x40020000

08001418 <main>:
int main()
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
   uint8_t display_data[] = "REAL TIME CLOCK";
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <main+0xe4>)
 8001420:	463c      	mov	r4, r7
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   keypad_config();
 8001428:	f002 fdca 	bl	8003fc0 <keypad_config>

   switch_config();
 800142c:	f7ff ffc0 	bl	80013b0 <switch_config>

   I2C1_Gpio_int();
 8001430:	f7ff ff80 	bl	8001334 <I2C1_Gpio_int>

   mode_interrupt();
 8001434:	f7ff ffd6 	bl	80013e4 <mode_interrupt>

   I2C1_init();
 8001438:	f7ff ff9e 	bl	8001378 <I2C1_init>

   GPIO_IRQConfig(IRQ_NO_EXTI1 ,IRQ_PRIORITY_00,ENABLE);
 800143c:	2201      	movs	r2, #1
 800143e:	2100      	movs	r1, #0
 8001440:	2007      	movs	r0, #7
 8001442:	f7ff fbd7 	bl	8000bf4 <GPIO_IRQConfig>

    I2C_PeripheralControl(I2C_1.pI2Cx,ENABLE);
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <main+0xe8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fc3d 	bl	8000ccc <I2C_PeripheralControl>

	I2C_Peripheral_ACK_Control(I2C_1.pI2Cx,ENABLE);
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <main+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2101      	movs	r1, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc53 	bl	8000d04 <I2C_Peripheral_ACK_Control>

	I2C_lcd_int(I2C_1.pI2Cx);
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <main+0xe8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f984 	bl	8000770 <I2C_lcd_int>

	lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <main+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	2101      	movs	r1, #1
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff f947 	bl	8000704 <lcd_set_cursor>

	for(int i=0;i<9;i++)
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e00c      	b.n	8001496 <main+0x7e>
		Lcd_Send_Data(display_data[i],I2C_1.pI2Cx);
 800147c:	463a      	mov	r2, r7
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <main+0xe8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff f8ca 	bl	8000624 <Lcd_Send_Data>
	for(int i=0;i<9;i++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b08      	cmp	r3, #8
 800149a:	ddef      	ble.n	800147c <main+0x64>

	lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <main+0xe8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	2101      	movs	r1, #1
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff f92d 	bl	8000704 <lcd_set_cursor>

	for(int i=9;i<strlen((char*)display_data);i++)
 80014aa:	2309      	movs	r3, #9
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	e00c      	b.n	80014ca <main+0xb2>
			Lcd_Send_Data(display_data[i],I2C_1.pI2Cx);
 80014b0:	463a      	mov	r2, r7
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4413      	add	r3, r2
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <main+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7ff f8b0 	bl	8000624 <Lcd_Send_Data>
	for(int i=9;i<strlen((char*)display_data);i++)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	463b      	mov	r3, r7
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fe8b 	bl	80001e8 <strlen>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d8ea      	bhi.n	80014b0 <main+0x98>

	delay(1000000);
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <main+0xec>)
 80014dc:	f7ff ff10 	bl	8001300 <delay>

     lcd_clear_display(I2C_1.pI2Cx);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <main+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f936 	bl	8000756 <lcd_clear_display>

     rtc_lcd_int();
 80014ea:	f000 fa61 	bl	80019b0 <rtc_lcd_int>


	 set_systick_timer(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 f80a 	bl	8001508 <set_systick_timer>

     while(1)
       {

	      menu_manager();
 80014f4:	f000 fc14 	bl	8001d20 <menu_manager>
 80014f8:	e7fc      	b.n	80014f4 <main+0xdc>
 80014fa:	bf00      	nop
 80014fc:	080041fc 	.word	0x080041fc
 8001500:	20000050 	.word	0x20000050
 8001504:	000f4240 	.word	0x000f4240

08001508 <set_systick_timer>:

        }

}
void set_systick_timer(uint32_t value)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

   uint32_t *sysctrl = (uint32_t *)0xE000E010;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <set_systick_timer+0x64>)
 8001512:	617b      	str	r3, [r7, #20]

   uint32_t *sysload = (uint32_t *)0xE000E014;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <set_systick_timer+0x68>)
 8001516:	613b      	str	r3, [r7, #16]

   uint32_t *sysval = (uint32_t *)0xE000E018;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <set_systick_timer+0x6c>)
 800151a:	60fb      	str	r3, [r7, #12]

   uint32_t load_value = (GetCLKValue(processor_clock)/value)-1;
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fe95 	bl	800124c <GetCLKValue>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]

   *sysload &= ~(0xFFFFFFFF); // clear
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

   *sysload |=load_value;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	431a      	orrs	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	601a      	str	r2, [r3, #0]

   *sysctrl  |=1<<SYSTICK_CLKSOURCE;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f043 0204 	orr.w	r2, r3, #4
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]

   *sysctrl  |=1<<SYSTICK_TICKINT;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]

   *sysctrl  |=1<<SYSTICK_ENABLE;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]





}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	e000e010 	.word	0xe000e010
 8001570:	e000e014 	.word	0xe000e014
 8001574:	e000e018 	.word	0xe000e018

08001578 <SysTick_Handler>:

void  SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0

			RTC_Time_t time;

			ds3231_get_time(&I2C_1,&time);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	48ae      	ldr	r0, [pc, #696]	; (8001840 <SysTick_Handler+0x2c8>)
 8001586:	f7fe fe84 	bl	8000292 <ds3231_get_time>

			// For every 1 second ,Seconds position in lcd display is updated .

			lcd_set_cursor(1,7,I2C_1.pI2Cx);
 800158a:	4bad      	ldr	r3, [pc, #692]	; (8001840 <SysTick_Handler+0x2c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	2107      	movs	r1, #7
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff f8b6 	bl	8000704 <lcd_set_cursor>

			Lcd_Send_Data((time.seconds/10)+48,I2C_1.pI2Cx);
 8001598:	7d3b      	ldrb	r3, [r7, #20]
 800159a:	4aaa      	ldr	r2, [pc, #680]	; (8001844 <SysTick_Handler+0x2cc>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3330      	adds	r3, #48	; 0x30
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4ba5      	ldr	r3, [pc, #660]	; (8001840 <SysTick_Handler+0x2c8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff f838 	bl	8000624 <Lcd_Send_Data>

			Lcd_Send_Data((time.seconds%10)+48,I2C_1.pI2Cx);
 80015b4:	7d3a      	ldrb	r2, [r7, #20]
 80015b6:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <SysTick_Handler+0x2cc>)
 80015b8:	fba3 1302 	umull	r1, r3, r3, r2
 80015bc:	08d9      	lsrs	r1, r3, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	3330      	adds	r3, #48	; 0x30
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b9c      	ldr	r3, [pc, #624]	; (8001840 <SysTick_Handler+0x2c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff f825 	bl	8000624 <Lcd_Send_Data>

			if(time.seconds == 00)
 80015da:	7d3b      	ldrb	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d125      	bne.n	800162c <SysTick_Handler+0xb4>
				{
						lcd_set_cursor(1,4,I2C1);
 80015e0:	4a99      	ldr	r2, [pc, #612]	; (8001848 <SysTick_Handler+0x2d0>)
 80015e2:	2104      	movs	r1, #4
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff f88d 	bl	8000704 <lcd_set_cursor>

						Lcd_Send_Data((time.minutes/10)+48,I2C_1.pI2Cx);
 80015ea:	7d7b      	ldrb	r3, [r7, #21]
 80015ec:	4a95      	ldr	r2, [pc, #596]	; (8001844 <SysTick_Handler+0x2cc>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3330      	adds	r3, #48	; 0x30
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b91      	ldr	r3, [pc, #580]	; (8001840 <SysTick_Handler+0x2c8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7ff f80f 	bl	8000624 <Lcd_Send_Data>

						Lcd_Send_Data((time.minutes%10)+48,I2C_1.pI2Cx);
 8001606:	7d7a      	ldrb	r2, [r7, #21]
 8001608:	4b8e      	ldr	r3, [pc, #568]	; (8001844 <SysTick_Handler+0x2cc>)
 800160a:	fba3 1302 	umull	r1, r3, r3, r2
 800160e:	08d9      	lsrs	r1, r3, #3
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3330      	adds	r3, #48	; 0x30
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <SysTick_Handler+0x2c8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7fe fffc 	bl	8000624 <Lcd_Send_Data>

				}
			// If seconds = 0 minutes position in lcd display is updated

			if(time.minutes == 00)
 800162c:	7d7b      	ldrb	r3, [r7, #21]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d14d      	bne.n	80016ce <SysTick_Handler+0x156>
				{
						lcd_set_cursor(1,0,I2C_1.pI2Cx);
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <SysTick_Handler+0x2c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff f862 	bl	8000704 <lcd_set_cursor>

						Lcd_Send_Data((time.hours/10)+48,I2C_1.pI2Cx);
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	4a80      	ldr	r2, [pc, #512]	; (8001844 <SysTick_Handler+0x2cc>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	3330      	adds	r3, #48	; 0x30
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <SysTick_Handler+0x2c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7fe ffe4 	bl	8000624 <Lcd_Send_Data>

						Lcd_Send_Data((time.hours%10)+48,I2C_1.pI2Cx);
 800165c:	7dba      	ldrb	r2, [r7, #22]
 800165e:	4b79      	ldr	r3, [pc, #484]	; (8001844 <SysTick_Handler+0x2cc>)
 8001660:	fba3 1302 	umull	r1, r3, r3, r2
 8001664:	08d9      	lsrs	r1, r3, #3
 8001666:	460b      	mov	r3, r1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3330      	adds	r3, #48	; 0x30
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <SysTick_Handler+0x2c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4610      	mov	r0, r2
 800167e:	f7fe ffd1 	bl	8000624 <Lcd_Send_Data>

						lcd_set_cursor(1,10,I2C_1.pI2Cx);
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <SysTick_Handler+0x2c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	210a      	movs	r1, #10
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff f83a 	bl	8000704 <lcd_set_cursor>
			// If minutes = 0 ,hour  position in lcd display is updated

			if(time.time_format == TIME_FORMAT_12HRS_AM)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <SysTick_Handler+0x138>
				{
						Lcd_Send_Data('A',I2C_1.pI2Cx);
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <SysTick_Handler+0x2c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	2041      	movs	r0, #65	; 0x41
 800169e:	f7fe ffc1 	bl	8000624 <Lcd_Send_Data>

						Lcd_Send_Data('M',I2C_1.pI2Cx);
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <SysTick_Handler+0x2c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	204d      	movs	r0, #77	; 0x4d
 80016aa:	f7fe ffbb 	bl	8000624 <Lcd_Send_Data>
 80016ae:	e00e      	b.n	80016ce <SysTick_Handler+0x156>


				}
			else if(time.time_format == TIME_FORMAT_12HRS_PM)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10b      	bne.n	80016ce <SysTick_Handler+0x156>
			    {

						Lcd_Send_Data('P',I2C_1.pI2Cx);
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <SysTick_Handler+0x2c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2050      	movs	r0, #80	; 0x50
 80016be:	f7fe ffb1 	bl	8000624 <Lcd_Send_Data>

						Lcd_Send_Data('M',I2C_1.pI2Cx);
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <SysTick_Handler+0x2c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	204d      	movs	r0, #77	; 0x4d
 80016ca:	f7fe ffab 	bl	8000624 <Lcd_Send_Data>

		        }

				}

				if(time.hours == 12)
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d17b      	bne.n	80017cc <SysTick_Handler+0x254>
				{

					RTC_Date_t date;

					ds3231_get_date(&I2C_1, &date);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4619      	mov	r1, r3
 80016da:	4859      	ldr	r0, [pc, #356]	; (8001840 <SysTick_Handler+0x2c8>)
 80016dc:	f7fe fe67 	bl	80003ae <ds3231_get_date>
					lcd_set_cursor(2,1,I2C_1.pI2Cx);
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <SysTick_Handler+0x2c8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2101      	movs	r1, #1
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7ff f80b 	bl	8000704 <lcd_set_cursor>

					Lcd_Send_Data((date.date/10)+48,I2C_1.pI2Cx);
 80016ee:	7c3b      	ldrb	r3, [r7, #16]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <SysTick_Handler+0x2cc>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3330      	adds	r3, #48	; 0x30
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b50      	ldr	r3, [pc, #320]	; (8001840 <SysTick_Handler+0x2c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7fe ff8d 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data((date.date%10)+48,I2C_1.pI2Cx);
 800170a:	7c3a      	ldrb	r2, [r7, #16]
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <SysTick_Handler+0x2cc>)
 800170e:	fba3 1302 	umull	r1, r3, r3, r2
 8001712:	08d9      	lsrs	r1, r3, #3
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3330      	adds	r3, #48	; 0x30
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <SysTick_Handler+0x2c8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7fe ff7a 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data('/',I2C_1.pI2Cx);
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <SysTick_Handler+0x2c8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	202f      	movs	r0, #47	; 0x2f
 8001738:	f7fe ff74 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data((date.month/10)+48,I2C_1.pI2Cx);
 800173c:	7c7b      	ldrb	r3, [r7, #17]
 800173e:	4a41      	ldr	r2, [pc, #260]	; (8001844 <SysTick_Handler+0x2cc>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3330      	adds	r3, #48	; 0x30
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <SysTick_Handler+0x2c8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7fe ff66 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data((date.month%10)+48,I2C_1.pI2Cx);
 8001758:	7c7a      	ldrb	r2, [r7, #17]
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <SysTick_Handler+0x2cc>)
 800175c:	fba3 1302 	umull	r1, r3, r3, r2
 8001760:	08d9      	lsrs	r1, r3, #3
 8001762:	460b      	mov	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3330      	adds	r3, #48	; 0x30
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <SysTick_Handler+0x2c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f7fe ff53 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data('/',I2C_1.pI2Cx);
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <SysTick_Handler+0x2c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	202f      	movs	r0, #47	; 0x2f
 8001786:	f7fe ff4d 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data((date.year/10)+48,I2C_1.pI2Cx);
 800178a:	7cbb      	ldrb	r3, [r7, #18]
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <SysTick_Handler+0x2cc>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3330      	adds	r3, #48	; 0x30
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <SysTick_Handler+0x2c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7fe ff3f 	bl	8000624 <Lcd_Send_Data>

					Lcd_Send_Data((date.year%10)+48,I2C_1.pI2Cx);
 80017a6:	7cba      	ldrb	r2, [r7, #18]
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <SysTick_Handler+0x2cc>)
 80017aa:	fba3 1302 	umull	r1, r3, r3, r2
 80017ae:	08d9      	lsrs	r1, r3, #3
 80017b0:	460b      	mov	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3330      	adds	r3, #48	; 0x30
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <SysTick_Handler+0x2c8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7fe ff2c 	bl	8000624 <Lcd_Send_Data>


				}


		if(time.hours == alarm1.hours && time.minutes == alarm1.minutes && time.seconds == alarm1.seconds && time.time_format == alarm1.time_format && alarm1_state)
 80017cc:	7dba      	ldrb	r2, [r7, #22]
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <SysTick_Handler+0x2d4>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d172      	bne.n	80018bc <SysTick_Handler+0x344>
 80017d6:	7d7a      	ldrb	r2, [r7, #21]
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <SysTick_Handler+0x2d4>)
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d16d      	bne.n	80018bc <SysTick_Handler+0x344>
 80017e0:	7d3a      	ldrb	r2, [r7, #20]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <SysTick_Handler+0x2d4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d168      	bne.n	80018bc <SysTick_Handler+0x344>
 80017ea:	7dfa      	ldrb	r2, [r7, #23]
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <SysTick_Handler+0x2d4>)
 80017ee:	78db      	ldrb	r3, [r3, #3]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d163      	bne.n	80018bc <SysTick_Handler+0x344>
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <SysTick_Handler+0x2d8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05f      	beq.n	80018bc <SysTick_Handler+0x344>
		{
			uint32_t *sysctrl = (uint32_t *)0xE000E010;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <SysTick_Handler+0x2dc>)
 80017fe:	61fb      	str	r3, [r7, #28]

			 *sysctrl  &=~(1<<SYSTICK_ENABLE);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0201 	bic.w	r2, r3, #1
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	601a      	str	r2, [r3, #0]

			lcd_clear_display(I2C_1.pI2Cx);
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <SysTick_Handler+0x2c8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ffa0 	bl	8000756 <lcd_clear_display>

			lcd_set_cursor(1, 4, I2C_1.pI2Cx);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <SysTick_Handler+0x2c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	2104      	movs	r1, #4
 800181e:	2001      	movs	r0, #1
 8001820:	f7fe ff70 	bl	8000704 <lcd_set_cursor>

			char display[]={'A','L','A','R','M','-','1'};
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <SysTick_Handler+0x2e0>)
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	3304      	adds	r3, #4
 8001832:	8019      	strh	r1, [r3, #0]
 8001834:	3302      	adds	r3, #2
 8001836:	0c0a      	lsrs	r2, r1, #16
 8001838:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<7;i++)
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e01b      	b.n	8001878 <SysTick_Handler+0x300>
 8001840:	20000050 	.word	0x20000050
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	40005400 	.word	0x40005400
 800184c:	20000060 	.word	0x20000060
 8001850:	20000000 	.word	0x20000000
 8001854:	e000e010 	.word	0xe000e010
 8001858:	0800420c 	.word	0x0800420c
			{
			Lcd_Send_Data(display[i],I2C_1.pI2Cx);
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	4413      	add	r3, r2
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <SysTick_Handler+0x41c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f7fe fed9 	bl	8000624 <Lcd_Send_Data>
			for(int i=0;i<7;i++)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	2b06      	cmp	r3, #6
 800187c:	ddee      	ble.n	800185c <SysTick_Handler+0x2e4>
			}
			while(alarm1_state)
 800187e:	e00c      	b.n	800189a <SysTick_Handler+0x322>
			{
				alarm1_state =!(GPIO_Read_InputPin(GPIOA,GPIO_PIN_NO0));
 8001880:	2100      	movs	r1, #0
 8001882:	4845      	ldr	r0, [pc, #276]	; (8001998 <SysTick_Handler+0x420>)
 8001884:	f7ff f978 	bl	8000b78 <GPIO_Read_InputPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <SysTick_Handler+0x424>)
 8001898:	701a      	strb	r2, [r3, #0]
			while(alarm1_state)
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <SysTick_Handler+0x424>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <SysTick_Handler+0x308>
			}
			lcd_clear_display(I2C_1.pI2Cx);
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <SysTick_Handler+0x41c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe ff55 	bl	8000756 <lcd_clear_display>

			rtc_lcd_int();
 80018ac:	f000 f880 	bl	80019b0 <rtc_lcd_int>

			*sysctrl  |=1<<SYSTICK_ENABLE;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	601a      	str	r2, [r3, #0]
		}

		if(time.hours == alarm2.hours && time.minutes == alarm2.minutes && time.seconds == alarm2.seconds && time.time_format == alarm2.time_format && alarm2_state)
 80018bc:	7dba      	ldrb	r2, [r7, #22]
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <SysTick_Handler+0x428>)
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d162      	bne.n	800198c <SysTick_Handler+0x414>
 80018c6:	7d7a      	ldrb	r2, [r7, #21]
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <SysTick_Handler+0x428>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d15d      	bne.n	800198c <SysTick_Handler+0x414>
 80018d0:	7d3a      	ldrb	r2, [r7, #20]
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <SysTick_Handler+0x428>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d158      	bne.n	800198c <SysTick_Handler+0x414>
 80018da:	7dfa      	ldrb	r2, [r7, #23]
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <SysTick_Handler+0x428>)
 80018de:	78db      	ldrb	r3, [r3, #3]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d153      	bne.n	800198c <SysTick_Handler+0x414>
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <SysTick_Handler+0x42c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d04f      	beq.n	800198c <SysTick_Handler+0x414>
			{
				uint32_t *sysctrl = (uint32_t *)0xE000E010;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <SysTick_Handler+0x430>)
 80018ee:	61bb      	str	r3, [r7, #24]

				*sysctrl  &=~(1<<SYSTICK_ENABLE);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 0201 	bic.w	r2, r3, #1
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

				lcd_clear_display(I2C_1.pI2Cx);
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SysTick_Handler+0x41c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe ff28 	bl	8000756 <lcd_clear_display>

				lcd_set_cursor(1, 4, I2C_1.pI2Cx);
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <SysTick_Handler+0x41c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	2104      	movs	r1, #4
 800190e:	2001      	movs	r0, #1
 8001910:	f7fe fef8 	bl	8000704 <lcd_set_cursor>

				char display[]={'A','L','A','R','M','-','2'};
 8001914:	4a25      	ldr	r2, [pc, #148]	; (80019ac <SysTick_Handler+0x434>)
 8001916:	463b      	mov	r3, r7
 8001918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191c:	6018      	str	r0, [r3, #0]
 800191e:	3304      	adds	r3, #4
 8001920:	8019      	strh	r1, [r3, #0]
 8001922:	3302      	adds	r3, #2
 8001924:	0c0a      	lsrs	r2, r1, #16
 8001926:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<7;i++)
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	e00c      	b.n	8001948 <SysTick_Handler+0x3d0>
				{
				Lcd_Send_Data(display[i],I2C_1.pI2Cx);
 800192e:	463a      	mov	r2, r7
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	4413      	add	r3, r2
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <SysTick_Handler+0x41c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7fe fe71 	bl	8000624 <Lcd_Send_Data>
				for(int i=0;i<7;i++)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	3301      	adds	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2b06      	cmp	r3, #6
 800194c:	ddef      	ble.n	800192e <SysTick_Handler+0x3b6>
				}
				while(alarm2_state)
 800194e:	e00c      	b.n	800196a <SysTick_Handler+0x3f2>
				{
					alarm2_state =!(GPIO_Read_InputPin(GPIOA,GPIO_PIN_NO0));
 8001950:	2100      	movs	r1, #0
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <SysTick_Handler+0x420>)
 8001954:	f7ff f910 	bl	8000b78 <GPIO_Read_InputPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SysTick_Handler+0x42c>)
 8001968:	701a      	strb	r2, [r3, #0]
				while(alarm2_state)
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <SysTick_Handler+0x42c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <SysTick_Handler+0x3d8>
				}
				lcd_clear_display(I2C_1.pI2Cx);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <SysTick_Handler+0x41c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe feed 	bl	8000756 <lcd_clear_display>
				rtc_lcd_int();
 800197c:	f000 f818 	bl	80019b0 <rtc_lcd_int>
				 *sysctrl  |=1<<SYSTICK_ENABLE;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	601a      	str	r2, [r3, #0]
			}
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000050 	.word	0x20000050
 8001998:	40020000 	.word	0x40020000
 800199c:	20000000 	.word	0x20000000
 80019a0:	2000005c 	.word	0x2000005c
 80019a4:	20000001 	.word	0x20000001
 80019a8:	e000e010 	.word	0xe000e010
 80019ac:	08004214 	.word	0x08004214

080019b0 <rtc_lcd_int>:

void rtc_lcd_int(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	RTC_Time_t time;

	ds3231_get_time(&I2C_1,&time);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	488b      	ldr	r0, [pc, #556]	; (8001be8 <rtc_lcd_int+0x238>)
 80019bc:	f7fe fc69 	bl	8000292 <ds3231_get_time>

	//Displaying hour
	Lcd_Send_Data((time.hours/10)+48,I2C_1.pI2Cx);
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	4a8a      	ldr	r2, [pc, #552]	; (8001bec <rtc_lcd_int+0x23c>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3330      	adds	r3, #48	; 0x30
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <rtc_lcd_int+0x238>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7fe fe24 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data((time.hours%10)+48,I2C_1.pI2Cx);
 80019dc:	79ba      	ldrb	r2, [r7, #6]
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <rtc_lcd_int+0x23c>)
 80019e0:	fba3 1302 	umull	r1, r3, r3, r2
 80019e4:	08d9      	lsrs	r1, r3, #3
 80019e6:	460b      	mov	r3, r1
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3330      	adds	r3, #48	; 0x30
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <rtc_lcd_int+0x238>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7fe fe11 	bl	8000624 <Lcd_Send_Data>

    //Displaying minutes
	Lcd_Send_Data(':',I2C_1.pI2Cx);
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	203a      	movs	r0, #58	; 0x3a
 8001a0a:	f7fe fe0b 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data((time.minutes/10)+48,I2C_1.pI2Cx);
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	4a76      	ldr	r2, [pc, #472]	; (8001bec <rtc_lcd_int+0x23c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3330      	adds	r3, #48	; 0x30
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f7fe fdfd 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data((time.minutes%10)+48,I2C_1.pI2Cx);
 8001a2a:	797a      	ldrb	r2, [r7, #5]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <rtc_lcd_int+0x23c>)
 8001a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a32:	08d9      	lsrs	r1, r3, #3
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3330      	adds	r3, #48	; 0x30
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7fe fdea 	bl	8000624 <Lcd_Send_Data>

	//Displaying seconds
	Lcd_Send_Data(':',I2C_1.pI2Cx);
 8001a50:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	203a      	movs	r0, #58	; 0x3a
 8001a58:	f7fe fde4 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data((time.seconds/10)+48,I2C_1.pI2Cx);
 8001a5c:	793b      	ldrb	r3, [r7, #4]
 8001a5e:	4a63      	ldr	r2, [pc, #396]	; (8001bec <rtc_lcd_int+0x23c>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3330      	adds	r3, #48	; 0x30
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f7fe fdd6 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data((time.seconds%10)+48,I2C_1.pI2Cx);
 8001a78:	793a      	ldrb	r2, [r7, #4]
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <rtc_lcd_int+0x23c>)
 8001a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a80:	08d9      	lsrs	r1, r3, #3
 8001a82:	460b      	mov	r3, r1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3330      	adds	r3, #48	; 0x30
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <rtc_lcd_int+0x238>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7fe fdc3 	bl	8000624 <Lcd_Send_Data>

	Lcd_Send_Data(' ',I2C_1.pI2Cx);
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <rtc_lcd_int+0x238>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2020      	movs	r0, #32
 8001aa6:	f7fe fdbd 	bl	8000624 <Lcd_Send_Data>

	if(time.time_format == TIME_FORMAT_12HRS_AM)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <rtc_lcd_int+0x11a>
	  {

		Lcd_Send_Data('A',I2C_1.pI2Cx);
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <rtc_lcd_int+0x238>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2041      	movs	r0, #65	; 0x41
 8001ab8:	f7fe fdb4 	bl	8000624 <Lcd_Send_Data>

		Lcd_Send_Data('M',I2C_1.pI2Cx);
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <rtc_lcd_int+0x238>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	204d      	movs	r0, #77	; 0x4d
 8001ac4:	f7fe fdae 	bl	8000624 <Lcd_Send_Data>
 8001ac8:	e00e      	b.n	8001ae8 <rtc_lcd_int+0x138>


	  }
	else if(time.time_format == TIME_FORMAT_12HRS_PM)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10b      	bne.n	8001ae8 <rtc_lcd_int+0x138>
	 {

	  	Lcd_Send_Data('P',I2C_1.pI2Cx);
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <rtc_lcd_int+0x238>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2050      	movs	r0, #80	; 0x50
 8001ad8:	f7fe fda4 	bl	8000624 <Lcd_Send_Data>

	    Lcd_Send_Data('M',I2C_1.pI2Cx);
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <rtc_lcd_int+0x238>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	204d      	movs	r0, #77	; 0x4d
 8001ae4:	f7fe fd9e 	bl	8000624 <Lcd_Send_Data>

	}

	RTC_Date_t date;

			    ds3231_get_date(&I2C_1, &date);
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	483e      	ldr	r0, [pc, #248]	; (8001be8 <rtc_lcd_int+0x238>)
 8001aee:	f7fe fc5e 	bl	80003ae <ds3231_get_date>

			    lcd_set_cursor(2,1,I2C_1.pI2Cx);
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <rtc_lcd_int+0x238>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	2101      	movs	r1, #1
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7fe fe02 	bl	8000704 <lcd_set_cursor>

			    Lcd_Send_Data((date.date/10)+48,I2C_1.pI2Cx);
 8001b00:	783b      	ldrb	r3, [r7, #0]
 8001b02:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <rtc_lcd_int+0x23c>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3330      	adds	r3, #48	; 0x30
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7fe fd84 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data((date.date%10)+48,I2C_1.pI2Cx);
 8001b1c:	783a      	ldrb	r2, [r7, #0]
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <rtc_lcd_int+0x23c>)
 8001b20:	fba3 1302 	umull	r1, r3, r3, r2
 8001b24:	08d9      	lsrs	r1, r3, #3
 8001b26:	460b      	mov	r3, r1
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7fe fd71 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data('/',I2C_1.pI2Cx);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	202f      	movs	r0, #47	; 0x2f
 8001b4a:	f7fe fd6b 	bl	8000624 <Lcd_Send_Data>


			    Lcd_Send_Data((date.month/10)+48,I2C_1.pI2Cx);
 8001b4e:	787b      	ldrb	r3, [r7, #1]
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <rtc_lcd_int+0x23c>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3330      	adds	r3, #48	; 0x30
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f7fe fd5d 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data((date.month%10)+48,I2C_1.pI2Cx);
 8001b6a:	787a      	ldrb	r2, [r7, #1]
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <rtc_lcd_int+0x23c>)
 8001b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b72:	08d9      	lsrs	r1, r3, #3
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3330      	adds	r3, #48	; 0x30
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f7fe fd4a 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data('/',I2C_1.pI2Cx);
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <rtc_lcd_int+0x238>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	202f      	movs	r0, #47	; 0x2f
 8001b98:	f7fe fd44 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data((date.year/10)+48,I2C_1.pI2Cx);
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <rtc_lcd_int+0x23c>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3330      	adds	r3, #48	; 0x30
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <rtc_lcd_int+0x238>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7fe fd36 	bl	8000624 <Lcd_Send_Data>

			    Lcd_Send_Data((date.year%10)+48,I2C_1.pI2Cx);
 8001bb8:	78ba      	ldrb	r2, [r7, #2]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <rtc_lcd_int+0x23c>)
 8001bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc0:	08d9      	lsrs	r1, r3, #3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3330      	adds	r3, #48	; 0x30
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <rtc_lcd_int+0x238>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7fe fd23 	bl	8000624 <Lcd_Send_Data>


}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000050 	.word	0x20000050
 8001bec:	cccccccd 	.word	0xcccccccd

08001bf0 <set_rtc_alrm1>:


void set_rtc_alrm1(uint8_t hour,uint8_t minute,uint8_t seconds,uint8_t time_format)

{
 8001bf0:	b490      	push	{r4, r7}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	4603      	mov	r3, r0
 8001c04:	71bb      	strb	r3, [r7, #6]
 8001c06:	460b      	mov	r3, r1
 8001c08:	717b      	strb	r3, [r7, #5]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	713b      	strb	r3, [r7, #4]
    alarm1.hours = hour;
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <set_rtc_alrm1+0x40>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	7093      	strb	r3, [r2, #2]
	alarm1.minutes=minute;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <set_rtc_alrm1+0x40>)
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	7053      	strb	r3, [r2, #1]
	alarm1.seconds = seconds;
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <set_rtc_alrm1+0x40>)
 8001c1c:	797b      	ldrb	r3, [r7, #5]
 8001c1e:	7013      	strb	r3, [r2, #0]
	alarm1.time_format =time_format;
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <set_rtc_alrm1+0x40>)
 8001c22:	793b      	ldrb	r3, [r7, #4]
 8001c24:	70d3      	strb	r3, [r2, #3]
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc90      	pop	{r4, r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000060 	.word	0x20000060

08001c34 <set_rtc_alrm2>:
void set_rtc_alrm2(uint8_t hour,uint8_t minute,uint8_t seconds,uint8_t time_format)

{
 8001c34:	b490      	push	{r4, r7}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	4603      	mov	r3, r0
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	717b      	strb	r3, [r7, #5]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	713b      	strb	r3, [r7, #4]
    alarm2.hours = hour;
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <set_rtc_alrm2+0x40>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	7093      	strb	r3, [r2, #2]
	alarm2.minutes=minute;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <set_rtc_alrm2+0x40>)
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	7053      	strb	r3, [r2, #1]
	alarm2.seconds = seconds;
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <set_rtc_alrm2+0x40>)
 8001c60:	797b      	ldrb	r3, [r7, #5]
 8001c62:	7013      	strb	r3, [r2, #0]
	alarm2.time_format =time_format;
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <set_rtc_alrm2+0x40>)
 8001c66:	793b      	ldrb	r3, [r7, #4]
 8001c68:	70d3      	strb	r3, [r2, #3]
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc90      	pop	{r4, r7}
 8001c72:	4770      	bx	lr
 8001c74:	2000005c 	.word	0x2000005c

08001c78 <set_rtc_time>:


void set_rtc_time(uint8_t hour,uint8_t minute,uint8_t seconds,uint8_t time_format)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	717b      	strb	r3, [r7, #5]
 8001c92:	4613      	mov	r3, r2
 8001c94:	713b      	strb	r3, [r7, #4]
   RTC_Time_t time;
   time.hours      = hour;
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	73bb      	strb	r3, [r7, #14]
   time.minutes    = minute;
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	737b      	strb	r3, [r7, #13]
   time.seconds     = seconds;
 8001c9e:	797b      	ldrb	r3, [r7, #5]
 8001ca0:	733b      	strb	r3, [r7, #12]
   time.time_format = time_format;
 8001ca2:	793b      	ldrb	r3, [r7, #4]
 8001ca4:	73fb      	strb	r3, [r7, #15]
   ds3231_set_time(&I2C_1,&time);
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4619      	mov	r1, r3
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <set_rtc_time+0x44>)
 8001cae:	f7fe faa3 	bl	80001f8 <ds3231_set_time>
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000050 	.word	0x20000050

08001cc0 <set_rtc_date>:
void set_rtc_date(uint8_t day,uint8_t date,uint8_t month,uint8_t year)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71bb      	strb	r3, [r7, #6]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	717b      	strb	r3, [r7, #5]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	713b      	strb	r3, [r7, #4]
   RTC_Date_t   pdate;

   pdate.date =  date;
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	733b      	strb	r3, [r7, #12]
   pdate.month = month;
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	737b      	strb	r3, [r7, #13]
   pdate.day   = day;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	73fb      	strb	r3, [r7, #15]
   pdate.year  = year;
 8001cea:	793b      	ldrb	r3, [r7, #4]
 8001cec:	73bb      	strb	r3, [r7, #14]
   ds3231_set_date(&I2C_1,&pdate);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <set_rtc_date+0x44>)
 8001cf6:	f7fe fb25 	bl	8000344 <ds3231_set_date>
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000050 	.word	0x20000050

08001d08 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0


menu_mode = 0;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <EXTI1_IRQHandler+0x14>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]


GPIO_IRQHandling(IRQ_NO_EXTI1);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f7fe ffc2 	bl	8000c9c <GPIO_IRQHandling>


}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000002 	.word	0x20000002

08001d20 <menu_manager>:
bool alrm1_min=1,alrm1_hh=1,alrm1_ss,alrm1_ft=1;
bool alrm2_min=1,alrm2_hh=1,alrm2_ss,alrm2_ft=1;
uint8_t mode=0;
char days[]={"SUN MON TUE WED THU FRI SAT"};
void menu_manager()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b094      	sub	sp, #80	; 0x50
 8001d24:	af00      	add	r7, sp, #0

	while(menu_mode);
 8001d26:	bf00      	nop
 8001d28:	4ba7      	ldr	r3, [pc, #668]	; (8001fc8 <menu_manager+0x2a8>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1fb      	bne.n	8001d28 <menu_manager+0x8>
	uint32_t *sysctrl = (uint32_t *)0xE000E010;
 8001d30:	4ba6      	ldr	r3, [pc, #664]	; (8001fcc <menu_manager+0x2ac>)
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
		*sysctrl  &=~(1<<SYSTICK_ENABLE);
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0201 	bic.w	r2, r3, #1
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	601a      	str	r2, [r3, #0]




page1:	              select_mode=1;
 8001d40:	4ba3      	ldr	r3, [pc, #652]	; (8001fd0 <menu_manager+0x2b0>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
					select_time=1;
 8001d46:	4ba3      	ldr	r3, [pc, #652]	; (8001fd4 <menu_manager+0x2b4>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
					select_hour=1;
 8001d4c:	4ba2      	ldr	r3, [pc, #648]	; (8001fd8 <menu_manager+0x2b8>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
					select_minute=1;
 8001d52:	4ba2      	ldr	r3, [pc, #648]	; (8001fdc <menu_manager+0x2bc>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
					select_second=1;
 8001d58:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <menu_manager+0x2c0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]

					select_time=select_hour=select_minute=select_second=select_tf=select_mode=time_setting=1;
 8001d5e:	4ba1      	ldr	r3, [pc, #644]	; (8001fe4 <menu_manager+0x2c4>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	4b9f      	ldr	r3, [pc, #636]	; (8001fe4 <menu_manager+0x2c4>)
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	4b99      	ldr	r3, [pc, #612]	; (8001fd0 <menu_manager+0x2b0>)
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	4b98      	ldr	r3, [pc, #608]	; (8001fd0 <menu_manager+0x2b0>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b9d      	ldr	r3, [pc, #628]	; (8001fe8 <menu_manager+0x2c8>)
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	4b9c      	ldr	r3, [pc, #624]	; (8001fe8 <menu_manager+0x2c8>)
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <menu_manager+0x2c0>)
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	4b98      	ldr	r3, [pc, #608]	; (8001fe0 <menu_manager+0x2c0>)
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <menu_manager+0x2bc>)
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	4b95      	ldr	r3, [pc, #596]	; (8001fdc <menu_manager+0x2bc>)
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <menu_manager+0x2b8>)
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <menu_manager+0x2b8>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <menu_manager+0x2b4>)
 8001d92:	701a      	strb	r2, [r3, #0]
					select_date=select_month=select_year=select_day=1;
 8001d94:	4b95      	ldr	r3, [pc, #596]	; (8001fec <menu_manager+0x2cc>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	4b94      	ldr	r3, [pc, #592]	; (8001fec <menu_manager+0x2cc>)
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	4b94      	ldr	r3, [pc, #592]	; (8001ff0 <menu_manager+0x2d0>)
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <menu_manager+0x2d0>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b93      	ldr	r3, [pc, #588]	; (8001ff4 <menu_manager+0x2d4>)
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <menu_manager+0x2d4>)
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <menu_manager+0x2d8>)
 8001db0:	701a      	strb	r2, [r3, #0]
					alrm1_min=alrm1_hh=1,alrm1_ss=alrm1_ft=1;
 8001db2:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <menu_manager+0x2dc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b90      	ldr	r3, [pc, #576]	; (8001ffc <menu_manager+0x2dc>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b90      	ldr	r3, [pc, #576]	; (8002000 <menu_manager+0x2e0>)
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	4b90      	ldr	r3, [pc, #576]	; (8002004 <menu_manager+0x2e4>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	4b8f      	ldr	r3, [pc, #572]	; (8002004 <menu_manager+0x2e4>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <menu_manager+0x2e8>)
 8001dcc:	701a      	strb	r2, [r3, #0]
					alrm2_min=alrm2_hh=alrm2_ss=alrm2_ft=1;
 8001dce:	4b8f      	ldr	r3, [pc, #572]	; (800200c <menu_manager+0x2ec>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	4b8d      	ldr	r3, [pc, #564]	; (800200c <menu_manager+0x2ec>)
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b8d      	ldr	r3, [pc, #564]	; (8002010 <menu_manager+0x2f0>)
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <menu_manager+0x2f0>)
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <menu_manager+0x2f4>)
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <menu_manager+0x2f4>)
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <menu_manager+0x2f8>)
 8001dea:	701a      	strb	r2, [r3, #0]





				lcd_clear_display(I2C_1.pI2Cx);
 8001dec:	4b8b      	ldr	r3, [pc, #556]	; (800201c <menu_manager+0x2fc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fcb0 	bl	8000756 <lcd_clear_display>

	    	     lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <menu_manager+0x2fc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7fe fc80 	bl	8000704 <lcd_set_cursor>

	    	     char display_content[20]="SET TIME";
 8001e04:	4a86      	ldr	r2, [pc, #536]	; (8002020 <menu_manager+0x300>)
 8001e06:	463b      	mov	r3, r7
 8001e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0a:	c303      	stmia	r3!, {r0, r1}
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	f107 0309 	add.w	r3, r7, #9
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	f8c3 2007 	str.w	r2, [r3, #7]

	    	     for(int i=0;i<strlen(display_content);i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e20:	e00c      	b.n	8001e3c <menu_manager+0x11c>
	    	     {
	    	     	Lcd_Send_Data(display_content[i],I2C_1.pI2Cx);
 8001e22:	463a      	mov	r2, r7
 8001e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e26:	4413      	add	r3, r2
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	; (800201c <menu_manager+0x2fc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7fe fbf7 	bl	8000624 <Lcd_Send_Data>
	    	     for(int i=0;i<strlen(display_content);i++)
 8001e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e38:	3301      	adds	r3, #1
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe f9d2 	bl	80001e8 <strlen>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8ea      	bhi.n	8001e22 <menu_manager+0x102>
	    	     }
	    	     strcpy(display_content,"SET DATE");
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <menu_manager+0x304>)
 8001e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e52:	c303      	stmia	r3!, {r0, r1}
 8001e54:	701a      	strb	r2, [r3, #0]
	    	     lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 8001e56:	4b71      	ldr	r3, [pc, #452]	; (800201c <menu_manager+0x2fc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f7fe fc50 	bl	8000704 <lcd_set_cursor>
	    	     for(int i=0;i<strlen(display_content);i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e68:	e00c      	b.n	8001e84 <menu_manager+0x164>
	    	     {
	    	         Lcd_Send_Data(display_content[i],I2C_1.pI2Cx);
 8001e6a:	463a      	mov	r2, r7
 8001e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6e:	4413      	add	r3, r2
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <menu_manager+0x2fc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7fe fbd3 	bl	8000624 <Lcd_Send_Data>
	    	     for(int i=0;i<strlen(display_content);i++)
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	3301      	adds	r3, #1
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e84:	463b      	mov	r3, r7
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9ae 	bl	80001e8 <strlen>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8ea      	bhi.n	8001e6a <menu_manager+0x14a>
	    	     }
	    	     lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 8001e94:	4b61      	ldr	r3, [pc, #388]	; (800201c <menu_manager+0x2fc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	210d      	movs	r1, #13
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7fe fc31 	bl	8000704 <lcd_set_cursor>
	    	     Lcd_Send_Data('<', I2C_1.pI2Cx);
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	; (800201c <menu_manager+0x2fc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	203c      	movs	r0, #60	; 0x3c
 8001eaa:	f7fe fbbb 	bl	8000624 <Lcd_Send_Data>
	    	     Lcd_Send_Data('-', I2C_1.pI2Cx);
 8001eae:	4b5b      	ldr	r3, [pc, #364]	; (800201c <menu_manager+0x2fc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	202d      	movs	r0, #45	; 0x2d
 8001eb6:	f7fe fbb5 	bl	8000624 <Lcd_Send_Data>
	    	     mode=0;
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <menu_manager+0x308>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  while(select_mode)
 8001ec0:	e198      	b.n	80021f4 <menu_manager+0x4d4>
   {
        bool page2 = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	    		  uint8_t temp = keypad_scan();
 8001ec8:	f002 f8b4 	bl	8004034 <keypad_scan>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	75fb      	strb	r3, [r7, #23]




			  if( temp == 7)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b07      	cmp	r3, #7
 8001ed4:	d130      	bne.n	8001f38 <menu_manager+0x218>
			  {
				  mode=0;
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <menu_manager+0x308>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
				  lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <menu_manager+0x2fc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	210d      	movs	r1, #13
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe fc0d 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data('<', I2C_1.pI2Cx);
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <menu_manager+0x2fc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	203c      	movs	r0, #60	; 0x3c
 8001ef2:	f7fe fb97 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data('-', I2C_1.pI2Cx);
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <menu_manager+0x2fc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	202d      	movs	r0, #45	; 0x2d
 8001efe:	f7fe fb91 	bl	8000624 <Lcd_Send_Data>
				  lcd_set_cursor(2, 13, I2C_1.pI2Cx);
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <menu_manager+0x2fc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	210d      	movs	r1, #13
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7fe fbfa 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8001f10:	4b42      	ldr	r3, [pc, #264]	; (800201c <menu_manager+0x2fc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	2020      	movs	r0, #32
 8001f18:	f7fe fb84 	bl	8000624 <Lcd_Send_Data>
				  lcd_set_cursor(2, 14, I2C_1.pI2Cx);
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <menu_manager+0x2fc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	210e      	movs	r1, #14
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7fe fbed 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <menu_manager+0x2fc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	2020      	movs	r0, #32
 8001f32:	f7fe fb77 	bl	8000624 <Lcd_Send_Data>
 8001f36:	e15d      	b.n	80021f4 <menu_manager+0x4d4>
			  }
			  else if (temp == 1)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d129      	bne.n	8001f92 <menu_manager+0x272>
			  {
				  mode=1;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <menu_manager+0x308>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
				  lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <menu_manager+0x2fc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	210d      	movs	r1, #13
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7fe fbd9 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <menu_manager+0x2fc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	2020      	movs	r0, #32
 8001f5a:	f7fe fb63 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <menu_manager+0x2fc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	2020      	movs	r0, #32
 8001f66:	f7fe fb5d 	bl	8000624 <Lcd_Send_Data>
				  lcd_set_cursor(2, 13, I2C_1.pI2Cx);
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <menu_manager+0x2fc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	210d      	movs	r1, #13
 8001f72:	2002      	movs	r0, #2
 8001f74:	f7fe fbc6 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data('<', I2C_1.pI2Cx);
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <menu_manager+0x2fc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	203c      	movs	r0, #60	; 0x3c
 8001f80:	f7fe fb50 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data('-', I2C_1.pI2Cx);
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <menu_manager+0x2fc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	202d      	movs	r0, #45	; 0x2d
 8001f8c:	f7fe fb4a 	bl	8000624 <Lcd_Send_Data>
 8001f90:	e130      	b.n	80021f4 <menu_manager+0x4d4>
			  }


			  else if(temp == 8)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	f040 811a 	bne.w	80021ce <menu_manager+0x4ae>
			  {

				  lcd_clear_display(I2C_1.pI2Cx);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <menu_manager+0x2fc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fbd9 	bl	8000756 <lcd_clear_display>
				  lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <menu_manager+0x2fc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2101      	movs	r1, #1
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe fba9 	bl	8000704 <lcd_set_cursor>
				  strcpy(display_content,"SET ALARM1");
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <menu_manager+0x30c>)
 8001fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb8:	c303      	stmia	r3!, {r0, r1}
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	0c12      	lsrs	r2, r2, #16
 8001fc0:	701a      	strb	r2, [r3, #0]

				 for(int i=0;i<strlen(display_content);i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc6:	e040      	b.n	800204a <menu_manager+0x32a>
 8001fc8:	20000002 	.word	0x20000002
 8001fcc:	e000e010 	.word	0xe000e010
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000003 	.word	0x20000003
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000005 	.word	0x20000005
 8001fe0:	20000006 	.word	0x20000006
 8001fe4:	20000009 	.word	0x20000009
 8001fe8:	20000007 	.word	0x20000007
 8001fec:	2000000d 	.word	0x2000000d
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	2000000b 	.word	0x2000000b
 8001ff8:	2000000a 	.word	0x2000000a
 8001ffc:	2000000f 	.word	0x2000000f
 8002000:	2000000e 	.word	0x2000000e
 8002004:	20000010 	.word	0x20000010
 8002008:	20000065 	.word	0x20000065
 800200c:	20000013 	.word	0x20000013
 8002010:	20000064 	.word	0x20000064
 8002014:	20000012 	.word	0x20000012
 8002018:	20000011 	.word	0x20000011
 800201c:	20000050 	.word	0x20000050
 8002020:	08004240 	.word	0x08004240
 8002024:	0800421c 	.word	0x0800421c
 8002028:	2000004c 	.word	0x2000004c
 800202c:	08004228 	.word	0x08004228
				 {
					Lcd_Send_Data(display_content[i],I2C_1.pI2Cx);
 8002030:	463a      	mov	r2, r7
 8002032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002034:	4413      	add	r3, r2
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b68      	ldr	r3, [pc, #416]	; (80021dc <menu_manager+0x4bc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7fe faf0 	bl	8000624 <Lcd_Send_Data>
				 for(int i=0;i<strlen(display_content);i++)
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	3301      	adds	r3, #1
 8002048:	643b      	str	r3, [r7, #64]	; 0x40
 800204a:	463b      	mov	r3, r7
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f8cb 	bl	80001e8 <strlen>
 8002052:	4602      	mov	r2, r0
 8002054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002056:	429a      	cmp	r2, r3
 8002058:	d8ea      	bhi.n	8002030 <menu_manager+0x310>
				 }

				 strcpy(display_content,"SET ALARM2");
 800205a:	463b      	mov	r3, r7
 800205c:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <menu_manager+0x4c0>)
 800205e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002060:	c303      	stmia	r3!, {r0, r1}
 8002062:	801a      	strh	r2, [r3, #0]
 8002064:	3302      	adds	r3, #2
 8002066:	0c12      	lsrs	r2, r2, #16
 8002068:	701a      	strb	r2, [r3, #0]
				 lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <menu_manager+0x4bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	2101      	movs	r1, #1
 8002072:	2002      	movs	r0, #2
 8002074:	f7fe fb46 	bl	8000704 <lcd_set_cursor>

				 for(int i=0;i<strlen(display_content);i++)
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	e00c      	b.n	8002098 <menu_manager+0x378>
				 {
					 Lcd_Send_Data(display_content[i],I2C_1.pI2Cx);
 800207e:	463a      	mov	r2, r7
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	4413      	add	r3, r2
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	4b55      	ldr	r3, [pc, #340]	; (80021dc <menu_manager+0x4bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe fac9 	bl	8000624 <Lcd_Send_Data>
				 for(int i=0;i<strlen(display_content);i++)
 8002092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002094:	3301      	adds	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002098:	463b      	mov	r3, r7
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f8a4 	bl	80001e8 <strlen>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8ea      	bhi.n	800207e <menu_manager+0x35e>
				 }

				 lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <menu_manager+0x4bc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	210d      	movs	r1, #13
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7fe fb27 	bl	8000704 <lcd_set_cursor>
				 Lcd_Send_Data('<', I2C_1.pI2Cx);
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <menu_manager+0x4bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4619      	mov	r1, r3
 80020bc:	203c      	movs	r0, #60	; 0x3c
 80020be:	f7fe fab1 	bl	8000624 <Lcd_Send_Data>
				 Lcd_Send_Data('-', I2C_1.pI2Cx);
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <menu_manager+0x4bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	202d      	movs	r0, #45	; 0x2d
 80020ca:	f7fe faab 	bl	8000624 <Lcd_Send_Data>

				 mode =2;
 80020ce:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <menu_manager+0x4c4>)
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
				 while(page2)
 80020d4:	e076      	b.n	80021c4 <menu_manager+0x4a4>
				 {
					 temp = keypad_scan();
 80020d6:	f001 ffad 	bl	8004034 <keypad_scan>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
					 if( temp == 7)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	d130      	bne.n	8002146 <menu_manager+0x426>
					  {
							 mode =2;
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <menu_manager+0x4c4>)
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
						  lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <menu_manager+0x4bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	210d      	movs	r1, #13
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7fe fb06 	bl	8000704 <lcd_set_cursor>
						  Lcd_Send_Data('<', I2C_1.pI2Cx);
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <menu_manager+0x4bc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	203c      	movs	r0, #60	; 0x3c
 8002100:	f7fe fa90 	bl	8000624 <Lcd_Send_Data>
						  Lcd_Send_Data('-', I2C_1.pI2Cx);
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <menu_manager+0x4bc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	202d      	movs	r0, #45	; 0x2d
 800210c:	f7fe fa8a 	bl	8000624 <Lcd_Send_Data>
						  lcd_set_cursor(2, 13, I2C_1.pI2Cx);
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <menu_manager+0x4bc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	210d      	movs	r1, #13
 8002118:	2002      	movs	r0, #2
 800211a:	f7fe faf3 	bl	8000704 <lcd_set_cursor>
						  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <menu_manager+0x4bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	2020      	movs	r0, #32
 8002126:	f7fe fa7d 	bl	8000624 <Lcd_Send_Data>
						  lcd_set_cursor(2, 14, I2C_1.pI2Cx);
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <menu_manager+0x4bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	210e      	movs	r1, #14
 8002132:	2002      	movs	r0, #2
 8002134:	f7fe fae6 	bl	8000704 <lcd_set_cursor>
						  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <menu_manager+0x4bc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	2020      	movs	r0, #32
 8002140:	f7fe fa70 	bl	8000624 <Lcd_Send_Data>
 8002144:	e03e      	b.n	80021c4 <menu_manager+0x4a4>
					  }
					  else if (temp == 1)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d129      	bne.n	80021a0 <menu_manager+0x480>
					  {
						   mode=3;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <menu_manager+0x4c4>)
 800214e:	2203      	movs	r2, #3
 8002150:	701a      	strb	r2, [r3, #0]
						  lcd_set_cursor(1, 13, I2C_1.pI2Cx);
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <menu_manager+0x4bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	210d      	movs	r1, #13
 800215a:	2001      	movs	r0, #1
 800215c:	f7fe fad2 	bl	8000704 <lcd_set_cursor>
						  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <menu_manager+0x4bc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	2020      	movs	r0, #32
 8002168:	f7fe fa5c 	bl	8000624 <Lcd_Send_Data>
						  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <menu_manager+0x4bc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	2020      	movs	r0, #32
 8002174:	f7fe fa56 	bl	8000624 <Lcd_Send_Data>
						  lcd_set_cursor(2, 13, I2C_1.pI2Cx);
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <menu_manager+0x4bc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	210d      	movs	r1, #13
 8002180:	2002      	movs	r0, #2
 8002182:	f7fe fabf 	bl	8000704 <lcd_set_cursor>
						  Lcd_Send_Data('<', I2C_1.pI2Cx);
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <menu_manager+0x4bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	203c      	movs	r0, #60	; 0x3c
 800218e:	f7fe fa49 	bl	8000624 <Lcd_Send_Data>
						  Lcd_Send_Data('-', I2C_1.pI2Cx);
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <menu_manager+0x4bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	202d      	movs	r0, #45	; 0x2d
 800219a:	f7fe fa43 	bl	8000624 <Lcd_Send_Data>
 800219e:	e011      	b.n	80021c4 <menu_manager+0x4a4>
				      }

					  else if(temp ==8 )
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d105      	bne.n	80021b2 <menu_manager+0x492>
					  {
						  page2=0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						  temp=0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
						  goto page1;
 80021b0:	e5c6      	b.n	8001d40 <menu_manager+0x20>

					  }
					  else if(temp == 9)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d105      	bne.n	80021c4 <menu_manager+0x4a4>
					  {

						  select_mode =0;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <menu_manager+0x4c8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
						  page2=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				 while(page2)
 80021c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d184      	bne.n	80020d6 <menu_manager+0x3b6>
 80021cc:	e012      	b.n	80021f4 <menu_manager+0x4d4>

					  }
              }

		}
					else if(temp == 9)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d10b      	bne.n	80021ec <menu_manager+0x4cc>
					{

					  select_mode =0;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <menu_manager+0x4c8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e00b      	b.n	80021f4 <menu_manager+0x4d4>
 80021dc:	20000050 	.word	0x20000050
 80021e0:	08004234 	.word	0x08004234
 80021e4:	2000004c 	.word	0x2000004c
 80021e8:	20000008 	.word	0x20000008

					}

					else if(temp == 4)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	f001 86bf 	beq.w	8003f72 <menu_manager+0x2252>
  while(select_mode)
 80021f4:	4bc7      	ldr	r3, [pc, #796]	; (8002514 <menu_manager+0x7f4>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f ae62 	bne.w	8001ec2 <menu_manager+0x1a2>
					}



  }
  if(mode == 0)
 80021fe:	4bc6      	ldr	r3, [pc, #792]	; (8002518 <menu_manager+0x7f8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 83b5 	bne.w	8002972 <menu_manager+0xc52>
  {
	    	  lcd_clear_display(I2C_1.pI2Cx);
 8002208:	4bc4      	ldr	r3, [pc, #784]	; (800251c <menu_manager+0x7fc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe faa2 	bl	8000756 <lcd_clear_display>
	    	  lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8002212:	4bc2      	ldr	r3, [pc, #776]	; (800251c <menu_manager+0x7fc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	2101      	movs	r1, #1
 800221a:	2001      	movs	r0, #1
 800221c:	f7fe fa72 	bl	8000704 <lcd_set_cursor>
	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 8002220:	4bbe      	ldr	r3, [pc, #760]	; (800251c <menu_manager+0x7fc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	2048      	movs	r0, #72	; 0x48
 8002228:	f7fe f9fc 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 800222c:	4bbb      	ldr	r3, [pc, #748]	; (800251c <menu_manager+0x7fc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	2048      	movs	r0, #72	; 0x48
 8002234:	f7fe f9f6 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002238:	4bb8      	ldr	r3, [pc, #736]	; (800251c <menu_manager+0x7fc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	2020      	movs	r0, #32
 8002240:	f7fe f9f0 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8002244:	4bb5      	ldr	r3, [pc, #724]	; (800251c <menu_manager+0x7fc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	203a      	movs	r0, #58	; 0x3a
 800224c:	f7fe f9ea 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002250:	4bb2      	ldr	r3, [pc, #712]	; (800251c <menu_manager+0x7fc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	2030      	movs	r0, #48	; 0x30
 8002258:	f7fe f9e4 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 800225c:	4baf      	ldr	r3, [pc, #700]	; (800251c <menu_manager+0x7fc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	2030      	movs	r0, #48	; 0x30
 8002264:	f7fe f9de 	bl	8000624 <Lcd_Send_Data>

	    	  lcd_set_cursor(1, 8, I2C_1.pI2Cx);
 8002268:	4bac      	ldr	r3, [pc, #688]	; (800251c <menu_manager+0x7fc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	2108      	movs	r1, #8
 8002270:	2001      	movs	r0, #1
 8002272:	f7fe fa47 	bl	8000704 <lcd_set_cursor>
	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 8002276:	4ba9      	ldr	r3, [pc, #676]	; (800251c <menu_manager+0x7fc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	2053      	movs	r0, #83	; 0x53
 800227e:	f7fe f9d1 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 8002282:	4ba6      	ldr	r3, [pc, #664]	; (800251c <menu_manager+0x7fc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4619      	mov	r1, r3
 8002288:	2053      	movs	r0, #83	; 0x53
 800228a:	f7fe f9cb 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800228e:	4ba3      	ldr	r3, [pc, #652]	; (800251c <menu_manager+0x7fc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	2020      	movs	r0, #32
 8002296:	f7fe f9c5 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 800229a:	4ba0      	ldr	r3, [pc, #640]	; (800251c <menu_manager+0x7fc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	203a      	movs	r0, #58	; 0x3a
 80022a2:	f7fe f9bf 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80022a6:	4b9d      	ldr	r3, [pc, #628]	; (800251c <menu_manager+0x7fc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	2030      	movs	r0, #48	; 0x30
 80022ae:	f7fe f9b9 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80022b2:	4b9a      	ldr	r3, [pc, #616]	; (800251c <menu_manager+0x7fc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	2030      	movs	r0, #48	; 0x30
 80022ba:	f7fe f9b3 	bl	8000624 <Lcd_Send_Data>

	    	  lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 80022be:	4b97      	ldr	r3, [pc, #604]	; (800251c <menu_manager+0x7fc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	2101      	movs	r1, #1
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7fe fa1c 	bl	8000704 <lcd_set_cursor>
	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80022cc:	4b93      	ldr	r3, [pc, #588]	; (800251c <menu_manager+0x7fc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	204d      	movs	r0, #77	; 0x4d
 80022d4:	f7fe f9a6 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80022d8:	4b90      	ldr	r3, [pc, #576]	; (800251c <menu_manager+0x7fc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	204d      	movs	r0, #77	; 0x4d
 80022e0:	f7fe f9a0 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 80022e4:	4b8d      	ldr	r3, [pc, #564]	; (800251c <menu_manager+0x7fc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	2020      	movs	r0, #32
 80022ec:	f7fe f99a 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 80022f0:	4b8a      	ldr	r3, [pc, #552]	; (800251c <menu_manager+0x7fc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	203a      	movs	r0, #58	; 0x3a
 80022f8:	f7fe f994 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80022fc:	4b87      	ldr	r3, [pc, #540]	; (800251c <menu_manager+0x7fc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	2030      	movs	r0, #48	; 0x30
 8002304:	f7fe f98e 	bl	8000624 <Lcd_Send_Data>
	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002308:	4b84      	ldr	r3, [pc, #528]	; (800251c <menu_manager+0x7fc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	2030      	movs	r0, #48	; 0x30
 8002310:	f7fe f988 	bl	8000624 <Lcd_Send_Data>

	    	  lcd_set_cursor(2, 8, I2C_1.pI2Cx);
 8002314:	4b81      	ldr	r3, [pc, #516]	; (800251c <menu_manager+0x7fc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	2108      	movs	r1, #8
 800231c:	2002      	movs	r0, #2
 800231e:	f7fe f9f1 	bl	8000704 <lcd_set_cursor>
	    	  Lcd_Send_Data('T', I2C_1.pI2Cx);
 8002322:	4b7e      	ldr	r3, [pc, #504]	; (800251c <menu_manager+0x7fc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	2054      	movs	r0, #84	; 0x54
 800232a:	f7fe f97b 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('F', I2C_1.pI2Cx);
 800232e:	4b7b      	ldr	r3, [pc, #492]	; (800251c <menu_manager+0x7fc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	2046      	movs	r0, #70	; 0x46
 8002336:	f7fe f975 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800233a:	4b78      	ldr	r3, [pc, #480]	; (800251c <menu_manager+0x7fc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	2020      	movs	r0, #32
 8002342:	f7fe f96f 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8002346:	4b75      	ldr	r3, [pc, #468]	; (800251c <menu_manager+0x7fc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	203a      	movs	r0, #58	; 0x3a
 800234e:	f7fe f969 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('A', I2C_1.pI2Cx);
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <menu_manager+0x7fc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	2041      	movs	r0, #65	; 0x41
 800235a:	f7fe f963 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 800235e:	4b6f      	ldr	r3, [pc, #444]	; (800251c <menu_manager+0x7fc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	204d      	movs	r0, #77	; 0x4d
 8002366:	f7fe f95d 	bl	8000624 <Lcd_Send_Data>

	    	  lcd_set_cursor(1, 6, I2C_1.pI2Cx);
 800236a:	4b6c      	ldr	r3, [pc, #432]	; (800251c <menu_manager+0x7fc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	2106      	movs	r1, #6
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe f9c6 	bl	8000704 <lcd_set_cursor>
	    	signed  char hh=0,mm=0,ss=0,tf=0;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800237e:	2300      	movs	r3, #0
 8002380:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800238a:	2300      	movs	r3, #0
 800238c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		  while(select_hour)
 8002390:	e0d8      	b.n	8002544 <menu_manager+0x824>
		  {


	              delay(50000);
 8002392:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002396:	f7fe ffb3 	bl	8001300 <delay>
	    		  uint8_t temp = keypad_scan();
 800239a:	f001 fe4b 	bl	8004034 <keypad_scan>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


	    		  if(temp == 7)
 80023a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	d14d      	bne.n	8002448 <menu_manager+0x728>
	    		  {
	    			  hh++;
 80023ac:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    			  hh=hh>0 ?hh:0;
 80023ba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80023be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80023c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    			  hh %=13;
 80023c6:	f997 203b 	ldrsb.w	r2, [r7, #59]	; 0x3b
 80023ca:	4b55      	ldr	r3, [pc, #340]	; (8002520 <menu_manager+0x800>)
 80023cc:	fb83 1302 	smull	r1, r3, r3, r2
 80023d0:	1099      	asrs	r1, r3, #2
 80023d2:	17d3      	asrs	r3, r2, #31
 80023d4:	1ac9      	subs	r1, r1, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    			  lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <menu_manager+0x7fc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	2105      	movs	r1, #5
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7fe f988 	bl	8000704 <lcd_set_cursor>
	    			  Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 80023f4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <menu_manager+0x804>)
 80023fa:	fb82 1203 	smull	r1, r2, r2, r3
 80023fe:	1092      	asrs	r2, r2, #2
 8002400:	17db      	asrs	r3, r3, #31
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b25b      	sxtb	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3330      	adds	r3, #48	; 0x30
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b43      	ldr	r3, [pc, #268]	; (800251c <menu_manager+0x7fc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7fe f906 	bl	8000624 <Lcd_Send_Data>
	    			  Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 8002418:	f997 203b 	ldrsb.w	r2, [r7, #59]	; 0x3b
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <menu_manager+0x804>)
 800241e:	fb83 1302 	smull	r1, r3, r3, r2
 8002422:	1099      	asrs	r1, r3, #2
 8002424:	17d3      	asrs	r3, r2, #31
 8002426:	1ac9      	subs	r1, r1, r3
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	b25b      	sxtb	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3330      	adds	r3, #48	; 0x30
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <menu_manager+0x7fc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7fe f8ef 	bl	8000624 <Lcd_Send_Data>
 8002446:	e07d      	b.n	8002544 <menu_manager+0x824>

	    		  }
	    		  else if(temp == 1)
 8002448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d155      	bne.n	80024fc <menu_manager+0x7dc>
	    		  {
	    		     	hh--;
 8002450:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    		     	 hh=hh>0 && hh<60?hh:0;
 800245e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002462:	2b00      	cmp	r3, #0
 8002464:	dd06      	ble.n	8002474 <menu_manager+0x754>
 8002466:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800246a:	2b3b      	cmp	r3, #59	; 0x3b
 800246c:	dc02      	bgt.n	8002474 <menu_manager+0x754>
 800246e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002472:	e000      	b.n	8002476 <menu_manager+0x756>
 8002474:	2300      	movs	r3, #0
 8002476:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    		     	 hh%=13;
 800247a:	f997 203b 	ldrsb.w	r2, [r7, #59]	; 0x3b
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <menu_manager+0x800>)
 8002480:	fb83 1302 	smull	r1, r3, r3, r2
 8002484:	1099      	asrs	r1, r3, #2
 8002486:	17d3      	asrs	r3, r2, #31
 8002488:	1ac9      	subs	r1, r1, r3
 800248a:	460b      	mov	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	440b      	add	r3, r1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    		        lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <menu_manager+0x7fc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	2105      	movs	r1, #5
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7fe f92e 	bl	8000704 <lcd_set_cursor>
	    		     	Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 80024a8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80024ac:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <menu_manager+0x804>)
 80024ae:	fb82 1203 	smull	r1, r2, r2, r3
 80024b2:	1092      	asrs	r2, r2, #2
 80024b4:	17db      	asrs	r3, r3, #31
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3330      	adds	r3, #48	; 0x30
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <menu_manager+0x7fc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f7fe f8ac 	bl	8000624 <Lcd_Send_Data>
	    		     	Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 80024cc:	f997 203b 	ldrsb.w	r2, [r7, #59]	; 0x3b
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <menu_manager+0x804>)
 80024d2:	fb83 1302 	smull	r1, r3, r3, r2
 80024d6:	1099      	asrs	r1, r3, #2
 80024d8:	17d3      	asrs	r3, r2, #31
 80024da:	1ac9      	subs	r1, r1, r3
 80024dc:	460b      	mov	r3, r1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3330      	adds	r3, #48	; 0x30
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <menu_manager+0x7fc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f7fe f895 	bl	8000624 <Lcd_Send_Data>
 80024fa:	e023      	b.n	8002544 <menu_manager+0x824>

	    		   }
	    		  else if(temp == 3)
 80024fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002500:	2b03      	cmp	r3, #3
 8002502:	d113      	bne.n	800252c <menu_manager+0x80c>
	    		  {

	    			  select_hour =0;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <menu_manager+0x808>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
	    			  temp=0;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002510:	e018      	b.n	8002544 <menu_manager+0x824>
 8002512:	bf00      	nop
 8002514:	20000008 	.word	0x20000008
 8002518:	2000004c 	.word	0x2000004c
 800251c:	20000050 	.word	0x20000050
 8002520:	4ec4ec4f 	.word	0x4ec4ec4f
 8002524:	66666667 	.word	0x66666667
 8002528:	20000004 	.word	0x20000004

	    		  }

	    		  else if(temp == 8)
 800252c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002530:	2b08      	cmp	r3, #8
 8002532:	d107      	bne.n	8002544 <menu_manager+0x824>
	    		  {
	    			  temp =0;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    			  select_mode =1;
 800253a:	4bc9      	ldr	r3, [pc, #804]	; (8002860 <menu_manager+0xb40>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
	    			  goto page1;
 8002540:	f7ff bbfe 	b.w	8001d40 <menu_manager+0x20>
		  while(select_hour)
 8002544:	4bc7      	ldr	r3, [pc, #796]	; (8002864 <menu_manager+0xb44>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f af22 	bne.w	8002392 <menu_manager+0x672>
	    		  }
  }

	    	  	  delay(100000);
 800254e:	48c6      	ldr	r0, [pc, #792]	; (8002868 <menu_manager+0xb48>)
 8002550:	f7fe fed6 	bl	8001300 <delay>

			while( select_minute)
 8002554:	e0c3      	b.n	80026de <menu_manager+0x9be>
			{
	    	         delay(50000);
 8002556:	f24c 3050 	movw	r0, #50000	; 0xc350
 800255a:	f7fe fed1 	bl	8001300 <delay>
	    			 uint8_t temp = keypad_scan();
 800255e:	f001 fd69 	bl	8004034 <keypad_scan>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


	    			 if(temp == 7)
 8002568:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800256c:	2b07      	cmp	r3, #7
 800256e:	d14d      	bne.n	800260c <menu_manager+0x8ec>
	    			   {
	    			      mm++;
 8002570:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      mm=mm>0 ?mm:0;
 800257e:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002582:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002586:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      mm %=61;
 800258a:	f997 203a 	ldrsb.w	r2, [r7, #58]	; 0x3a
 800258e:	4bb7      	ldr	r3, [pc, #732]	; (800286c <menu_manager+0xb4c>)
 8002590:	fb83 1302 	smull	r1, r3, r3, r2
 8002594:	1119      	asrs	r1, r3, #4
 8002596:	17d3      	asrs	r3, r2, #31
 8002598:	1ac9      	subs	r1, r1, r3
 800259a:	460b      	mov	r3, r1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a5b      	subs	r3, r3, r1
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 80025aa:	4bb1      	ldr	r3, [pc, #708]	; (8002870 <menu_manager+0xb50>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	2105      	movs	r1, #5
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7fe f8a6 	bl	8000704 <lcd_set_cursor>
	    			      Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 80025b8:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80025bc:	4aad      	ldr	r2, [pc, #692]	; (8002874 <menu_manager+0xb54>)
 80025be:	fb82 1203 	smull	r1, r2, r2, r3
 80025c2:	1092      	asrs	r2, r2, #2
 80025c4:	17db      	asrs	r3, r3, #31
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3330      	adds	r3, #48	; 0x30
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4ba7      	ldr	r3, [pc, #668]	; (8002870 <menu_manager+0xb50>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe f824 	bl	8000624 <Lcd_Send_Data>
	    			      Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 80025dc:	f997 203a 	ldrsb.w	r2, [r7, #58]	; 0x3a
 80025e0:	4ba4      	ldr	r3, [pc, #656]	; (8002874 <menu_manager+0xb54>)
 80025e2:	fb83 1302 	smull	r1, r3, r3, r2
 80025e6:	1099      	asrs	r1, r3, #2
 80025e8:	17d3      	asrs	r3, r2, #31
 80025ea:	1ac9      	subs	r1, r1, r3
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b9c      	ldr	r3, [pc, #624]	; (8002870 <menu_manager+0xb50>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f7fe f80d 	bl	8000624 <Lcd_Send_Data>
 800260a:	e068      	b.n	80026de <menu_manager+0x9be>

	    			    }
	    			  else if(temp == 1)
 800260c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002610:	2b01      	cmp	r3, #1
 8002612:	d14d      	bne.n	80026b0 <menu_manager+0x990>
	    			    {
	    			      mm--;
 8002614:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      mm=mm>0 ?mm:0;
 8002622:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800262a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      mm %=61;
 800262e:	f997 203a 	ldrsb.w	r2, [r7, #58]	; 0x3a
 8002632:	4b8e      	ldr	r3, [pc, #568]	; (800286c <menu_manager+0xb4c>)
 8002634:	fb83 1302 	smull	r1, r3, r3, r2
 8002638:	1119      	asrs	r1, r3, #4
 800263a:	17d3      	asrs	r3, r2, #31
 800263c:	1ac9      	subs	r1, r1, r3
 800263e:	460b      	mov	r3, r1
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a5b      	subs	r3, r3, r1
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	    			      lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <menu_manager+0xb50>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	2105      	movs	r1, #5
 8002656:	2002      	movs	r0, #2
 8002658:	f7fe f854 	bl	8000704 <lcd_set_cursor>
	    			      Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 800265c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002660:	4a84      	ldr	r2, [pc, #528]	; (8002874 <menu_manager+0xb54>)
 8002662:	fb82 1203 	smull	r1, r2, r2, r3
 8002666:	1092      	asrs	r2, r2, #2
 8002668:	17db      	asrs	r3, r3, #31
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b25b      	sxtb	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3330      	adds	r3, #48	; 0x30
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <menu_manager+0xb50>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f7fd ffd2 	bl	8000624 <Lcd_Send_Data>
	    			      Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8002680:	f997 203a 	ldrsb.w	r2, [r7, #58]	; 0x3a
 8002684:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <menu_manager+0xb54>)
 8002686:	fb83 1302 	smull	r1, r3, r3, r2
 800268a:	1099      	asrs	r1, r3, #2
 800268c:	17d3      	asrs	r3, r2, #31
 800268e:	1ac9      	subs	r1, r1, r3
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	b25b      	sxtb	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3330      	adds	r3, #48	; 0x30
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <menu_manager+0xb50>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7fd ffbb 	bl	8000624 <Lcd_Send_Data>
 80026ae:	e016      	b.n	80026de <menu_manager+0x9be>

	    			    }
	    			  else if(temp == 3)
 80026b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d106      	bne.n	80026c6 <menu_manager+0x9a6>
					  {
					  select_minute =0;
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <menu_manager+0xb58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
					  temp=0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80026c4:	e00b      	b.n	80026de <menu_manager+0x9be>
	    		       }
	    			  else if(temp == 8)
 80026c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d107      	bne.n	80026de <menu_manager+0x9be>
					  {
						  temp=0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						  select_mode =1;
 80026d4:	4b62      	ldr	r3, [pc, #392]	; (8002860 <menu_manager+0xb40>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
						  goto page1;
 80026da:	f7ff bb31 	b.w	8001d40 <menu_manager+0x20>
			while( select_minute)
 80026de:	4b66      	ldr	r3, [pc, #408]	; (8002878 <menu_manager+0xb58>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f47f af37 	bne.w	8002556 <menu_manager+0x836>
					   }

}
	    		  delay(100000);
 80026e8:	485f      	ldr	r0, [pc, #380]	; (8002868 <menu_manager+0xb48>)
 80026ea:	f7fe fe09 	bl	8001300 <delay>

			while( select_second)
 80026ee:	e0d3      	b.n	8002898 <menu_manager+0xb78>
			 {
				delay(50000);
 80026f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f4:	f7fe fe04 	bl	8001300 <delay>
				uint8_t temp = keypad_scan();
 80026f8:	f001 fc9c 	bl	8004034 <keypad_scan>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


			 if(temp == 7)
 8002702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002706:	2b07      	cmp	r3, #7
 8002708:	d14d      	bne.n	80027a6 <menu_manager+0xa86>
				   {
					ss++;
 800270a:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  ss=ss>0 ?ss:0;
 8002718:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800271c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002720:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  ss %=61;
 8002724:	f997 2039 	ldrsb.w	r2, [r7, #57]	; 0x39
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <menu_manager+0xb4c>)
 800272a:	fb83 1302 	smull	r1, r3, r3, r2
 800272e:	1119      	asrs	r1, r3, #4
 8002730:	17d3      	asrs	r3, r2, #31
 8002732:	1ac9      	subs	r1, r1, r3
 8002734:	460b      	mov	r3, r1
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a5b      	subs	r3, r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <menu_manager+0xb50>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	210c      	movs	r1, #12
 800274c:	2001      	movs	r0, #1
 800274e:	f7fd ffd9 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 8002752:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002756:	4a47      	ldr	r2, [pc, #284]	; (8002874 <menu_manager+0xb54>)
 8002758:	fb82 1203 	smull	r1, r2, r2, r3
 800275c:	1092      	asrs	r2, r2, #2
 800275e:	17db      	asrs	r3, r3, #31
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b25b      	sxtb	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3330      	adds	r3, #48	; 0x30
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <menu_manager+0xb50>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7fd ff57 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 8002776:	f997 2039 	ldrsb.w	r2, [r7, #57]	; 0x39
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <menu_manager+0xb54>)
 800277c:	fb83 1302 	smull	r1, r3, r3, r2
 8002780:	1099      	asrs	r1, r3, #2
 8002782:	17d3      	asrs	r3, r2, #31
 8002784:	1ac9      	subs	r1, r1, r3
 8002786:	460b      	mov	r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	b25b      	sxtb	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3330      	adds	r3, #48	; 0x30
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <menu_manager+0xb50>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7fd ff40 	bl	8000624 <Lcd_Send_Data>
 80027a4:	e078      	b.n	8002898 <menu_manager+0xb78>

				}
		  else if(temp == 1)
 80027a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d14d      	bne.n	800284a <menu_manager+0xb2a>
				{
				  ss--;
 80027ae:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  ss=ss>0 ?ss:0;
 80027bc:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80027c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80027c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  ss %=61;
 80027c8:	f997 2039 	ldrsb.w	r2, [r7, #57]	; 0x39
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <menu_manager+0xb4c>)
 80027ce:	fb83 1302 	smull	r1, r3, r3, r2
 80027d2:	1119      	asrs	r1, r3, #4
 80027d4:	17d3      	asrs	r3, r2, #31
 80027d6:	1ac9      	subs	r1, r1, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a5b      	subs	r3, r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <menu_manager+0xb50>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	210c      	movs	r1, #12
 80027f0:	2001      	movs	r0, #1
 80027f2:	f7fd ff87 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 80027f6:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <menu_manager+0xb54>)
 80027fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002800:	1092      	asrs	r2, r2, #2
 8002802:	17db      	asrs	r3, r3, #31
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b25b      	sxtb	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3330      	adds	r3, #48	; 0x30
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <menu_manager+0xb50>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fd ff05 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 800281a:	f997 2039 	ldrsb.w	r2, [r7, #57]	; 0x39
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <menu_manager+0xb54>)
 8002820:	fb83 1302 	smull	r1, r3, r3, r2
 8002824:	1099      	asrs	r1, r3, #2
 8002826:	17d3      	asrs	r3, r2, #31
 8002828:	1ac9      	subs	r1, r1, r3
 800282a:	460b      	mov	r3, r1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	b25b      	sxtb	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <menu_manager+0xb50>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7fd feee 	bl	8000624 <Lcd_Send_Data>
 8002848:	e026      	b.n	8002898 <menu_manager+0xb78>
				}
		  else if(temp == 3)
 800284a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800284e:	2b03      	cmp	r3, #3
 8002850:	d116      	bne.n	8002880 <menu_manager+0xb60>
			    {
				  select_second =0;
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <menu_manager+0xb5c>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
				  temp=0;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800285e:	e01b      	b.n	8002898 <menu_manager+0xb78>
 8002860:	20000008 	.word	0x20000008
 8002864:	20000004 	.word	0x20000004
 8002868:	000186a0 	.word	0x000186a0
 800286c:	4325c53f 	.word	0x4325c53f
 8002870:	20000050 	.word	0x20000050
 8002874:	66666667 	.word	0x66666667
 8002878:	20000005 	.word	0x20000005
 800287c:	20000006 	.word	0x20000006

			     }


	      else if(temp == 8)
 8002880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002884:	2b08      	cmp	r3, #8
 8002886:	d107      	bne.n	8002898 <menu_manager+0xb78>
			  {
				  temp=0;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				  select_mode =1;
 800288e:	4ba1      	ldr	r3, [pc, #644]	; (8002b14 <menu_manager+0xdf4>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
				  goto page1;
 8002894:	f7ff ba54 	b.w	8001d40 <menu_manager+0x20>
			while( select_second)
 8002898:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <menu_manager+0xdf8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f af27 	bne.w	80026f0 <menu_manager+0x9d0>
			  }

}

	            delay(100000);
 80028a2:	489e      	ldr	r0, [pc, #632]	; (8002b1c <menu_manager+0xdfc>)
 80028a4:	f7fe fd2c 	bl	8001300 <delay>
while( select_tf)
 80028a8:	e055      	b.n	8002956 <menu_manager+0xc36>
	 {
				delay(50000);
 80028aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028ae:	f7fe fd27 	bl	8001300 <delay>
				uint8_t temp = keypad_scan();
 80028b2:	f001 fbbf 	bl	8004034 <keypad_scan>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


				if(temp == 7)
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c0:	2b07      	cmp	r3, #7
 80028c2:	d116      	bne.n	80028f2 <menu_manager+0xbd2>
			   {
					tf=0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 80028ca:	4b95      	ldr	r3, [pc, #596]	; (8002b20 <menu_manager+0xe00>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	210c      	movs	r1, #12
 80028d2:	2002      	movs	r0, #2
 80028d4:	f7fd ff16 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data('A', I2C_1.pI2Cx);
 80028d8:	4b91      	ldr	r3, [pc, #580]	; (8002b20 <menu_manager+0xe00>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	2041      	movs	r0, #65	; 0x41
 80028e0:	f7fd fea0 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80028e4:	4b8e      	ldr	r3, [pc, #568]	; (8002b20 <menu_manager+0xe00>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	204d      	movs	r0, #77	; 0x4d
 80028ec:	f7fd fe9a 	bl	8000624 <Lcd_Send_Data>
 80028f0:	e031      	b.n	8002956 <menu_manager+0xc36>

			   }
			  else if(temp == 1)
 80028f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d116      	bne.n	8002928 <menu_manager+0xc08>
			   {
				  tf=1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 8002900:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <menu_manager+0xe00>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	210c      	movs	r1, #12
 8002908:	2002      	movs	r0, #2
 800290a:	f7fd fefb 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data('P', I2C_1.pI2Cx);
 800290e:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <menu_manager+0xe00>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	2050      	movs	r0, #80	; 0x50
 8002916:	f7fd fe85 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data('M', I2C_1.pI2Cx);
 800291a:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <menu_manager+0xe00>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	204d      	movs	r0, #77	; 0x4d
 8002922:	f7fd fe7f 	bl	8000624 <Lcd_Send_Data>
 8002926:	e016      	b.n	8002956 <menu_manager+0xc36>
			   }
			  else if(temp == 3)
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292c:	2b03      	cmp	r3, #3
 800292e:	d106      	bne.n	800293e <menu_manager+0xc1e>
			  {
				  select_tf =0;
 8002930:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <menu_manager+0xe04>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
				  temp=0;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800293c:	e00b      	b.n	8002956 <menu_manager+0xc36>
			  }

			  else if(temp == 8)
 800293e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002942:	2b08      	cmp	r3, #8
 8002944:	d107      	bne.n	8002956 <menu_manager+0xc36>
			  {
				  temp=0;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  select_mode =1;
 800294c:	4b71      	ldr	r3, [pc, #452]	; (8002b14 <menu_manager+0xdf4>)
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
				  goto page1;
 8002952:	f7ff b9f5 	b.w	8001d40 <menu_manager+0x20>
while( select_tf)
 8002956:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <menu_manager+0xe04>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1a5      	bne.n	80028aa <menu_manager+0xb8a>
 }




	    set_rtc_time(hh, mm, ss, tf);
 800295e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8002962:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8002966:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800296a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800296e:	f7ff f983 	bl	8001c78 <set_rtc_time>


}


  if(mode == 1)
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <menu_manager+0xe08>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	f040 83db 	bne.w	8003132 <menu_manager+0x1412>
  {
	  lcd_clear_display(I2C_1.pI2Cx);
 800297c:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <menu_manager+0xe00>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fee8 	bl	8000756 <lcd_clear_display>
	  lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8002986:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <menu_manager+0xe00>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	2101      	movs	r1, #1
 800298e:	2001      	movs	r0, #1
 8002990:	f7fd feb8 	bl	8000704 <lcd_set_cursor>
	  Lcd_Send_Data('D', I2C_1.pI2Cx);
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <menu_manager+0xe00>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	2044      	movs	r0, #68	; 0x44
 800299c:	f7fd fe42 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('D', I2C_1.pI2Cx);
 80029a0:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <menu_manager+0xe00>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	2044      	movs	r0, #68	; 0x44
 80029a8:	f7fd fe3c 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <menu_manager+0xe00>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	2020      	movs	r0, #32
 80029b4:	f7fd fe36 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <menu_manager+0xe00>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	203a      	movs	r0, #58	; 0x3a
 80029c0:	f7fd fe30 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80029c4:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <menu_manager+0xe00>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7fd fe2a 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <menu_manager+0xe00>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	2030      	movs	r0, #48	; 0x30
 80029d8:	f7fd fe24 	bl	8000624 <Lcd_Send_Data>

	  lcd_set_cursor(1, 8, I2C_1.pI2Cx);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <menu_manager+0xe00>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	2108      	movs	r1, #8
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fd fe8d 	bl	8000704 <lcd_set_cursor>
	  Lcd_Send_Data('Y', I2C_1.pI2Cx);
 80029ea:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <menu_manager+0xe00>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	2059      	movs	r0, #89	; 0x59
 80029f2:	f7fd fe17 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('Y', I2C_1.pI2Cx);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <menu_manager+0xe00>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	2059      	movs	r0, #89	; 0x59
 80029fe:	f7fd fe11 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <menu_manager+0xe00>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	2020      	movs	r0, #32
 8002a0a:	f7fd fe0b 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <menu_manager+0xe00>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	203a      	movs	r0, #58	; 0x3a
 8002a16:	f7fd fe05 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <menu_manager+0xe00>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2030      	movs	r0, #48	; 0x30
 8002a22:	f7fd fdff 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <menu_manager+0xe00>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	2030      	movs	r0, #48	; 0x30
 8002a2e:	f7fd fdf9 	bl	8000624 <Lcd_Send_Data>

	  lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <menu_manager+0xe00>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f7fd fe62 	bl	8000704 <lcd_set_cursor>
	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8002a40:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <menu_manager+0xe00>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	204d      	movs	r0, #77	; 0x4d
 8002a48:	f7fd fdec 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <menu_manager+0xe00>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	204d      	movs	r0, #77	; 0x4d
 8002a54:	f7fd fde6 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <menu_manager+0xe00>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2020      	movs	r0, #32
 8002a60:	f7fd fde0 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <menu_manager+0xe00>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	203a      	movs	r0, #58	; 0x3a
 8002a6c:	f7fd fdda 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <menu_manager+0xe00>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	2030      	movs	r0, #48	; 0x30
 8002a78:	f7fd fdd4 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <menu_manager+0xe00>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2030      	movs	r0, #48	; 0x30
 8002a84:	f7fd fdce 	bl	8000624 <Lcd_Send_Data>

	  lcd_set_cursor(2, 8, I2C_1.pI2Cx);
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <menu_manager+0xe00>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2108      	movs	r1, #8
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7fd fe37 	bl	8000704 <lcd_set_cursor>
	  Lcd_Send_Data('D', I2C_1.pI2Cx);
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <menu_manager+0xe00>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	2044      	movs	r0, #68	; 0x44
 8002a9e:	f7fd fdc1 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('A', I2C_1.pI2Cx);
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <menu_manager+0xe00>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2041      	movs	r0, #65	; 0x41
 8002aaa:	f7fd fdbb 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <menu_manager+0xe00>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	2020      	movs	r0, #32
 8002ab6:	f7fd fdb5 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <menu_manager+0xe00>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	203a      	movs	r0, #58	; 0x3a
 8002ac2:	f7fd fdaf 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <menu_manager+0xe00>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	2053      	movs	r0, #83	; 0x53
 8002ace:	f7fd fda9 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('U', I2C_1.pI2Cx);
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <menu_manager+0xe00>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2055      	movs	r0, #85	; 0x55
 8002ada:	f7fd fda3 	bl	8000624 <Lcd_Send_Data>
	  Lcd_Send_Data('N', I2C_1.pI2Cx);
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <menu_manager+0xe00>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	204e      	movs	r0, #78	; 0x4e
 8002ae6:	f7fd fd9d 	bl	8000624 <Lcd_Send_Data>

	  lcd_set_cursor(1, 6, I2C_1.pI2Cx);
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <menu_manager+0xe00>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	2106      	movs	r1, #6
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7fd fe06 	bl	8000704 <lcd_set_cursor>
	 signed char dd=0,mm=0,yy=0,da=0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	    while(select_date)
 8002b10:	e0ad      	b.n	8002c6e <menu_manager+0xf4e>
 8002b12:	bf00      	nop
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000006 	.word	0x20000006
 8002b1c:	000186a0 	.word	0x000186a0
 8002b20:	20000050 	.word	0x20000050
 8002b24:	20000007 	.word	0x20000007
 8002b28:	2000004c 	.word	0x2000004c
	    {


	  	               delay(50000);
 8002b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b30:	f7fe fbe6 	bl	8001300 <delay>
	  	    		  uint8_t temp = keypad_scan();
 8002b34:	f001 fa7e 	bl	8004034 <keypad_scan>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f887 3020 	strb.w	r3, [r7, #32]


	  	    		  if(temp == 7)
 8002b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d13d      	bne.n	8002bc2 <menu_manager+0xea2>
	  	    		  {
	  	    			  dd++;
 8002b46:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	    			  dd=dd>0 ?dd:0;
 8002b54:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	    			  lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 8002b60:	4bab      	ldr	r3, [pc, #684]	; (8002e10 <menu_manager+0x10f0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2105      	movs	r1, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7fd fdcb 	bl	8000704 <lcd_set_cursor>
	  	    			  Lcd_Send_Data((dd/10)+48, I2C_1.pI2Cx);
 8002b6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b72:	4aa8      	ldr	r2, [pc, #672]	; (8002e14 <menu_manager+0x10f4>)
 8002b74:	fb82 1203 	smull	r1, r2, r2, r3
 8002b78:	1092      	asrs	r2, r2, #2
 8002b7a:	17db      	asrs	r3, r3, #31
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3330      	adds	r3, #48	; 0x30
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4ba2      	ldr	r3, [pc, #648]	; (8002e10 <menu_manager+0x10f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7fd fd49 	bl	8000624 <Lcd_Send_Data>
	  	    			  Lcd_Send_Data((dd%10)+48, I2C_1.pI2Cx);
 8002b92:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002b96:	4b9f      	ldr	r3, [pc, #636]	; (8002e14 <menu_manager+0x10f4>)
 8002b98:	fb83 1302 	smull	r1, r3, r3, r2
 8002b9c:	1099      	asrs	r1, r3, #2
 8002b9e:	17d3      	asrs	r3, r2, #31
 8002ba0:	1ac9      	subs	r1, r1, r3
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3330      	adds	r3, #48	; 0x30
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <menu_manager+0x10f0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f7fd fd32 	bl	8000624 <Lcd_Send_Data>
 8002bc0:	e055      	b.n	8002c6e <menu_manager+0xf4e>

	  	    		  }
	  	    		  else if(temp == 1)
 8002bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d13d      	bne.n	8002c46 <menu_manager+0xf26>
	  	    		  {
	  	    		     	dd--;
 8002bca:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	    		     	 dd=dd>0 ?dd:0;
 8002bd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002bdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	    		        lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <menu_manager+0x10f0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	2105      	movs	r1, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fd fd89 	bl	8000704 <lcd_set_cursor>
	  	    		     	Lcd_Send_Data((dd/10)+48, I2C_1.pI2Cx);
 8002bf2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002bf6:	4a87      	ldr	r2, [pc, #540]	; (8002e14 <menu_manager+0x10f4>)
 8002bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bfc:	1092      	asrs	r2, r2, #2
 8002bfe:	17db      	asrs	r3, r3, #31
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3330      	adds	r3, #48	; 0x30
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b81      	ldr	r3, [pc, #516]	; (8002e10 <menu_manager+0x10f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7fd fd07 	bl	8000624 <Lcd_Send_Data>
	  	    		     	Lcd_Send_Data((dd%10)+48, I2C_1.pI2Cx);
 8002c16:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002c1a:	4b7e      	ldr	r3, [pc, #504]	; (8002e14 <menu_manager+0x10f4>)
 8002c1c:	fb83 1302 	smull	r1, r3, r3, r2
 8002c20:	1099      	asrs	r1, r3, #2
 8002c22:	17d3      	asrs	r3, r2, #31
 8002c24:	1ac9      	subs	r1, r1, r3
 8002c26:	460b      	mov	r3, r1
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3330      	adds	r3, #48	; 0x30
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b75      	ldr	r3, [pc, #468]	; (8002e10 <menu_manager+0x10f0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7fd fcf0 	bl	8000624 <Lcd_Send_Data>
 8002c44:	e013      	b.n	8002c6e <menu_manager+0xf4e>

	  	    		   }
	  	    		  else if(temp == 3)
 8002c46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d106      	bne.n	8002c5c <menu_manager+0xf3c>
	  	    		  {

	  	    			  select_date =0;
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <menu_manager+0x10f8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
	  	    			  temp=0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3020 	strb.w	r3, [r7, #32]
 8002c5a:	e008      	b.n	8002c6e <menu_manager+0xf4e>

	  	    		  }

	  	    		  else if(temp == 8)
 8002c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <menu_manager+0xf4e>
	  	    		  {
	  	    			  temp =0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3020 	strb.w	r3, [r7, #32]
	  	    			  goto page1;
 8002c6a:	f7ff b869 	b.w	8001d40 <menu_manager+0x20>
	    while(select_date)
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <menu_manager+0x10f8>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f47f af5a 	bne.w	8002b2c <menu_manager+0xe0c>
	  	    		  }

	    }

	  	    	  delay(100000);
 8002c78:	4868      	ldr	r0, [pc, #416]	; (8002e1c <menu_manager+0x10fc>)
 8002c7a:	f7fe fb41 	bl	8001300 <delay>

	    while( select_month)
 8002c7e:	e0bd      	b.n	8002dfc <menu_manager+0x10dc>
	    {
				 delay(50000);
 8002c80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c84:	f7fe fb3c 	bl	8001300 <delay>
				 uint8_t temp = keypad_scan();
 8002c88:	f001 f9d4 	bl	8004034 <keypad_scan>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


				 if(temp == 7)
 8002c92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c96:	2b07      	cmp	r3, #7
 8002c98:	d148      	bne.n	8002d2c <menu_manager+0x100c>
				   {
					  mm++;
 8002c9a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  mm=mm>0 ?mm:0;
 8002ca8:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  mm %=32;
 8002cb4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002cb8:	425a      	negs	r2, r3
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	f002 021f 	and.w	r2, r2, #31
 8002cc2:	bf58      	it	pl
 8002cc4:	4253      	negpl	r3, r2
 8002cc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 8002cca:	4b51      	ldr	r3, [pc, #324]	; (8002e10 <menu_manager+0x10f0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f7fd fd16 	bl	8000704 <lcd_set_cursor>
					  Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 8002cd8:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <menu_manager+0x10f4>)
 8002cde:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce2:	1092      	asrs	r2, r2, #2
 8002ce4:	17db      	asrs	r3, r3, #31
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3330      	adds	r3, #48	; 0x30
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <menu_manager+0x10f0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f7fd fc94 	bl	8000624 <Lcd_Send_Data>
					  Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8002cfc:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002d00:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <menu_manager+0x10f4>)
 8002d02:	fb83 1302 	smull	r1, r3, r3, r2
 8002d06:	1099      	asrs	r1, r3, #2
 8002d08:	17d3      	asrs	r3, r2, #31
 8002d0a:	1ac9      	subs	r1, r1, r3
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3330      	adds	r3, #48	; 0x30
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <menu_manager+0x10f0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fd fc7d 	bl	8000624 <Lcd_Send_Data>
 8002d2a:	e067      	b.n	8002dfc <menu_manager+0x10dc>

					}
				  else if(temp == 1)
 8002d2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d14c      	bne.n	8002dce <menu_manager+0x10ae>
					{
					  mm--;
 8002d34:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  mm=mm>0?mm:0;
 8002d42:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002d46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  mm %=31;
 8002d4e:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002d52:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <menu_manager+0x1100>)
 8002d54:	fb83 1302 	smull	r1, r3, r3, r2
 8002d58:	4413      	add	r3, r2
 8002d5a:	1119      	asrs	r1, r3, #4
 8002d5c:	17d3      	asrs	r3, r2, #31
 8002d5e:	1ac9      	subs	r1, r1, r3
 8002d60:	460b      	mov	r3, r1
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	1a5b      	subs	r3, r3, r1
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					  lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <menu_manager+0x10f0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	2105      	movs	r1, #5
 8002d74:	2002      	movs	r0, #2
 8002d76:	f7fd fcc5 	bl	8000704 <lcd_set_cursor>
					  Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 8002d7a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002d7e:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <menu_manager+0x10f4>)
 8002d80:	fb82 1203 	smull	r1, r2, r2, r3
 8002d84:	1092      	asrs	r2, r2, #2
 8002d86:	17db      	asrs	r3, r3, #31
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3330      	adds	r3, #48	; 0x30
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <menu_manager+0x10f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f7fd fc43 	bl	8000624 <Lcd_Send_Data>
					  Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8002d9e:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <menu_manager+0x10f4>)
 8002da4:	fb83 1302 	smull	r1, r3, r3, r2
 8002da8:	1099      	asrs	r1, r3, #2
 8002daa:	17d3      	asrs	r3, r2, #31
 8002dac:	1ac9      	subs	r1, r1, r3
 8002dae:	460b      	mov	r3, r1
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3330      	adds	r3, #48	; 0x30
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <menu_manager+0x10f0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fd fc2c 	bl	8000624 <Lcd_Send_Data>
 8002dcc:	e016      	b.n	8002dfc <menu_manager+0x10dc>

					}
				  else if(temp == 3)
 8002dce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d106      	bne.n	8002de4 <menu_manager+0x10c4>
				  {

					  select_month =0;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <menu_manager+0x1104>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
					  temp=0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002de2:	e00b      	b.n	8002dfc <menu_manager+0x10dc>
				   }
				  else if(temp == 8)
 8002de4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d107      	bne.n	8002dfc <menu_manager+0x10dc>
				  {
					  temp=0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					  select_mode =1;
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <menu_manager+0x1108>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
					  goto page1;
 8002df8:	f7fe bfa2 	b.w	8001d40 <menu_manager+0x20>
	    while( select_month)
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <menu_manager+0x1104>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f af3d 	bne.w	8002c80 <menu_manager+0xf60>

				  }

	  }
	  	    		  delay(100000);
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <menu_manager+0x10fc>)
 8002e08:	f7fe fa7a 	bl	8001300 <delay>

	  while( select_year)
 8002e0c:	e0b2      	b.n	8002f74 <menu_manager+0x1254>
 8002e0e:	bf00      	nop
 8002e10:	20000050 	.word	0x20000050
 8002e14:	66666667 	.word	0x66666667
 8002e18:	2000000a 	.word	0x2000000a
 8002e1c:	000186a0 	.word	0x000186a0
 8002e20:	84210843 	.word	0x84210843
 8002e24:	2000000b 	.word	0x2000000b
 8002e28:	20000008 	.word	0x20000008
	  	 {
					delay(50000);
 8002e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e30:	f7fe fa66 	bl	8001300 <delay>
					uint8_t temp = keypad_scan();
 8002e34:	f001 f8fe 	bl	8004034 <keypad_scan>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


					if(temp == 7)
 8002e3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e42:	2b07      	cmp	r3, #7
 8002e44:	d13d      	bne.n	8002ec2 <menu_manager+0x11a2>
				   {
						yy++;
 8002e46:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  yy=yy>0 ?yy:0;
 8002e54:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002e58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002e5c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

					  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 8002e60:	4ba4      	ldr	r3, [pc, #656]	; (80030f4 <menu_manager+0x13d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	210c      	movs	r1, #12
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fd fc4b 	bl	8000704 <lcd_set_cursor>
					  Lcd_Send_Data((yy/10)+48, I2C_1.pI2Cx);
 8002e6e:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002e72:	4aa1      	ldr	r2, [pc, #644]	; (80030f8 <menu_manager+0x13d8>)
 8002e74:	fb82 1203 	smull	r1, r2, r2, r3
 8002e78:	1092      	asrs	r2, r2, #2
 8002e7a:	17db      	asrs	r3, r3, #31
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3330      	adds	r3, #48	; 0x30
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b9b      	ldr	r3, [pc, #620]	; (80030f4 <menu_manager+0x13d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f7fd fbc9 	bl	8000624 <Lcd_Send_Data>
					  Lcd_Send_Data((yy%10)+48, I2C_1.pI2Cx);
 8002e92:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8002e96:	4b98      	ldr	r3, [pc, #608]	; (80030f8 <menu_manager+0x13d8>)
 8002e98:	fb83 1302 	smull	r1, r3, r3, r2
 8002e9c:	1099      	asrs	r1, r3, #2
 8002e9e:	17d3      	asrs	r3, r2, #31
 8002ea0:	1ac9      	subs	r1, r1, r3
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3330      	adds	r3, #48	; 0x30
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <menu_manager+0x13d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7fd fbb2 	bl	8000624 <Lcd_Send_Data>
 8002ec0:	e058      	b.n	8002f74 <menu_manager+0x1254>

					}
				  else if(temp == 1)
 8002ec2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d13d      	bne.n	8002f46 <menu_manager+0x1226>
					{
					  yy--;
 8002eca:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  yy=yy>0 ?yy:0;
 8002ed8:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002edc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ee0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 8002ee4:	4b83      	ldr	r3, [pc, #524]	; (80030f4 <menu_manager+0x13d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	210c      	movs	r1, #12
 8002eec:	2001      	movs	r0, #1
 8002eee:	f7fd fc09 	bl	8000704 <lcd_set_cursor>
					  Lcd_Send_Data((yy/10)+48, I2C_1.pI2Cx);
 8002ef2:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8002ef6:	4a80      	ldr	r2, [pc, #512]	; (80030f8 <menu_manager+0x13d8>)
 8002ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8002efc:	1092      	asrs	r2, r2, #2
 8002efe:	17db      	asrs	r3, r3, #31
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3330      	adds	r3, #48	; 0x30
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <menu_manager+0x13d4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fd fb87 	bl	8000624 <Lcd_Send_Data>
					  Lcd_Send_Data((yy%10)+48, I2C_1.pI2Cx);
 8002f16:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8002f1a:	4b77      	ldr	r3, [pc, #476]	; (80030f8 <menu_manager+0x13d8>)
 8002f1c:	fb83 1302 	smull	r1, r3, r3, r2
 8002f20:	1099      	asrs	r1, r3, #2
 8002f22:	17d3      	asrs	r3, r2, #31
 8002f24:	1ac9      	subs	r1, r1, r3
 8002f26:	460b      	mov	r3, r1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3330      	adds	r3, #48	; 0x30
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b6e      	ldr	r3, [pc, #440]	; (80030f4 <menu_manager+0x13d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7fd fb70 	bl	8000624 <Lcd_Send_Data>
 8002f44:	e016      	b.n	8002f74 <menu_manager+0x1254>
					}
				  else if(temp == 3)
 8002f46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d106      	bne.n	8002f5c <menu_manager+0x123c>
				  {
					  select_year =0;
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <menu_manager+0x13dc>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
					  temp=0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f5a:	e00b      	b.n	8002f74 <menu_manager+0x1254>
				  }


				  else if(temp == 8)
 8002f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d107      	bne.n	8002f74 <menu_manager+0x1254>
				  {
					  temp=0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					  select_mode =1;
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <menu_manager+0x13e0>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
					  goto page1;
 8002f70:	f7fe bee6 	b.w	8001d40 <menu_manager+0x20>
	  while( select_year)
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <menu_manager+0x13dc>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f af57 	bne.w	8002e2c <menu_manager+0x110c>
				  }

	  }

	  	            delay(100000);
 8002f7e:	4861      	ldr	r0, [pc, #388]	; (8003104 <menu_manager+0x13e4>)
 8002f80:	f7fe f9be 	bl	8001300 <delay>
	  while( select_day)
 8002f84:	e0c6      	b.n	8003114 <menu_manager+0x13f4>
	  	 {
					delay(50000);
 8002f86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f8a:	f7fe f9b9 	bl	8001300 <delay>
					uint8_t temp = keypad_scan();
 8002f8e:	f001 f851 	bl	8004034 <keypad_scan>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


			if(temp == 7)
 8002f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d146      	bne.n	800302e <menu_manager+0x130e>
		   {

			  da++;
 8002fa0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

			  da %=7;
 8002fae:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8002fb2:	4b55      	ldr	r3, [pc, #340]	; (8003108 <menu_manager+0x13e8>)
 8002fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8002fb8:	4413      	add	r3, r2
 8002fba:	1099      	asrs	r1, r3, #2
 8002fbc:	17d3      	asrs	r3, r2, #31
 8002fbe:	1ac9      	subs	r1, r1, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  da=da>0?da:0;
 8002fcc:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8002fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002fd4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 8002fd8:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <menu_manager+0x13d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	210c      	movs	r1, #12
 8002fe0:	2002      	movs	r0, #2
 8002fe2:	f7fd fb8f 	bl	8000704 <lcd_set_cursor>


			Lcd_Send_Data(days[da*4],I2C_1.pI2Cx);
 8002fe6:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4a47      	ldr	r2, [pc, #284]	; (800310c <menu_manager+0x13ec>)
 8002fee:	5cd2      	ldrb	r2, [r2, r3]
 8002ff0:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <menu_manager+0x13d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f7fd fb14 	bl	8000624 <Lcd_Send_Data>
			Lcd_Send_Data(days[(da*4)+1], I2C_1.pI2Cx);
 8002ffc:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	3301      	adds	r3, #1
 8003004:	4a41      	ldr	r2, [pc, #260]	; (800310c <menu_manager+0x13ec>)
 8003006:	5cd2      	ldrb	r2, [r2, r3]
 8003008:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <menu_manager+0x13d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7fd fb08 	bl	8000624 <Lcd_Send_Data>
			Lcd_Send_Data(days[(da*4)+2], I2C_1.pI2Cx);
 8003014:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	4a3b      	ldr	r2, [pc, #236]	; (800310c <menu_manager+0x13ec>)
 800301e:	5cd2      	ldrb	r2, [r2, r3]
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <menu_manager+0x13d4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f7fd fafc 	bl	8000624 <Lcd_Send_Data>
 800302c:	e072      	b.n	8003114 <menu_manager+0x13f4>

			}
		  else if(temp == 1)
 800302e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003032:	2b01      	cmp	r3, #1
 8003034:	d146      	bne.n	80030c4 <menu_manager+0x13a4>
			{
			  da--;
 8003036:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

			  da %=7;
 8003044:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8003048:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <menu_manager+0x13e8>)
 800304a:	fb83 1302 	smull	r1, r3, r3, r2
 800304e:	4413      	add	r3, r2
 8003050:	1099      	asrs	r1, r3, #2
 8003052:	17d3      	asrs	r3, r2, #31
 8003054:	1ac9      	subs	r1, r1, r3
 8003056:	460b      	mov	r3, r1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a5b      	subs	r3, r3, r1
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  da=da>0?da:0;
 8003062:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8003066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800306a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <menu_manager+0x13d4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	210c      	movs	r1, #12
 8003076:	2002      	movs	r0, #2
 8003078:	f7fd fb44 	bl	8000704 <lcd_set_cursor>

			  Lcd_Send_Data(days[da*4],I2C_1.pI2Cx);
 800307c:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <menu_manager+0x13ec>)
 8003084:	5cd2      	ldrb	r2, [r2, r3]
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <menu_manager+0x13d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7fd fac9 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data(days[(da*4)+1], I2C_1.pI2Cx);
 8003092:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3301      	adds	r3, #1
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <menu_manager+0x13ec>)
 800309c:	5cd2      	ldrb	r2, [r2, r3]
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <menu_manager+0x13d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f7fd fabd 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data(days[(da*4)+2], I2C_1.pI2Cx);
 80030aa:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <menu_manager+0x13ec>)
 80030b4:	5cd2      	ldrb	r2, [r2, r3]
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <menu_manager+0x13d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7fd fab1 	bl	8000624 <Lcd_Send_Data>
 80030c2:	e027      	b.n	8003114 <menu_manager+0x13f4>
			}
		  else if(temp == 3)
 80030c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d106      	bne.n	80030da <menu_manager+0x13ba>
			  {
				  select_day =0;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <menu_manager+0x13f0>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
				  temp=0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d8:	e01c      	b.n	8003114 <menu_manager+0x13f4>
			  }

		  else if(temp == 8)
 80030da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d118      	bne.n	8003114 <menu_manager+0x13f4>
			  {
				  temp=0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  select_mode =1;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <menu_manager+0x13e0>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
				  goto page1;
 80030ee:	f7fe be27 	b.w	8001d40 <menu_manager+0x20>
 80030f2:	bf00      	nop
 80030f4:	20000050 	.word	0x20000050
 80030f8:	66666667 	.word	0x66666667
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	20000008 	.word	0x20000008
 8003104:	000186a0 	.word	0x000186a0
 8003108:	92492493 	.word	0x92492493
 800310c:	20000014 	.word	0x20000014
 8003110:	2000000d 	.word	0x2000000d
	  while( select_day)
 8003114:	4bc5      	ldr	r3, [pc, #788]	; (800342c <menu_manager+0x170c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af34 	bne.w	8002f86 <menu_manager+0x1266>
	   }




	 set_rtc_date(da,dd,mm,yy);
 800311e:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003122:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003126:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800312a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800312e:	f7fe fdc7 	bl	8001cc0 <set_rtc_date>



 }

  if(mode == 2)
 8003132:	4bbf      	ldr	r3, [pc, #764]	; (8003430 <menu_manager+0x1710>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b02      	cmp	r3, #2
 8003138:	f040 8387 	bne.w	800384a <menu_manager+0x1b2a>
    {


	  	    	  lcd_clear_display(I2C_1.pI2Cx);
 800313c:	4bbd      	ldr	r3, [pc, #756]	; (8003434 <menu_manager+0x1714>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fb08 	bl	8000756 <lcd_clear_display>
	  	    	  lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 8003146:	4bbb      	ldr	r3, [pc, #748]	; (8003434 <menu_manager+0x1714>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	2101      	movs	r1, #1
 800314e:	2001      	movs	r0, #1
 8003150:	f7fd fad8 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 8003154:	4bb7      	ldr	r3, [pc, #732]	; (8003434 <menu_manager+0x1714>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	2048      	movs	r0, #72	; 0x48
 800315c:	f7fd fa62 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 8003160:	4bb4      	ldr	r3, [pc, #720]	; (8003434 <menu_manager+0x1714>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	2048      	movs	r0, #72	; 0x48
 8003168:	f7fd fa5c 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800316c:	4bb1      	ldr	r3, [pc, #708]	; (8003434 <menu_manager+0x1714>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	2020      	movs	r0, #32
 8003174:	f7fd fa56 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8003178:	4bae      	ldr	r3, [pc, #696]	; (8003434 <menu_manager+0x1714>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	203a      	movs	r0, #58	; 0x3a
 8003180:	f7fd fa50 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8003184:	4bab      	ldr	r3, [pc, #684]	; (8003434 <menu_manager+0x1714>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	2030      	movs	r0, #48	; 0x30
 800318c:	f7fd fa4a 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8003190:	4ba8      	ldr	r3, [pc, #672]	; (8003434 <menu_manager+0x1714>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	2030      	movs	r0, #48	; 0x30
 8003198:	f7fd fa44 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(1, 8, I2C_1.pI2Cx);
 800319c:	4ba5      	ldr	r3, [pc, #660]	; (8003434 <menu_manager+0x1714>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	2108      	movs	r1, #8
 80031a4:	2001      	movs	r0, #1
 80031a6:	f7fd faad 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 80031aa:	4ba2      	ldr	r3, [pc, #648]	; (8003434 <menu_manager+0x1714>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	2053      	movs	r0, #83	; 0x53
 80031b2:	f7fd fa37 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 80031b6:	4b9f      	ldr	r3, [pc, #636]	; (8003434 <menu_manager+0x1714>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	2053      	movs	r0, #83	; 0x53
 80031be:	f7fd fa31 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 80031c2:	4b9c      	ldr	r3, [pc, #624]	; (8003434 <menu_manager+0x1714>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	2020      	movs	r0, #32
 80031ca:	f7fd fa2b 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 80031ce:	4b99      	ldr	r3, [pc, #612]	; (8003434 <menu_manager+0x1714>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	203a      	movs	r0, #58	; 0x3a
 80031d6:	f7fd fa25 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80031da:	4b96      	ldr	r3, [pc, #600]	; (8003434 <menu_manager+0x1714>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	2030      	movs	r0, #48	; 0x30
 80031e2:	f7fd fa1f 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80031e6:	4b93      	ldr	r3, [pc, #588]	; (8003434 <menu_manager+0x1714>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	2030      	movs	r0, #48	; 0x30
 80031ee:	f7fd fa19 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 80031f2:	4b90      	ldr	r3, [pc, #576]	; (8003434 <menu_manager+0x1714>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	2101      	movs	r1, #1
 80031fa:	2002      	movs	r0, #2
 80031fc:	f7fd fa82 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003200:	4b8c      	ldr	r3, [pc, #560]	; (8003434 <menu_manager+0x1714>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	204d      	movs	r0, #77	; 0x4d
 8003208:	f7fd fa0c 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 800320c:	4b89      	ldr	r3, [pc, #548]	; (8003434 <menu_manager+0x1714>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	204d      	movs	r0, #77	; 0x4d
 8003214:	f7fd fa06 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8003218:	4b86      	ldr	r3, [pc, #536]	; (8003434 <menu_manager+0x1714>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	2020      	movs	r0, #32
 8003220:	f7fd fa00 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8003224:	4b83      	ldr	r3, [pc, #524]	; (8003434 <menu_manager+0x1714>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	203a      	movs	r0, #58	; 0x3a
 800322c:	f7fd f9fa 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8003230:	4b80      	ldr	r3, [pc, #512]	; (8003434 <menu_manager+0x1714>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	2030      	movs	r0, #48	; 0x30
 8003238:	f7fd f9f4 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 800323c:	4b7d      	ldr	r3, [pc, #500]	; (8003434 <menu_manager+0x1714>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	2030      	movs	r0, #48	; 0x30
 8003244:	f7fd f9ee 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(2, 8, I2C_1.pI2Cx);
 8003248:	4b7a      	ldr	r3, [pc, #488]	; (8003434 <menu_manager+0x1714>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	2108      	movs	r1, #8
 8003250:	2002      	movs	r0, #2
 8003252:	f7fd fa57 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('T', I2C_1.pI2Cx);
 8003256:	4b77      	ldr	r3, [pc, #476]	; (8003434 <menu_manager+0x1714>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	2054      	movs	r0, #84	; 0x54
 800325e:	f7fd f9e1 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('F', I2C_1.pI2Cx);
 8003262:	4b74      	ldr	r3, [pc, #464]	; (8003434 <menu_manager+0x1714>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4619      	mov	r1, r3
 8003268:	2046      	movs	r0, #70	; 0x46
 800326a:	f7fd f9db 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 800326e:	4b71      	ldr	r3, [pc, #452]	; (8003434 <menu_manager+0x1714>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	2020      	movs	r0, #32
 8003276:	f7fd f9d5 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data(':', I2C_1.pI2Cx);
 800327a:	4b6e      	ldr	r3, [pc, #440]	; (8003434 <menu_manager+0x1714>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	203a      	movs	r0, #58	; 0x3a
 8003282:	f7fd f9cf 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('A', I2C_1.pI2Cx);
 8003286:	4b6b      	ldr	r3, [pc, #428]	; (8003434 <menu_manager+0x1714>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	2041      	movs	r0, #65	; 0x41
 800328e:	f7fd f9c9 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003292:	4b68      	ldr	r3, [pc, #416]	; (8003434 <menu_manager+0x1714>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	204d      	movs	r0, #77	; 0x4d
 800329a:	f7fd f9c3 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(1, 6, I2C_1.pI2Cx);
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <menu_manager+0x1714>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	2106      	movs	r1, #6
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7fd fa2c 	bl	8000704 <lcd_set_cursor>
	  	    	signed  char hh=0,mm=0,ss=0,tf=0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	  while(alrm1_hh)
 80032c4:	e0c5      	b.n	8003452 <menu_manager+0x1732>
	  {


			  delay(50000);
 80032c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032ca:	f7fe f819 	bl	8001300 <delay>
			  uint8_t temp = keypad_scan();
 80032ce:	f000 feb1 	bl	8004034 <keypad_scan>
 80032d2:	4603      	mov	r3, r0
 80032d4:	773b      	strb	r3, [r7, #28]


		  if(temp == 7)
 80032d6:	7f3b      	ldrb	r3, [r7, #28]
 80032d8:	2b07      	cmp	r3, #7
 80032da:	d14d      	bne.n	8003378 <menu_manager+0x1658>
		  {
			  hh++;
 80032dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  hh=hh>0 ?hh:0;
 80032ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80032f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  hh %=13;
 80032f6:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 80032fa:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <menu_manager+0x1718>)
 80032fc:	fb83 1302 	smull	r1, r3, r3, r2
 8003300:	1099      	asrs	r1, r3, #2
 8003302:	17d3      	asrs	r3, r2, #31
 8003304:	1ac9      	subs	r1, r1, r3
 8003306:	460b      	mov	r3, r1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	440b      	add	r3, r1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <menu_manager+0x1714>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	2105      	movs	r1, #5
 800331e:	2001      	movs	r0, #1
 8003320:	f7fd f9f0 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 8003324:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003328:	4a44      	ldr	r2, [pc, #272]	; (800343c <menu_manager+0x171c>)
 800332a:	fb82 1203 	smull	r1, r2, r2, r3
 800332e:	1092      	asrs	r2, r2, #2
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b25b      	sxtb	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3330      	adds	r3, #48	; 0x30
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <menu_manager+0x1714>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fd f96e 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 8003348:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <menu_manager+0x171c>)
 800334e:	fb83 1302 	smull	r1, r3, r3, r2
 8003352:	1099      	asrs	r1, r3, #2
 8003354:	17d3      	asrs	r3, r2, #31
 8003356:	1ac9      	subs	r1, r1, r3
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b25b      	sxtb	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3330      	adds	r3, #48	; 0x30
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b32      	ldr	r3, [pc, #200]	; (8003434 <menu_manager+0x1714>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7fd f957 	bl	8000624 <Lcd_Send_Data>
 8003376:	e06c      	b.n	8003452 <menu_manager+0x1732>

		  }
		  else if(temp == 1)
 8003378:	7f3b      	ldrb	r3, [r7, #28]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d14d      	bne.n	800341a <menu_manager+0x16fa>
		  {
				hh--;
 800337e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				hh=hh>0 ?hh:0;
 800338c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				hh%=13;
 8003398:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <menu_manager+0x1718>)
 800339e:	fb83 1302 	smull	r1, r3, r3, r2
 80033a2:	1099      	asrs	r1, r3, #2
 80033a4:	17d3      	asrs	r3, r2, #31
 80033a6:	1ac9      	subs	r1, r1, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	440b      	add	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <menu_manager+0x1714>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	2105      	movs	r1, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7fd f99f 	bl	8000704 <lcd_set_cursor>
				Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 80033c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <menu_manager+0x171c>)
 80033cc:	fb82 1203 	smull	r1, r2, r2, r3
 80033d0:	1092      	asrs	r2, r2, #2
 80033d2:	17db      	asrs	r3, r3, #31
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3330      	adds	r3, #48	; 0x30
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <menu_manager+0x1714>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7fd f91d 	bl	8000624 <Lcd_Send_Data>
				Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 80033ea:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <menu_manager+0x171c>)
 80033f0:	fb83 1302 	smull	r1, r3, r3, r2
 80033f4:	1099      	asrs	r1, r3, #2
 80033f6:	17d3      	asrs	r3, r2, #31
 80033f8:	1ac9      	subs	r1, r1, r3
 80033fa:	460b      	mov	r3, r1
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	b25b      	sxtb	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3330      	adds	r3, #48	; 0x30
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <menu_manager+0x1714>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7fd f906 	bl	8000624 <Lcd_Send_Data>
 8003418:	e01b      	b.n	8003452 <menu_manager+0x1732>

		   }
		  else if(temp == 3)
 800341a:	7f3b      	ldrb	r3, [r7, #28]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d111      	bne.n	8003444 <menu_manager+0x1724>
		  {

			     alrm1_hh =0;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <menu_manager+0x1720>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
			     temp=0;
 8003426:	2300      	movs	r3, #0
 8003428:	773b      	strb	r3, [r7, #28]
 800342a:	e012      	b.n	8003452 <menu_manager+0x1732>
 800342c:	2000000d 	.word	0x2000000d
 8003430:	2000004c 	.word	0x2000004c
 8003434:	20000050 	.word	0x20000050
 8003438:	4ec4ec4f 	.word	0x4ec4ec4f
 800343c:	66666667 	.word	0x66666667
 8003440:	2000000f 	.word	0x2000000f

		  }

		  else if(temp == 8)
 8003444:	7f3b      	ldrb	r3, [r7, #28]
 8003446:	2b08      	cmp	r3, #8
 8003448:	d103      	bne.n	8003452 <menu_manager+0x1732>
		  {
			  temp =0;
 800344a:	2300      	movs	r3, #0
 800344c:	773b      	strb	r3, [r7, #28]

			  goto page1;
 800344e:	f7fe bc77 	b.w	8001d40 <menu_manager+0x20>
	  while(alrm1_hh)
 8003452:	4bc7      	ldr	r3, [pc, #796]	; (8003770 <menu_manager+0x1a50>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af35 	bne.w	80032c6 <menu_manager+0x15a6>
		  }
}

	     delay(100000);
 800345c:	48c5      	ldr	r0, [pc, #788]	; (8003774 <menu_manager+0x1a54>)
 800345e:	f7fd ff4f 	bl	8001300 <delay>

	while( alrm1_min)
 8003462:	e0b9      	b.n	80035d8 <menu_manager+0x18b8>
	{
		 delay(50000);
 8003464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003468:	f7fd ff4a 	bl	8001300 <delay>
		 uint8_t temp = keypad_scan();
 800346c:	f000 fde2 	bl	8004034 <keypad_scan>
 8003470:	4603      	mov	r3, r0
 8003472:	777b      	strb	r3, [r7, #29]


		 if(temp == 7)
 8003474:	7f7b      	ldrb	r3, [r7, #29]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d14d      	bne.n	8003516 <menu_manager+0x17f6>
		   {
			  mm++;
 800347a:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  mm=mm>0 ?mm:0;
 8003488:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800348c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003490:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  mm %=61;
 8003494:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 8003498:	4bb7      	ldr	r3, [pc, #732]	; (8003778 <menu_manager+0x1a58>)
 800349a:	fb83 1302 	smull	r1, r3, r3, r2
 800349e:	1119      	asrs	r1, r3, #4
 80034a0:	17d3      	asrs	r3, r2, #31
 80034a2:	1ac9      	subs	r1, r1, r3
 80034a4:	460b      	mov	r3, r1
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a5b      	subs	r3, r3, r1
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 80034b4:	4bb1      	ldr	r3, [pc, #708]	; (800377c <menu_manager+0x1a5c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	2105      	movs	r1, #5
 80034bc:	2002      	movs	r0, #2
 80034be:	f7fd f921 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 80034c2:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80034c6:	4aae      	ldr	r2, [pc, #696]	; (8003780 <menu_manager+0x1a60>)
 80034c8:	fb82 1203 	smull	r1, r2, r2, r3
 80034cc:	1092      	asrs	r2, r2, #2
 80034ce:	17db      	asrs	r3, r3, #31
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3330      	adds	r3, #48	; 0x30
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4ba8      	ldr	r3, [pc, #672]	; (800377c <menu_manager+0x1a5c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f7fd f89f 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 80034e6:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 80034ea:	4ba5      	ldr	r3, [pc, #660]	; (8003780 <menu_manager+0x1a60>)
 80034ec:	fb83 1302 	smull	r1, r3, r3, r2
 80034f0:	1099      	asrs	r1, r3, #2
 80034f2:	17d3      	asrs	r3, r2, #31
 80034f4:	1ac9      	subs	r1, r1, r3
 80034f6:	460b      	mov	r3, r1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	b25b      	sxtb	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3330      	adds	r3, #48	; 0x30
 8003506:	b2da      	uxtb	r2, r3
 8003508:	4b9c      	ldr	r3, [pc, #624]	; (800377c <menu_manager+0x1a5c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7fd f888 	bl	8000624 <Lcd_Send_Data>
 8003514:	e060      	b.n	80035d8 <menu_manager+0x18b8>

			}
		  else if(temp == 1)
 8003516:	7f7b      	ldrb	r3, [r7, #29]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d14d      	bne.n	80035b8 <menu_manager+0x1898>
			{
			   mm--;
 800351c:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			   mm=mm>0 ?mm:0;
 800352a:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800352e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003532:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			   mm %=61;
 8003536:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 800353a:	4b8f      	ldr	r3, [pc, #572]	; (8003778 <menu_manager+0x1a58>)
 800353c:	fb83 1302 	smull	r1, r3, r3, r2
 8003540:	1119      	asrs	r1, r3, #4
 8003542:	17d3      	asrs	r3, r2, #31
 8003544:	1ac9      	subs	r1, r1, r3
 8003546:	460b      	mov	r3, r1
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a5b      	subs	r3, r3, r1
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			   lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 8003556:	4b89      	ldr	r3, [pc, #548]	; (800377c <menu_manager+0x1a5c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	2105      	movs	r1, #5
 800355e:	2002      	movs	r0, #2
 8003560:	f7fd f8d0 	bl	8000704 <lcd_set_cursor>
			   Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 8003564:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8003568:	4a85      	ldr	r2, [pc, #532]	; (8003780 <menu_manager+0x1a60>)
 800356a:	fb82 1203 	smull	r1, r2, r2, r3
 800356e:	1092      	asrs	r2, r2, #2
 8003570:	17db      	asrs	r3, r3, #31
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	b25b      	sxtb	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3330      	adds	r3, #48	; 0x30
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b7f      	ldr	r3, [pc, #508]	; (800377c <menu_manager+0x1a5c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fd f84e 	bl	8000624 <Lcd_Send_Data>
			   Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8003588:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 800358c:	4b7c      	ldr	r3, [pc, #496]	; (8003780 <menu_manager+0x1a60>)
 800358e:	fb83 1302 	smull	r1, r3, r3, r2
 8003592:	1099      	asrs	r1, r3, #2
 8003594:	17d3      	asrs	r3, r2, #31
 8003596:	1ac9      	subs	r1, r1, r3
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3330      	adds	r3, #48	; 0x30
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <menu_manager+0x1a5c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7fd f837 	bl	8000624 <Lcd_Send_Data>
 80035b6:	e00f      	b.n	80035d8 <menu_manager+0x18b8>

			}
		  else if(temp == 3)
 80035b8:	7f7b      	ldrb	r3, [r7, #29]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d105      	bne.n	80035ca <menu_manager+0x18aa>
		  {
				alrm1_min =0;
 80035be:	4b71      	ldr	r3, [pc, #452]	; (8003784 <menu_manager+0x1a64>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
				temp=0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	777b      	strb	r3, [r7, #29]
 80035c8:	e006      	b.n	80035d8 <menu_manager+0x18b8>

		  }
		  else if(temp == 8)
 80035ca:	7f7b      	ldrb	r3, [r7, #29]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d103      	bne.n	80035d8 <menu_manager+0x18b8>
		  {
			  temp=0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	777b      	strb	r3, [r7, #29]

			  goto page1;
 80035d4:	f7fe bbb4 	b.w	8001d40 <menu_manager+0x20>
	while( alrm1_min)
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <menu_manager+0x1a64>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f af41 	bne.w	8003464 <menu_manager+0x1744>
		  }

}
	  delay(100000);
 80035e2:	4864      	ldr	r0, [pc, #400]	; (8003774 <menu_manager+0x1a54>)
 80035e4:	f7fd fe8c 	bl	8001300 <delay>

	while( alrm1_ss)
 80035e8:	e0b9      	b.n	800375e <menu_manager+0x1a3e>
	 {
			delay(50000);
 80035ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035ee:	f7fd fe87 	bl	8001300 <delay>
			uint8_t temp = keypad_scan();
 80035f2:	f000 fd1f 	bl	8004034 <keypad_scan>
 80035f6:	4603      	mov	r3, r0
 80035f8:	77bb      	strb	r3, [r7, #30]


	 if(temp == 7)
 80035fa:	7fbb      	ldrb	r3, [r7, #30]
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d14d      	bne.n	800369c <menu_manager+0x197c>
		   {
			  ss++;
 8003600:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  ss=ss>0 ?ss:0;
 800360e:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8003612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003616:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  ss %=61;
 800361a:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 800361e:	4b56      	ldr	r3, [pc, #344]	; (8003778 <menu_manager+0x1a58>)
 8003620:	fb83 1302 	smull	r1, r3, r3, r2
 8003624:	1119      	asrs	r1, r3, #4
 8003626:	17d3      	asrs	r3, r2, #31
 8003628:	1ac9      	subs	r1, r1, r3
 800362a:	460b      	mov	r3, r1
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a5b      	subs	r3, r3, r1
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 800363a:	4b50      	ldr	r3, [pc, #320]	; (800377c <menu_manager+0x1a5c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	210c      	movs	r1, #12
 8003642:	2001      	movs	r0, #1
 8003644:	f7fd f85e 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 8003648:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800364c:	4a4c      	ldr	r2, [pc, #304]	; (8003780 <menu_manager+0x1a60>)
 800364e:	fb82 1203 	smull	r1, r2, r2, r3
 8003652:	1092      	asrs	r2, r2, #2
 8003654:	17db      	asrs	r3, r3, #31
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b25b      	sxtb	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3330      	adds	r3, #48	; 0x30
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <menu_manager+0x1a5c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fc ffdc 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 800366c:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <menu_manager+0x1a60>)
 8003672:	fb83 1302 	smull	r1, r3, r3, r2
 8003676:	1099      	asrs	r1, r3, #2
 8003678:	17d3      	asrs	r3, r2, #31
 800367a:	1ac9      	subs	r1, r1, r3
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	b25b      	sxtb	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3330      	adds	r3, #48	; 0x30
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <menu_manager+0x1a5c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fc ffc5 	bl	8000624 <Lcd_Send_Data>
 800369a:	e060      	b.n	800375e <menu_manager+0x1a3e>

			}
	  else if(temp == 1)
 800369c:	7fbb      	ldrb	r3, [r7, #30]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d14d      	bne.n	800373e <menu_manager+0x1a1e>
			{
			  ss--;
 80036a2:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  ss=ss>0 ?ss:0;
 80036b0:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80036b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  ss %=61;
 80036bc:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <menu_manager+0x1a58>)
 80036c2:	fb83 1302 	smull	r1, r3, r3, r2
 80036c6:	1119      	asrs	r1, r3, #4
 80036c8:	17d3      	asrs	r3, r2, #31
 80036ca:	1ac9      	subs	r1, r1, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a5b      	subs	r3, r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <menu_manager+0x1a5c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	210c      	movs	r1, #12
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7fd f80d 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 80036ea:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80036ee:	4a24      	ldr	r2, [pc, #144]	; (8003780 <menu_manager+0x1a60>)
 80036f0:	fb82 1203 	smull	r1, r2, r2, r3
 80036f4:	1092      	asrs	r2, r2, #2
 80036f6:	17db      	asrs	r3, r3, #31
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	b25b      	sxtb	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3330      	adds	r3, #48	; 0x30
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <menu_manager+0x1a5c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fc ff8b 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 800370e:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <menu_manager+0x1a60>)
 8003714:	fb83 1302 	smull	r1, r3, r3, r2
 8003718:	1099      	asrs	r1, r3, #2
 800371a:	17d3      	asrs	r3, r2, #31
 800371c:	1ac9      	subs	r1, r1, r3
 800371e:	460b      	mov	r3, r1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b25b      	sxtb	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3330      	adds	r3, #48	; 0x30
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <menu_manager+0x1a5c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f7fc ff74 	bl	8000624 <Lcd_Send_Data>
 800373c:	e00f      	b.n	800375e <menu_manager+0x1a3e>
			}
	  else if(temp == 3)
 800373e:	7fbb      	ldrb	r3, [r7, #30]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d105      	bne.n	8003750 <menu_manager+0x1a30>
			{
			  alrm1_ss = 0;
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <menu_manager+0x1a68>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
			  temp=0;
 800374a:	2300      	movs	r3, #0
 800374c:	77bb      	strb	r3, [r7, #30]
 800374e:	e006      	b.n	800375e <menu_manager+0x1a3e>

			 }


	  else if(temp == 8)
 8003750:	7fbb      	ldrb	r3, [r7, #30]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d103      	bne.n	800375e <menu_manager+0x1a3e>
		  {
			  temp=0;
 8003756:	2300      	movs	r3, #0
 8003758:	77bb      	strb	r3, [r7, #30]

			  goto page1;
 800375a:	f7fe baf1 	b.w	8001d40 <menu_manager+0x20>
	while( alrm1_ss)
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <menu_manager+0x1a68>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f47f af41 	bne.w	80035ea <menu_manager+0x18ca>
		  }

}

	delay(100000);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <menu_manager+0x1a54>)
 800376a:	f7fd fdc9 	bl	8001300 <delay>
while( alrm1_ft)
 800376e:	e059      	b.n	8003824 <menu_manager+0x1b04>
 8003770:	2000000f 	.word	0x2000000f
 8003774:	000186a0 	.word	0x000186a0
 8003778:	4325c53f 	.word	0x4325c53f
 800377c:	20000050 	.word	0x20000050
 8003780:	66666667 	.word	0x66666667
 8003784:	2000000e 	.word	0x2000000e
 8003788:	20000065 	.word	0x20000065
 {
		delay(50000);
 800378c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003790:	f7fd fdb6 	bl	8001300 <delay>
		uint8_t temp = keypad_scan();
 8003794:	f000 fc4e 	bl	8004034 <keypad_scan>
 8003798:	4603      	mov	r3, r0
 800379a:	77fb      	strb	r3, [r7, #31]


		if(temp == 7)
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	2b07      	cmp	r3, #7
 80037a0:	d116      	bne.n	80037d0 <menu_manager+0x1ab0>
	   {
			  tf=0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 80037a8:	4bb9      	ldr	r3, [pc, #740]	; (8003a90 <menu_manager+0x1d70>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	210c      	movs	r1, #12
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7fc ffa7 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data('A', I2C_1.pI2Cx);
 80037b6:	4bb6      	ldr	r3, [pc, #728]	; (8003a90 <menu_manager+0x1d70>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	2041      	movs	r0, #65	; 0x41
 80037be:	f7fc ff31 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80037c2:	4bb3      	ldr	r3, [pc, #716]	; (8003a90 <menu_manager+0x1d70>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	204d      	movs	r0, #77	; 0x4d
 80037ca:	f7fc ff2b 	bl	8000624 <Lcd_Send_Data>
 80037ce:	e029      	b.n	8003824 <menu_manager+0x1b04>

	   }
	  else if(temp == 1)
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d116      	bne.n	8003804 <menu_manager+0x1ae4>
	   {
			  tf=1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 80037dc:	4bac      	ldr	r3, [pc, #688]	; (8003a90 <menu_manager+0x1d70>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	210c      	movs	r1, #12
 80037e4:	2002      	movs	r0, #2
 80037e6:	f7fc ff8d 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data('P', I2C_1.pI2Cx);
 80037ea:	4ba9      	ldr	r3, [pc, #676]	; (8003a90 <menu_manager+0x1d70>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	2050      	movs	r0, #80	; 0x50
 80037f2:	f7fc ff17 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80037f6:	4ba6      	ldr	r3, [pc, #664]	; (8003a90 <menu_manager+0x1d70>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	204d      	movs	r0, #77	; 0x4d
 80037fe:	f7fc ff11 	bl	8000624 <Lcd_Send_Data>
 8003802:	e00f      	b.n	8003824 <menu_manager+0x1b04>
	   }
	  else if(temp == 3)
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d105      	bne.n	8003816 <menu_manager+0x1af6>
	  {
			  alrm1_ft = 0;
 800380a:	4ba2      	ldr	r3, [pc, #648]	; (8003a94 <menu_manager+0x1d74>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
			  temp=0;
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e006      	b.n	8003824 <menu_manager+0x1b04>
	  }

	  else if(temp == 8)
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d103      	bne.n	8003824 <menu_manager+0x1b04>
	  {
			  temp=0;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]

			  goto page1;
 8003820:	f7fe ba8e 	b.w	8001d40 <menu_manager+0x20>
while( alrm1_ft)
 8003824:	4b9b      	ldr	r3, [pc, #620]	; (8003a94 <menu_manager+0x1d74>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1af      	bne.n	800378c <menu_manager+0x1a6c>
	  }


}
    set_rtc_alrm1(hh, mm, ss, tf);
 800382c:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
 8003830:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8003834:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003838:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800383c:	f7fe f9d8 	bl	8001bf0 <set_rtc_alrm1>
	lcd_clear_display(I2C_1.pI2Cx);
 8003840:	4b93      	ldr	r3, [pc, #588]	; (8003a90 <menu_manager+0x1d70>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc ff86 	bl	8000756 <lcd_clear_display>
}


  if(mode == 3)
 800384a:	4b93      	ldr	r3, [pc, #588]	; (8003a98 <menu_manager+0x1d78>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b03      	cmp	r3, #3
 8003850:	f040 8391 	bne.w	8003f76 <menu_manager+0x2256>
   {

	  	    	  lcd_clear_display(I2C_1.pI2Cx);
 8003854:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <menu_manager+0x1d70>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc ff7c 	bl	8000756 <lcd_clear_display>
	  	    	  lcd_set_cursor(1, 1, I2C_1.pI2Cx);
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <menu_manager+0x1d70>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	2101      	movs	r1, #1
 8003866:	2001      	movs	r0, #1
 8003868:	f7fc ff4c 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 800386c:	4b88      	ldr	r3, [pc, #544]	; (8003a90 <menu_manager+0x1d70>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	2048      	movs	r0, #72	; 0x48
 8003874:	f7fc fed6 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('H', I2C_1.pI2Cx);
 8003878:	4b85      	ldr	r3, [pc, #532]	; (8003a90 <menu_manager+0x1d70>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	2048      	movs	r0, #72	; 0x48
 8003880:	f7fc fed0 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8003884:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <menu_manager+0x1d70>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4619      	mov	r1, r3
 800388a:	2020      	movs	r0, #32
 800388c:	f7fc feca 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <menu_manager+0x1d70>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	203a      	movs	r0, #58	; 0x3a
 8003898:	f7fc fec4 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 800389c:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <menu_manager+0x1d70>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	2030      	movs	r0, #48	; 0x30
 80038a4:	f7fc febe 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80038a8:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <menu_manager+0x1d70>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	2030      	movs	r0, #48	; 0x30
 80038b0:	f7fc feb8 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(1, 8, I2C_1.pI2Cx);
 80038b4:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <menu_manager+0x1d70>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	2108      	movs	r1, #8
 80038bc:	2001      	movs	r0, #1
 80038be:	f7fc ff21 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 80038c2:	4b73      	ldr	r3, [pc, #460]	; (8003a90 <menu_manager+0x1d70>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	2053      	movs	r0, #83	; 0x53
 80038ca:	f7fc feab 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('S', I2C_1.pI2Cx);
 80038ce:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <menu_manager+0x1d70>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	2053      	movs	r0, #83	; 0x53
 80038d6:	f7fc fea5 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <menu_manager+0x1d70>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4619      	mov	r1, r3
 80038e0:	2020      	movs	r0, #32
 80038e2:	f7fc fe9f 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 80038e6:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <menu_manager+0x1d70>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	203a      	movs	r0, #58	; 0x3a
 80038ee:	f7fc fe99 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <menu_manager+0x1d70>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	2030      	movs	r0, #48	; 0x30
 80038fa:	f7fc fe93 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 80038fe:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <menu_manager+0x1d70>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	2030      	movs	r0, #48	; 0x30
 8003906:	f7fc fe8d 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(2, 1, I2C_1.pI2Cx);
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <menu_manager+0x1d70>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	2101      	movs	r1, #1
 8003912:	2002      	movs	r0, #2
 8003914:	f7fc fef6 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003918:	4b5d      	ldr	r3, [pc, #372]	; (8003a90 <menu_manager+0x1d70>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	204d      	movs	r0, #77	; 0x4d
 8003920:	f7fc fe80 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003924:	4b5a      	ldr	r3, [pc, #360]	; (8003a90 <menu_manager+0x1d70>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	204d      	movs	r0, #77	; 0x4d
 800392c:	f7fc fe7a 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8003930:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <menu_manager+0x1d70>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4619      	mov	r1, r3
 8003936:	2020      	movs	r0, #32
 8003938:	f7fc fe74 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data(':', I2C_1.pI2Cx);
 800393c:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <menu_manager+0x1d70>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	203a      	movs	r0, #58	; 0x3a
 8003944:	f7fc fe6e 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8003948:	4b51      	ldr	r3, [pc, #324]	; (8003a90 <menu_manager+0x1d70>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	2030      	movs	r0, #48	; 0x30
 8003950:	f7fc fe68 	bl	8000624 <Lcd_Send_Data>
	  	    	  Lcd_Send_Data('0', I2C_1.pI2Cx);
 8003954:	4b4e      	ldr	r3, [pc, #312]	; (8003a90 <menu_manager+0x1d70>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	2030      	movs	r0, #48	; 0x30
 800395c:	f7fc fe62 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(2, 8, I2C_1.pI2Cx);
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <menu_manager+0x1d70>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	2108      	movs	r1, #8
 8003968:	2002      	movs	r0, #2
 800396a:	f7fc fecb 	bl	8000704 <lcd_set_cursor>
	  	    	  Lcd_Send_Data('T', I2C_1.pI2Cx);
 800396e:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <menu_manager+0x1d70>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	2054      	movs	r0, #84	; 0x54
 8003976:	f7fc fe55 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('F', I2C_1.pI2Cx);
 800397a:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <menu_manager+0x1d70>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	2046      	movs	r0, #70	; 0x46
 8003982:	f7fc fe4f 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data(' ', I2C_1.pI2Cx);
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <menu_manager+0x1d70>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	2020      	movs	r0, #32
 800398e:	f7fc fe49 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data(':', I2C_1.pI2Cx);
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <menu_manager+0x1d70>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4619      	mov	r1, r3
 8003998:	203a      	movs	r0, #58	; 0x3a
 800399a:	f7fc fe43 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('A', I2C_1.pI2Cx);
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <menu_manager+0x1d70>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	2041      	movs	r0, #65	; 0x41
 80039a6:	f7fc fe3d 	bl	8000624 <Lcd_Send_Data>
	  			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <menu_manager+0x1d70>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	204d      	movs	r0, #77	; 0x4d
 80039b2:	f7fc fe37 	bl	8000624 <Lcd_Send_Data>

	  	    	  lcd_set_cursor(1, 6, I2C_1.pI2Cx);
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <menu_manager+0x1d70>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	2106      	movs	r1, #6
 80039be:	2001      	movs	r0, #1
 80039c0:	f7fc fea0 	bl	8000704 <lcd_set_cursor>
	  	    	signed  char hh=0,mm=0,ss=0,tf=0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  while(alrm2_hh)
 80039dc:	e0cb      	b.n	8003b76 <menu_manager+0x1e56>
  {


		  delay(50000);
 80039de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039e2:	f7fd fc8d 	bl	8001300 <delay>
		  uint8_t temp = keypad_scan();
 80039e6:	f000 fb25 	bl	8004034 <keypad_scan>
 80039ea:	4603      	mov	r3, r0
 80039ec:	763b      	strb	r3, [r7, #24]


	  if(temp == 7)
 80039ee:	7e3b      	ldrb	r3, [r7, #24]
 80039f0:	2b07      	cmp	r3, #7
 80039f2:	d157      	bne.n	8003aa4 <menu_manager+0x1d84>
	  {
			  hh++;
 80039f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  hh=hh>0 ?hh:0;
 8003a02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  hh %=13;
 8003a0e:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <menu_manager+0x1d7c>)
 8003a14:	fb83 1302 	smull	r1, r3, r3, r2
 8003a18:	1099      	asrs	r1, r3, #2
 8003a1a:	17d3      	asrs	r3, r2, #31
 8003a1c:	1ac9      	subs	r1, r1, r3
 8003a1e:	460b      	mov	r3, r1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	440b      	add	r3, r1
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <menu_manager+0x1d70>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	2105      	movs	r1, #5
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7fc fe64 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 8003a3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <menu_manager+0x1d80>)
 8003a42:	fb82 1203 	smull	r1, r2, r2, r3
 8003a46:	1092      	asrs	r2, r2, #2
 8003a48:	17db      	asrs	r3, r3, #31
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	3330      	adds	r3, #48	; 0x30
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <menu_manager+0x1d70>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fc fde2 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 8003a60:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <menu_manager+0x1d80>)
 8003a66:	fb83 1302 	smull	r1, r3, r3, r2
 8003a6a:	1099      	asrs	r1, r3, #2
 8003a6c:	17d3      	asrs	r3, r2, #31
 8003a6e:	1ac9      	subs	r1, r1, r3
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	b25b      	sxtb	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3330      	adds	r3, #48	; 0x30
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <menu_manager+0x1d70>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fc fdcb 	bl	8000624 <Lcd_Send_Data>
 8003a8e:	e072      	b.n	8003b76 <menu_manager+0x1e56>
 8003a90:	20000050 	.word	0x20000050
 8003a94:	20000010 	.word	0x20000010
 8003a98:	2000004c 	.word	0x2000004c
 8003a9c:	4ec4ec4f 	.word	0x4ec4ec4f
 8003aa0:	66666667 	.word	0x66666667

	  }
	  else if(temp == 1)
 8003aa4:	7e3b      	ldrb	r3, [r7, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d155      	bne.n	8003b56 <menu_manager+0x1e36>
	  {
				hh--;
 8003aaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				hh=hh>0 && hh<60?hh:0;
 8003ab8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dd06      	ble.n	8003ace <menu_manager+0x1dae>
 8003ac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ac4:	2b3b      	cmp	r3, #59	; 0x3b
 8003ac6:	dc02      	bgt.n	8003ace <menu_manager+0x1dae>
 8003ac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003acc:	e000      	b.n	8003ad0 <menu_manager+0x1db0>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				hh%=13;
 8003ad4:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8003ad8:	4bb9      	ldr	r3, [pc, #740]	; (8003dc0 <menu_manager+0x20a0>)
 8003ada:	fb83 1302 	smull	r1, r3, r3, r2
 8003ade:	1099      	asrs	r1, r3, #2
 8003ae0:	17d3      	asrs	r3, r2, #31
 8003ae2:	1ac9      	subs	r1, r1, r3
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				lcd_set_cursor(1, 5, I2C_1.pI2Cx);
 8003af4:	4bb3      	ldr	r3, [pc, #716]	; (8003dc4 <menu_manager+0x20a4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	2105      	movs	r1, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fc fe01 	bl	8000704 <lcd_set_cursor>
				Lcd_Send_Data((hh/10)+48, I2C_1.pI2Cx);
 8003b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b06:	4ab0      	ldr	r2, [pc, #704]	; (8003dc8 <menu_manager+0x20a8>)
 8003b08:	fb82 1203 	smull	r1, r2, r2, r3
 8003b0c:	1092      	asrs	r2, r2, #2
 8003b0e:	17db      	asrs	r3, r3, #31
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	3330      	adds	r3, #48	; 0x30
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4baa      	ldr	r3, [pc, #680]	; (8003dc4 <menu_manager+0x20a4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7fc fd7f 	bl	8000624 <Lcd_Send_Data>
				Lcd_Send_Data((hh%10)+48, I2C_1.pI2Cx);
 8003b26:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8003b2a:	4ba7      	ldr	r3, [pc, #668]	; (8003dc8 <menu_manager+0x20a8>)
 8003b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8003b30:	1099      	asrs	r1, r3, #2
 8003b32:	17d3      	asrs	r3, r2, #31
 8003b34:	1ac9      	subs	r1, r1, r3
 8003b36:	460b      	mov	r3, r1
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3330      	adds	r3, #48	; 0x30
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	4b9e      	ldr	r3, [pc, #632]	; (8003dc4 <menu_manager+0x20a4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7fc fd68 	bl	8000624 <Lcd_Send_Data>
 8003b54:	e00f      	b.n	8003b76 <menu_manager+0x1e56>

	   }
	  else if(temp == 3)
 8003b56:	7e3b      	ldrb	r3, [r7, #24]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d105      	bne.n	8003b68 <menu_manager+0x1e48>
	  {

				  alrm2_hh=0;
 8003b5c:	4b9b      	ldr	r3, [pc, #620]	; (8003dcc <menu_manager+0x20ac>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
				  temp=0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	763b      	strb	r3, [r7, #24]
 8003b66:	e006      	b.n	8003b76 <menu_manager+0x1e56>

	  }

	  else if(temp == 8)
 8003b68:	7e3b      	ldrb	r3, [r7, #24]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d103      	bne.n	8003b76 <menu_manager+0x1e56>
	  {
					  temp =0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	763b      	strb	r3, [r7, #24]
					  goto page1;
 8003b72:	f7fe b8e5 	b.w	8001d40 <menu_manager+0x20>
  while(alrm2_hh)
 8003b76:	4b95      	ldr	r3, [pc, #596]	; (8003dcc <menu_manager+0x20ac>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af2f 	bne.w	80039de <menu_manager+0x1cbe>

	  }
}

  delay(100000);
 8003b80:	4893      	ldr	r0, [pc, #588]	; (8003dd0 <menu_manager+0x20b0>)
 8003b82:	f7fd fbbd 	bl	8001300 <delay>

	while( alrm2_min)
 8003b86:	e0b9      	b.n	8003cfc <menu_manager+0x1fdc>
	{
			 delay(50000);
 8003b88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b8c:	f7fd fbb8 	bl	8001300 <delay>
			 uint8_t temp = keypad_scan();
 8003b90:	f000 fa50 	bl	8004034 <keypad_scan>
 8003b94:	4603      	mov	r3, r0
 8003b96:	767b      	strb	r3, [r7, #25]


		 if(temp == 7)
 8003b98:	7e7b      	ldrb	r3, [r7, #25]
 8003b9a:	2b07      	cmp	r3, #7
 8003b9c:	d14d      	bne.n	8003c3a <menu_manager+0x1f1a>
			 {
				  mm++;
 8003b9e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  mm=mm>0 ?mm:0;
 8003bac:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003bb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  mm %=61;
 8003bb8:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <menu_manager+0x20b4>)
 8003bbe:	fb83 1302 	smull	r1, r3, r3, r2
 8003bc2:	1119      	asrs	r1, r3, #4
 8003bc4:	17d3      	asrs	r3, r2, #31
 8003bc6:	1ac9      	subs	r1, r1, r3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a5b      	subs	r3, r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 8003bd8:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <menu_manager+0x20a4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2105      	movs	r1, #5
 8003be0:	2002      	movs	r0, #2
 8003be2:	f7fc fd8f 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 8003be6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003bea:	4a77      	ldr	r2, [pc, #476]	; (8003dc8 <menu_manager+0x20a8>)
 8003bec:	fb82 1203 	smull	r1, r2, r2, r3
 8003bf0:	1092      	asrs	r2, r2, #2
 8003bf2:	17db      	asrs	r3, r3, #31
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3330      	adds	r3, #48	; 0x30
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <menu_manager+0x20a4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fc fd0d 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8003c0a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8003c0e:	4b6e      	ldr	r3, [pc, #440]	; (8003dc8 <menu_manager+0x20a8>)
 8003c10:	fb83 1302 	smull	r1, r3, r3, r2
 8003c14:	1099      	asrs	r1, r3, #2
 8003c16:	17d3      	asrs	r3, r2, #31
 8003c18:	1ac9      	subs	r1, r1, r3
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3330      	adds	r3, #48	; 0x30
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <menu_manager+0x20a4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fc fcf6 	bl	8000624 <Lcd_Send_Data>
 8003c38:	e060      	b.n	8003cfc <menu_manager+0x1fdc>

			}
		  else if(temp == 1)
 8003c3a:	7e7b      	ldrb	r3, [r7, #25]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d14d      	bne.n	8003cdc <menu_manager+0x1fbc>
			{
				  mm--;
 8003c40:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  mm=mm>0 ?mm:0;
 8003c4e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003c52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003c56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  mm %=61;
 8003c5a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <menu_manager+0x20b4>)
 8003c60:	fb83 1302 	smull	r1, r3, r3, r2
 8003c64:	1119      	asrs	r1, r3, #4
 8003c66:	17d3      	asrs	r3, r2, #31
 8003c68:	1ac9      	subs	r1, r1, r3
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a5b      	subs	r3, r3, r1
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  lcd_set_cursor(2, 5, I2C_1.pI2Cx);
 8003c7a:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <menu_manager+0x20a4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2105      	movs	r1, #5
 8003c82:	2002      	movs	r0, #2
 8003c84:	f7fc fd3e 	bl	8000704 <lcd_set_cursor>
				  Lcd_Send_Data((mm/10)+48, I2C_1.pI2Cx);
 8003c88:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8003c8c:	4a4e      	ldr	r2, [pc, #312]	; (8003dc8 <menu_manager+0x20a8>)
 8003c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c92:	1092      	asrs	r2, r2, #2
 8003c94:	17db      	asrs	r3, r3, #31
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3330      	adds	r3, #48	; 0x30
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <menu_manager+0x20a4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fc fcbc 	bl	8000624 <Lcd_Send_Data>
				  Lcd_Send_Data((mm%10)+48, I2C_1.pI2Cx);
 8003cac:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8003cb0:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <menu_manager+0x20a8>)
 8003cb2:	fb83 1302 	smull	r1, r3, r3, r2
 8003cb6:	1099      	asrs	r1, r3, #2
 8003cb8:	17d3      	asrs	r3, r2, #31
 8003cba:	1ac9      	subs	r1, r1, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3330      	adds	r3, #48	; 0x30
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <menu_manager+0x20a4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fc fca5 	bl	8000624 <Lcd_Send_Data>
 8003cda:	e00f      	b.n	8003cfc <menu_manager+0x1fdc>

			}
			else if(temp == 3)
 8003cdc:	7e7b      	ldrb	r3, [r7, #25]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d105      	bne.n	8003cee <menu_manager+0x1fce>
			 {
				alrm2_min=0;
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <menu_manager+0x20b8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
				temp=0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	767b      	strb	r3, [r7, #25]
 8003cec:	e006      	b.n	8003cfc <menu_manager+0x1fdc>

			 }
			 else if(temp == 8)
 8003cee:	7e7b      	ldrb	r3, [r7, #25]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d103      	bne.n	8003cfc <menu_manager+0x1fdc>
			 {
				  temp=0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	767b      	strb	r3, [r7, #25]
				  goto page1;
 8003cf8:	f7fe b822 	b.w	8001d40 <menu_manager+0x20>
	while( alrm2_min)
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <menu_manager+0x20b8>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af41 	bne.w	8003b88 <menu_manager+0x1e68>
			 }

}
		  delay(100000);
 8003d06:	4832      	ldr	r0, [pc, #200]	; (8003dd0 <menu_manager+0x20b0>)
 8003d08:	f7fd fafa 	bl	8001300 <delay>

while( alrm2_ss)
 8003d0c:	e0ca      	b.n	8003ea4 <menu_manager+0x2184>
 {
		delay(50000);
 8003d0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d12:	f7fd faf5 	bl	8001300 <delay>
		uint8_t temp = keypad_scan();
 8003d16:	f000 f98d 	bl	8004034 <keypad_scan>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	76bb      	strb	r3, [r7, #26]


	 if(temp == 7)
 8003d1e:	7ebb      	ldrb	r3, [r7, #26]
 8003d20:	2b07      	cmp	r3, #7
 8003d22:	d15b      	bne.n	8003ddc <menu_manager+0x20bc>
	 	 {
			  ss++;
 8003d24:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  ss=ss>0 ?ss:0;
 8003d32:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003d36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  ss %=61;
 8003d3e:	f997 202d 	ldrsb.w	r2, [r7, #45]	; 0x2d
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <menu_manager+0x20b4>)
 8003d44:	fb83 1302 	smull	r1, r3, r3, r2
 8003d48:	1119      	asrs	r1, r3, #4
 8003d4a:	17d3      	asrs	r3, r2, #31
 8003d4c:	1ac9      	subs	r1, r1, r3
 8003d4e:	460b      	mov	r3, r1
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a5b      	subs	r3, r3, r1
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 8003d5e:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <menu_manager+0x20a4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	210c      	movs	r1, #12
 8003d66:	2001      	movs	r0, #1
 8003d68:	f7fc fccc 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 8003d6c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <menu_manager+0x20a8>)
 8003d72:	fb82 1203 	smull	r1, r2, r2, r3
 8003d76:	1092      	asrs	r2, r2, #2
 8003d78:	17db      	asrs	r3, r3, #31
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3330      	adds	r3, #48	; 0x30
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <menu_manager+0x20a4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fc fc4a 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 8003d90:	f997 202d 	ldrsb.w	r2, [r7, #45]	; 0x2d
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <menu_manager+0x20a8>)
 8003d96:	fb83 1302 	smull	r1, r3, r3, r2
 8003d9a:	1099      	asrs	r1, r3, #2
 8003d9c:	17d3      	asrs	r3, r2, #31
 8003d9e:	1ac9      	subs	r1, r1, r3
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	3330      	adds	r3, #48	; 0x30
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <menu_manager+0x20a4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fc fc33 	bl	8000624 <Lcd_Send_Data>
 8003dbe:	e071      	b.n	8003ea4 <menu_manager+0x2184>
 8003dc0:	4ec4ec4f 	.word	0x4ec4ec4f
 8003dc4:	20000050 	.word	0x20000050
 8003dc8:	66666667 	.word	0x66666667
 8003dcc:	20000012 	.word	0x20000012
 8003dd0:	000186a0 	.word	0x000186a0
 8003dd4:	4325c53f 	.word	0x4325c53f
 8003dd8:	20000011 	.word	0x20000011

		}
	else if(temp == 1)
 8003ddc:	7ebb      	ldrb	r3, [r7, #26]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d14d      	bne.n	8003e7e <menu_manager+0x215e>
		{
			  ss--;
 8003de2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  ss=ss>0 ?ss:0;
 8003df0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003df8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  ss %=61;
 8003dfc:	f997 202d 	ldrsb.w	r2, [r7, #45]	; 0x2d
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <menu_manager+0x2280>)
 8003e02:	fb83 1302 	smull	r1, r3, r3, r2
 8003e06:	1119      	asrs	r1, r3, #4
 8003e08:	17d3      	asrs	r3, r2, #31
 8003e0a:	1ac9      	subs	r1, r1, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a5b      	subs	r3, r3, r1
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			  lcd_set_cursor(1, 12, I2C_1.pI2Cx);
 8003e1c:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <menu_manager+0x2284>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	210c      	movs	r1, #12
 8003e24:	2001      	movs	r0, #1
 8003e26:	f7fc fc6d 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data((ss/10)+48, I2C_1.pI2Cx);
 8003e2a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <menu_manager+0x2288>)
 8003e30:	fb82 1203 	smull	r1, r2, r2, r3
 8003e34:	1092      	asrs	r2, r2, #2
 8003e36:	17db      	asrs	r3, r3, #31
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3330      	adds	r3, #48	; 0x30
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b58      	ldr	r3, [pc, #352]	; (8003fa4 <menu_manager+0x2284>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7fc fbeb 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data((ss%10)+48, I2C_1.pI2Cx);
 8003e4e:	f997 202d 	ldrsb.w	r2, [r7, #45]	; 0x2d
 8003e52:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <menu_manager+0x2288>)
 8003e54:	fb83 1302 	smull	r1, r3, r3, r2
 8003e58:	1099      	asrs	r1, r3, #2
 8003e5a:	17d3      	asrs	r3, r2, #31
 8003e5c:	1ac9      	subs	r1, r1, r3
 8003e5e:	460b      	mov	r3, r1
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3330      	adds	r3, #48	; 0x30
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <menu_manager+0x2284>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7fc fbd4 	bl	8000624 <Lcd_Send_Data>
 8003e7c:	e012      	b.n	8003ea4 <menu_manager+0x2184>
		}
	else if(temp == 3)
 8003e7e:	7ebb      	ldrb	r3, [r7, #26]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d105      	bne.n	8003e90 <menu_manager+0x2170>
		{
			  alrm2_ss=0;
 8003e84:	4b49      	ldr	r3, [pc, #292]	; (8003fac <menu_manager+0x228c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
			  temp=0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	76bb      	strb	r3, [r7, #26]
 8003e8e:	e009      	b.n	8003ea4 <menu_manager+0x2184>

        }


	  else if(temp == 8)
 8003e90:	7ebb      	ldrb	r3, [r7, #26]
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d106      	bne.n	8003ea4 <menu_manager+0x2184>
		  {
			  temp=0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	76bb      	strb	r3, [r7, #26]
			  select_mode =1;
 8003e9a:	4b45      	ldr	r3, [pc, #276]	; (8003fb0 <menu_manager+0x2290>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
			  goto page1;
 8003ea0:	f7fd bf4e 	b.w	8001d40 <menu_manager+0x20>
while( alrm2_ss)
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <menu_manager+0x228c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f47f af30 	bne.w	8003d0e <menu_manager+0x1fee>
		  }

}

	  	            delay(100000);
 8003eae:	4841      	ldr	r0, [pc, #260]	; (8003fb4 <menu_manager+0x2294>)
 8003eb0:	f7fd fa26 	bl	8001300 <delay>
  while( alrm2_ft)
 8003eb4:	e04e      	b.n	8003f54 <menu_manager+0x2234>
	 {
		delay(50000);
 8003eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eba:	f7fd fa21 	bl	8001300 <delay>
		uint8_t temp = keypad_scan();
 8003ebe:	f000 f8b9 	bl	8004034 <keypad_scan>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	76fb      	strb	r3, [r7, #27]


		if(temp == 7)
 8003ec6:	7efb      	ldrb	r3, [r7, #27]
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	d116      	bne.n	8003efa <menu_manager+0x21da>
	   {
			  tf=0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <menu_manager+0x2284>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	210c      	movs	r1, #12
 8003eda:	2002      	movs	r0, #2
 8003edc:	f7fc fc12 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data('A', I2C_1.pI2Cx);
 8003ee0:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <menu_manager+0x2284>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	2041      	movs	r0, #65	; 0x41
 8003ee8:	f7fc fb9c 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <menu_manager+0x2284>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	204d      	movs	r0, #77	; 0x4d
 8003ef4:	f7fc fb96 	bl	8000624 <Lcd_Send_Data>
 8003ef8:	e02c      	b.n	8003f54 <menu_manager+0x2234>

	   }
	  else if(temp == 1)
 8003efa:	7efb      	ldrb	r3, [r7, #27]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d116      	bne.n	8003f2e <menu_manager+0x220e>
	   {
			  tf=1;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  lcd_set_cursor(2, 12, I2C_1.pI2Cx);
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <menu_manager+0x2284>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	210c      	movs	r1, #12
 8003f0e:	2002      	movs	r0, #2
 8003f10:	f7fc fbf8 	bl	8000704 <lcd_set_cursor>
			  Lcd_Send_Data('P', I2C_1.pI2Cx);
 8003f14:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <menu_manager+0x2284>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2050      	movs	r0, #80	; 0x50
 8003f1c:	f7fc fb82 	bl	8000624 <Lcd_Send_Data>
			  Lcd_Send_Data('M', I2C_1.pI2Cx);
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <menu_manager+0x2284>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	204d      	movs	r0, #77	; 0x4d
 8003f28:	f7fc fb7c 	bl	8000624 <Lcd_Send_Data>
 8003f2c:	e012      	b.n	8003f54 <menu_manager+0x2234>
	   }
	  else if(temp == 3)
 8003f2e:	7efb      	ldrb	r3, [r7, #27]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d105      	bne.n	8003f40 <menu_manager+0x2220>
	  {
			  alrm2_ft=0;
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <menu_manager+0x2298>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
			  temp=0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	76fb      	strb	r3, [r7, #27]
 8003f3e:	e009      	b.n	8003f54 <menu_manager+0x2234>
	  }

	  else if(temp == 8)
 8003f40:	7efb      	ldrb	r3, [r7, #27]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d106      	bne.n	8003f54 <menu_manager+0x2234>
	  {
			  temp=0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	76fb      	strb	r3, [r7, #27]
			  select_mode =1;
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <menu_manager+0x2290>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
			  goto page1;
 8003f50:	f7fd bef6 	b.w	8001d40 <menu_manager+0x20>
  while( alrm2_ft)
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <menu_manager+0x2298>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ac      	bne.n	8003eb6 <menu_manager+0x2196>
}




set_rtc_alrm2(hh, mm, ss, tf);
 8003f5c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8003f60:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003f64:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f6c:	f7fd fe62 	bl	8001c34 <set_rtc_alrm2>
 8003f70:	e002      	b.n	8003f78 <menu_manager+0x2258>
					  goto abort;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <menu_manager+0x2258>



 }

 abort:       menu_mode=1;
 8003f76:	bf00      	nop
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <menu_manager+0x229c>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
			  lcd_clear_display(I2C_1.pI2Cx);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <menu_manager+0x2284>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fbe7 	bl	8000756 <lcd_clear_display>
			  rtc_lcd_int();
 8003f88:	f7fd fd12 	bl	80019b0 <rtc_lcd_int>
			  *sysctrl  |=1<<SYSTICK_ENABLE;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f043 0201 	orr.w	r2, r3, #1
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	601a      	str	r2, [r3, #0]

}
 8003f98:	bf00      	nop
 8003f9a:	3750      	adds	r7, #80	; 0x50
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	4325c53f 	.word	0x4325c53f
 8003fa4:	20000050 	.word	0x20000050
 8003fa8:	66666667 	.word	0x66666667
 8003fac:	20000064 	.word	0x20000064
 8003fb0:	20000008 	.word	0x20000008
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	20000013 	.word	0x20000013
 8003fbc:	20000002 	.word	0x20000002

08003fc0 <keypad_config>:
#include "stm32f47xx.h"



void keypad_config(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0

	GPIO_Handle_t switch1;

	switch1.pGPIOx = GPIOE;
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <keypad_config+0x70>)
 8003fc8:	607b      	str	r3, [r7, #4]

	switch1.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PD;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	72fb      	strb	r3, [r7, #11]

	switch1.GPIO_PinConfig.GPIO_PinOPType =GPIO_OP_TYPE_PP;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	733b      	strb	r3, [r7, #12]
   //FOR ROW
	switch1.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST ;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	72bb      	strb	r3, [r7, #10]
	switch1.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OP;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	727b      	strb	r3, [r7, #9]
	switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO7;
 8003fda:	2307      	movs	r3, #7
 8003fdc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&switch1);
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fc77 	bl	80008d4 <GPIO_Init>
	switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO8;
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&switch1);
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fc71 	bl	80008d4 <GPIO_Init>
    switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO9;
 8003ff2:	2309      	movs	r3, #9
 8003ff4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&switch1);
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fc6b 	bl	80008d4 <GPIO_Init>
  //For column
    switch1.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 8003ffe:	2300      	movs	r3, #0
 8004000:	727b      	strb	r3, [r7, #9]
    switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO10;
 8004002:	230a      	movs	r3, #10
 8004004:	723b      	strb	r3, [r7, #8]
   	GPIO_Init(&switch1);
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fc63 	bl	80008d4 <GPIO_Init>
   	switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO11;
 800400e:	230b      	movs	r3, #11
 8004010:	723b      	strb	r3, [r7, #8]
   	GPIO_Init(&switch1);
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fc5d 	bl	80008d4 <GPIO_Init>
   	switch1.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO12;
 800401a:	230c      	movs	r3, #12
 800401c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&switch1);
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc fc57 	bl	80008d4 <GPIO_Init>


}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000

08004034 <keypad_scan>:

uint8_t keypad_scan()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0


	GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO7,1);
 8004038:	2201      	movs	r2, #1
 800403a:	2107      	movs	r1, #7
 800403c:	483f      	ldr	r0, [pc, #252]	; (800413c <keypad_scan+0x108>)
 800403e:	f7fc fdb3 	bl	8000ba8 <GPIO_Write_Outputpin>
	GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO8,0);
 8004042:	2200      	movs	r2, #0
 8004044:	2108      	movs	r1, #8
 8004046:	483d      	ldr	r0, [pc, #244]	; (800413c <keypad_scan+0x108>)
 8004048:	f7fc fdae 	bl	8000ba8 <GPIO_Write_Outputpin>
	GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO9,0);
 800404c:	2200      	movs	r2, #0
 800404e:	2109      	movs	r1, #9
 8004050:	483a      	ldr	r0, [pc, #232]	; (800413c <keypad_scan+0x108>)
 8004052:	f7fc fda9 	bl	8000ba8 <GPIO_Write_Outputpin>

	 if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO10) == 1)
 8004056:	210a      	movs	r1, #10
 8004058:	4838      	ldr	r0, [pc, #224]	; (800413c <keypad_scan+0x108>)
 800405a:	f7fc fd8d 	bl	8000b78 <GPIO_Read_InputPin>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <keypad_scan+0x34>
	  {
		  return 1;
 8004064:	2301      	movs	r3, #1
 8004066:	e066      	b.n	8004136 <keypad_scan+0x102>
	  }
	  else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO11) == 1)
 8004068:	210b      	movs	r1, #11
 800406a:	4834      	ldr	r0, [pc, #208]	; (800413c <keypad_scan+0x108>)
 800406c:	f7fc fd84 	bl	8000b78 <GPIO_Read_InputPin>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <keypad_scan+0x46>
	  {
		  return 2;
 8004076:	2302      	movs	r3, #2
 8004078:	e05d      	b.n	8004136 <keypad_scan+0x102>
	  }
	  else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO12) == 1)
 800407a:	210c      	movs	r1, #12
 800407c:	482f      	ldr	r0, [pc, #188]	; (800413c <keypad_scan+0x108>)
 800407e:	f7fc fd7b 	bl	8000b78 <GPIO_Read_InputPin>
 8004082:	4603      	mov	r3, r0
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <keypad_scan+0x58>
	   {
	 	  return 3;
 8004088:	2303      	movs	r3, #3
 800408a:	e054      	b.n	8004136 <keypad_scan+0x102>
	   }

	   GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO7,0);
 800408c:	2200      	movs	r2, #0
 800408e:	2107      	movs	r1, #7
 8004090:	482a      	ldr	r0, [pc, #168]	; (800413c <keypad_scan+0x108>)
 8004092:	f7fc fd89 	bl	8000ba8 <GPIO_Write_Outputpin>
	   GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO8,1);
 8004096:	2201      	movs	r2, #1
 8004098:	2108      	movs	r1, #8
 800409a:	4828      	ldr	r0, [pc, #160]	; (800413c <keypad_scan+0x108>)
 800409c:	f7fc fd84 	bl	8000ba8 <GPIO_Write_Outputpin>
	   GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO9,0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2109      	movs	r1, #9
 80040a4:	4825      	ldr	r0, [pc, #148]	; (800413c <keypad_scan+0x108>)
 80040a6:	f7fc fd7f 	bl	8000ba8 <GPIO_Write_Outputpin>

	  if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO10) == 1)
 80040aa:	210a      	movs	r1, #10
 80040ac:	4823      	ldr	r0, [pc, #140]	; (800413c <keypad_scan+0x108>)
 80040ae:	f7fc fd63 	bl	8000b78 <GPIO_Read_InputPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <keypad_scan+0x88>
		{
		  return 4;
 80040b8:	2304      	movs	r3, #4
 80040ba:	e03c      	b.n	8004136 <keypad_scan+0x102>
		}
	 else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO11) == 1)
 80040bc:	210b      	movs	r1, #11
 80040be:	481f      	ldr	r0, [pc, #124]	; (800413c <keypad_scan+0x108>)
 80040c0:	f7fc fd5a 	bl	8000b78 <GPIO_Read_InputPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <keypad_scan+0x9a>
		{
		  return 5;
 80040ca:	2305      	movs	r3, #5
 80040cc:	e033      	b.n	8004136 <keypad_scan+0x102>
		 }
	else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO12) == 1)
 80040ce:	210c      	movs	r1, #12
 80040d0:	481a      	ldr	r0, [pc, #104]	; (800413c <keypad_scan+0x108>)
 80040d2:	f7fc fd51 	bl	8000b78 <GPIO_Read_InputPin>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <keypad_scan+0xac>
		 {
		 	 return 6;
 80040dc:	2306      	movs	r3, #6
 80040de:	e02a      	b.n	8004136 <keypad_scan+0x102>
		  }
		 GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO7,0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2107      	movs	r1, #7
 80040e4:	4815      	ldr	r0, [pc, #84]	; (800413c <keypad_scan+0x108>)
 80040e6:	f7fc fd5f 	bl	8000ba8 <GPIO_Write_Outputpin>
		 GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO8,0);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2108      	movs	r1, #8
 80040ee:	4813      	ldr	r0, [pc, #76]	; (800413c <keypad_scan+0x108>)
 80040f0:	f7fc fd5a 	bl	8000ba8 <GPIO_Write_Outputpin>
		 GPIO_Write_Outputpin(GPIOE, GPIO_PIN_NO9,1);
 80040f4:	2201      	movs	r2, #1
 80040f6:	2109      	movs	r1, #9
 80040f8:	4810      	ldr	r0, [pc, #64]	; (800413c <keypad_scan+0x108>)
 80040fa:	f7fc fd55 	bl	8000ba8 <GPIO_Write_Outputpin>

	if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO10) == 1)
 80040fe:	210a      	movs	r1, #10
 8004100:	480e      	ldr	r0, [pc, #56]	; (800413c <keypad_scan+0x108>)
 8004102:	f7fc fd39 	bl	8000b78 <GPIO_Read_InputPin>
 8004106:	4603      	mov	r3, r0
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <keypad_scan+0xdc>
		 {
		 	 return 7;
 800410c:	2307      	movs	r3, #7
 800410e:	e012      	b.n	8004136 <keypad_scan+0x102>
		 }
	else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO11) == 1)
 8004110:	210b      	movs	r1, #11
 8004112:	480a      	ldr	r0, [pc, #40]	; (800413c <keypad_scan+0x108>)
 8004114:	f7fc fd30 	bl	8000b78 <GPIO_Read_InputPin>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <keypad_scan+0xee>
		 {
		 	  return 8;
 800411e:	2308      	movs	r3, #8
 8004120:	e009      	b.n	8004136 <keypad_scan+0x102>
		 }
	else if(GPIO_Read_InputPin(GPIOE, GPIO_PIN_NO12) == 1)
 8004122:	210c      	movs	r1, #12
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <keypad_scan+0x108>)
 8004126:	f7fc fd27 	bl	8000b78 <GPIO_Read_InputPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <keypad_scan+0x100>
		 {
		 	 return 9;
 8004130:	2309      	movs	r3, #9
 8004132:	e000      	b.n	8004136 <keypad_scan+0x102>
		 }


 return 0;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004142:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004144:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <LoopForever+0x6>)
  ldr r1, =_edata
 800414a:	490d      	ldr	r1, [pc, #52]	; (8004180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <LoopForever+0xe>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004150:	e002      	b.n	8004158 <LoopCopyDataInit>

08004152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004156:	3304      	adds	r3, #4

08004158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800415a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800415c:	d3f9      	bcc.n	8004152 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415e:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004160:	4c0a      	ldr	r4, [pc, #40]	; (800418c <LoopForever+0x16>)
  movs r3, #0
 8004162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004164:	e001      	b.n	800416a <LoopFillZerobss>

08004166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004168:	3204      	adds	r2, #4

0800416a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800416a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800416c:	d3fb      	bcc.n	8004166 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800416e:	f000 f811 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004172:	f7fd f951 	bl	8001418 <main>

08004176 <LoopForever>:

LoopForever:
    b LoopForever
 8004176:	e7fe      	b.n	8004176 <LoopForever>
  ldr   r0, =_estack
 8004178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800417c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004180:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8004184:	0800425c 	.word	0x0800425c
  ldr r2, =_sbss
 8004188:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800418c:	20000068 	.word	0x20000068

08004190 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004190:	e7fe      	b.n	8004190 <ADC_IRQHandler>
	...

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0d      	ldr	r6, [pc, #52]	; (80041cc <__libc_init_array+0x38>)
 8004198:	4c0d      	ldr	r4, [pc, #52]	; (80041d0 <__libc_init_array+0x3c>)
 800419a:	1ba4      	subs	r4, r4, r6
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	2500      	movs	r5, #0
 80041a0:	42a5      	cmp	r5, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	4e0b      	ldr	r6, [pc, #44]	; (80041d4 <__libc_init_array+0x40>)
 80041a6:	4c0c      	ldr	r4, [pc, #48]	; (80041d8 <__libc_init_array+0x44>)
 80041a8:	f000 f818 	bl	80041dc <_init>
 80041ac:	1ba4      	subs	r4, r4, r6
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	2500      	movs	r5, #0
 80041b2:	42a5      	cmp	r5, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041bc:	4798      	blx	r3
 80041be:	3501      	adds	r5, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c6:	4798      	blx	r3
 80041c8:	3501      	adds	r5, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	08004254 	.word	0x08004254
 80041d0:	08004254 	.word	0x08004254
 80041d4:	08004254 	.word	0x08004254
 80041d8:	08004258 	.word	0x08004258

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr
